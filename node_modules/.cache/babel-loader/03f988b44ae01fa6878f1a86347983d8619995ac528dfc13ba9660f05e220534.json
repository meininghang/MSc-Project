{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst base64url_1 = __importDefault(require(\"base64url\"));\nconst secp256k1_1 = __importDefault(require(\"secp256k1\"));\nconst constants_1 = require(\"../../constants\");\nconst keccak256_1 = __importDefault(require(\"../keccak256\"));\nclass Secp256k1 {\n  constructor(_key, pk) {\n    this._key = _key;\n    this.ownerLength = constants_1.SIG_CONFIG[constants_1.SignatureConfig.ETHEREUM].pubLength;\n    this.signatureLength = constants_1.SIG_CONFIG[constants_1.SignatureConfig.ETHEREUM].sigLength;\n    this.signatureType = constants_1.SignatureConfig.ETHEREUM;\n    this.pk = pk.toString(\"hex\");\n  }\n  get publicKey() {\n    return Buffer.alloc(0);\n  }\n  get key() {\n    return Buffer.from(this._key, \"hex\");\n  }\n  static async verify(pk, message, signature) {\n    let p = pk;\n    if (typeof pk === \"string\") p = base64url_1.default.toBuffer(pk);\n    let verified = false;\n    try {\n      verified = secp256k1_1.default.ecdsaVerify(signature, keccak256_1.default(Buffer.from(message)), p);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n    return verified;\n  }\n  sign(message) {\n    return secp256k1_1.default.ecdsaSign(keccak256_1.default(Buffer.from(message)), Buffer.from(this.key)).signature;\n  }\n}\nexports.default = Secp256k1;","map":{"version":3,"names":["base64url_1","__importDefault","require","secp256k1_1","constants_1","keccak256_1","Secp256k1","constructor","_key","pk","ownerLength","SIG_CONFIG","SignatureConfig","ETHEREUM","pubLength","signatureLength","sigLength","signatureType","toString","publicKey","Buffer","alloc","key","from","verify","message","signature","p","default","toBuffer","verified","ecdsaVerify","e","sign","ecdsaSign","exports"],"sources":["secp256k1.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;AACA,MAAAA,WAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,WAAA,GAAAF,eAAA,CAAAC,OAAA;AACA,MAAAE,WAAA,GAAAF,OAAA;AACA,MAAAG,WAAA,GAAAJ,eAAA,CAAAC,OAAA;AAEA,MAAqBI,SAAS;EAO5BC,YAAsBC,IAAY,EAAEC,EAAU;IAAxB,KAAAD,IAAI,GAAJA,IAAI;IANjB,KAAAE,WAAW,GAAWN,WAAA,CAAAO,UAAU,CAACP,WAAA,CAAAQ,eAAe,CAACC,QAAQ,CAAC,CAACC,SAAS;IACpE,KAAAC,eAAe,GACtBX,WAAA,CAAAO,UAAU,CAACP,WAAA,CAAAQ,eAAe,CAACC,QAAQ,CAAC,CAACG,SAAS;IACvC,KAAAC,aAAa,GAAoBb,WAAA,CAAAQ,eAAe,CAACC,QAAQ;IAIhE,IAAI,CAACJ,EAAE,GAAGA,EAAE,CAACS,QAAQ,CAAC,KAAK,CAAC;EAC9B;EAEA,IAAWC,SAASA,CAAA;IAClB,OAAOC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EACxB;EAEA,IAAWC,GAAGA,CAAA;IACZ,OAAOF,MAAM,CAACG,IAAI,CAAC,IAAI,CAACf,IAAI,EAAE,KAAK,CAAC;EACtC;EAEA,aAAagB,MAAMA,CACjBf,EAAmB,EACnBgB,OAAmB,EACnBC,SAAqB;IAErB,IAAIC,CAAC,GAAGlB,EAAE;IACV,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAEkB,CAAC,GAAG3B,WAAA,CAAA4B,OAAS,CAACC,QAAQ,CAACpB,EAAE,CAAC;IACtD,IAAIqB,QAAQ,GAAG,KAAK;IACpB,IAAI;MACFA,QAAQ,GAAG3B,WAAA,CAAAyB,OAAS,CAACG,WAAW,CAC9BL,SAAS,EACTrB,WAAA,CAAAuB,OAAS,CAACR,MAAM,CAACG,IAAI,CAACE,OAAO,CAAC,CAAC,EAC/BE,CAAW,CACZ;MACD;KACD,CAAC,OAAOK,CAAC,EAAE;IACZ,OAAOF,QAAQ;EACjB;EAEAG,IAAIA,CAACR,OAAmB;IACtB,OAAOtB,WAAA,CAAAyB,OAAS,CAACM,SAAS,CACxB7B,WAAA,CAAAuB,OAAS,CAACR,MAAM,CAACG,IAAI,CAACE,OAAO,CAAC,CAAC,EAC/BL,MAAM,CAACG,IAAI,CAAC,IAAI,CAACD,GAAG,CAAC,CACtB,CAACI,SAAS;EACb;;AA3CFS,OAAA,CAAAP,OAAA,GAAAtB,SAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}