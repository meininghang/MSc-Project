{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getDataByGW, getItemMeta, getOrders } from \"arseeding-js\";\nimport { chainStatus, paymentStatus } from '@/utils/constant/chainConst';\nimport { reportUrl, adotArUrl } from '@/utils/constant/apiConst';\nimport { getFileSize } from '@/utils/util';\nimport moment from 'moment';\nimport Everpay from 'everpay';\nimport axios from \"axios\";\nconst everpay = new Everpay();\nconst ajaxAdot = axios.create({\n  baseURL: adotArUrl,\n  headers: {\n    'Adot-Token': '213dfs56a1f2da54f2as5f1215',\n    'Content-Type': 'application/json'\n  }\n});\nexport default {\n  namespaced: true,\n  state: {\n    orderList: [],\n    txInfo: {},\n    searchList: []\n  },\n  getters: {\n    /**\r\n     * Serialize all the list information,\r\n     * @param state\r\n     * @returns {*[]}\r\n     */\n    getAllOrder(state) {\n      return state.orderList.map(item => {\n        if (item.createdAt || item.updatedAt) {\n          item.time = item.updatedAt ? item.createdAt.slice(0, 10) : item.updatedAt.slice(0, 10);\n        } else {\n          item.time = '';\n        }\n        if (item.metaInfo && item.metaInfo.tags && item.metaInfo.tags.length !== 0) {\n          const list = item.metaInfo.tags.filter(item => item.name && (item.name.toUpperCase() === 'name'.toUpperCase() || item.name.toUpperCase() === 'fileName'.toUpperCase()));\n          const typeList = item.metaInfo.tags.filter(item => item.name && (item.name.toUpperCase() === 'Content-Type'.toUpperCase() || item.name.toUpperCase() === 'type'.toUpperCase()));\n          item.fileName = list && list.length !== 0 ? list[0].value : item.id;\n          item.fileType = typeList && typeList.length !== 0 ? typeList[0].value : '';\n          item.tags = item.metaInfo.tags;\n        } else {\n          item.fileName = item.id;\n          item.fileType = '';\n          item.tags = [];\n        }\n        item.showButton = false;\n        item.fileSize = getFileSize(item.size);\n        return item;\n      });\n    },\n    getOrders(state) {\n      return state.orderList.map(item => {\n        if (item.createdAt || item.updatedAt) {\n          item.time = item.updatedAt ? item.createdAt.slice(0, 10) : item.updatedAt.slice(0, 10);\n        } else {\n          item.time = '--';\n        }\n        // item.time = item.updatedAt ? item.createdAt.slice(0, 10) : item.updatedAt.slice(0, 10)\n        // item.fileName = ''\n        item.fileType = '';\n        item.tags = [];\n        item.showButton = false;\n        item.fileSize = getFileSize(item.size);\n        return item;\n      });\n    },\n    getPublishOrders(state) {\n      if (state.orderList && state.orderList.length !== 0) {\n        return state.orderList.filter(item => item.onChainStatus === chainStatus.SUCCESS || item.onChainStatus === chainStatus.PENDING);\n      }\n      return [];\n    },\n    txInfoByHash(state) {\n      return {\n        ...state.txInfo,\n        // timeStampStr: moment(state.txInfo.timestamp).format('MMM.D.YYYY  HH:mm:SS  A')\n        timeStampStr: moment(state.txInfo.timestamp).format('YYYY.MM.D  HH:mm:SS  A')\n      };\n    },\n    searchList(state) {\n      return state.searchList;\n    }\n  },\n  mutations: {\n    ORDER_LIST(state, order) {\n      state.orderList = order;\n    },\n    GET_TX_INFO_BY_HASH(state, tx) {\n      state.txInfo = tx;\n    },\n    SEARCH_LIST(state, data) {\n      state.searchList = data;\n    },\n    ORDERS(state, order) {\n      state.orderList = order;\n    }\n  },\n  actions: {\n    async getOrderList({\n      commit\n    }, account) {\n      let list = [];\n      let orders = await getOrders(reportUrl, account);\n      // commit('ORDER_LIST', orders)\n      for (let i = 0; i < orders.length; i++) {\n        if (orders[i].paymentStatus !== paymentStatus.EXPIRED) {\n          orders[i].metaInfo = await getItemMeta(reportUrl, orders[i].itemId);\n          list.push(orders[i]);\n        } else {\n          orders[i].metaInfo = {};\n          list.push(orders[i]);\n        }\n      }\n      Promise.all(list).then(() => {\n        commit('ORDER_LIST', list);\n      });\n    },\n    async getOrders({\n      commit\n    }, account) {\n      let orders = await getOrders(reportUrl, account);\n      commit('ORDERS', orders);\n      return orders;\n    },\n    // eslint-disable-next-line no-empty-pattern\n    getItemMeta({}, id) {\n      return getItemMeta(reportUrl, id);\n    },\n    // eslint-disable-next-line no-empty-pattern\n    getOrderDetail({}, id) {\n      return getDataByGW(reportUrl, id);\n    },\n    /**\r\n     * Transactions paid for on everpay\r\n     * @param commit\r\n     * @param id\r\n     * @returns {Promise<void>}\r\n     */\n    async getTxByHash({\n      commit\n    }, id) {\n      const info = await everpay.txByHash(id);\n      commit('GET_TX_INFO_BY_HASH', info);\n      return info;\n    },\n    async searchArweave({\n      commit\n    }, param) {\n      const {\n        data\n      } = await ajaxAdot.post('/arweave/search/test', param);\n      console.log(1, data);\n      commit('SEARCH_LIST', data);\n      return data;\n    }\n  }\n};","map":{"version":3,"names":["getDataByGW","getItemMeta","getOrders","chainStatus","paymentStatus","reportUrl","adotArUrl","getFileSize","moment","Everpay","axios","everpay","ajaxAdot","create","baseURL","headers","namespaced","state","orderList","txInfo","searchList","getters","getAllOrder","map","item","createdAt","updatedAt","time","slice","metaInfo","tags","length","list","filter","name","toUpperCase","typeList","fileName","value","id","fileType","showButton","fileSize","size","getPublishOrders","onChainStatus","SUCCESS","PENDING","txInfoByHash","timeStampStr","timestamp","format","mutations","ORDER_LIST","order","GET_TX_INFO_BY_HASH","tx","SEARCH_LIST","data","ORDERS","actions","getOrderList","commit","account","orders","i","EXPIRED","itemId","push","Promise","all","then","getOrderDetail","getTxByHash","info","txByHash","searchArweave","param","post","console","log"],"sources":["E:/Amanda-project/vue2-project/project-vue2/src/store/order.js"],"sourcesContent":["import {getDataByGW, getItemMeta, getOrders, } from \"arseeding-js\";\r\nimport {chainStatus, paymentStatus} from '@/utils/constant/chainConst'\r\nimport {reportUrl, adotArUrl} from '@/utils/constant/apiConst'\r\nimport {getFileSize} from '@/utils/util'\r\nimport moment from 'moment'\r\nimport Everpay from 'everpay'\r\nimport axios from \"axios\";\r\nconst everpay = new Everpay()\r\n\r\n\r\nconst ajaxAdot = axios.create({\r\n    baseURL: adotArUrl,\r\n    headers: {\r\n        'Adot-Token': '213dfs56a1f2da54f2as5f1215',\r\n        'Content-Type': 'application/json'\r\n    }\r\n})\r\n\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state: {\r\n        orderList: [],\r\n        txInfo: {},\r\n        searchList: []\r\n    },\r\n    getters: {\r\n        /**\r\n         * Serialize all the list information,\r\n         * @param state\r\n         * @returns {*[]}\r\n         */\r\n        getAllOrder(state) {\r\n            return state.orderList.map(item => {\r\n                if (item.createdAt || item.updatedAt) {\r\n                    item.time = item.updatedAt ? item.createdAt.slice(0, 10) : item.updatedAt.slice(0, 10)\r\n                } else {\r\n                    item.time = ''\r\n                }\r\n                if (item.metaInfo && item.metaInfo.tags && item.metaInfo.tags.length !== 0) {\r\n                    const list = item.metaInfo.tags.filter(item => item.name && (item.name.toUpperCase() === 'name'.toUpperCase() || item.name.toUpperCase() === 'fileName'.toUpperCase()))\r\n                    const typeList = item.metaInfo.tags.filter(item => item.name && (item.name.toUpperCase() === 'Content-Type'.toUpperCase() || item.name.toUpperCase() === 'type'.toUpperCase()))\r\n                    item.fileName = list && list.length !==0 ? list[0].value : item.id\r\n                    item.fileType = typeList && typeList.length !==0 ? typeList[0].value : ''\r\n                    item.tags = item.metaInfo.tags\r\n                } else {\r\n                    item.fileName = item.id\r\n                    item.fileType = ''\r\n                    item.tags = []\r\n                }\r\n                item.showButton = false\r\n                item.fileSize = getFileSize(item.size)\r\n                return item\r\n            })\r\n        },\r\n        getOrders(state) {\r\n            return state.orderList.map(item => {\r\n                if (item.createdAt || item.updatedAt) {\r\n                    item.time = item.updatedAt ? item.createdAt.slice(0, 10) : item.updatedAt.slice(0, 10)\r\n                } else {\r\n                    item.time = '--'\r\n                }\r\n                // item.time = item.updatedAt ? item.createdAt.slice(0, 10) : item.updatedAt.slice(0, 10)\r\n                // item.fileName = ''\r\n                item.fileType = ''\r\n                item.tags = []\r\n                item.showButton = false\r\n                item.fileSize = getFileSize(item.size)\r\n                return item\r\n            })\r\n        },\r\n        getPublishOrders(state) {\r\n            if (state.orderList && state.orderList.length !== 0) {\r\n                return state.orderList.filter(item => item.onChainStatus === chainStatus.SUCCESS || item.onChainStatus === chainStatus.PENDING)\r\n            }\r\n            return []\r\n        },\r\n        txInfoByHash(state) {\r\n            return {\r\n                ...state.txInfo,\r\n                // timeStampStr: moment(state.txInfo.timestamp).format('MMM.D.YYYY  HH:mm:SS  A')\r\n                timeStampStr: moment(state.txInfo.timestamp).format('YYYY.MM.D  HH:mm:SS  A')\r\n            }\r\n        },\r\n        searchList(state) {\r\n            return state.searchList\r\n        }\r\n    },\r\n    mutations: {\r\n        ORDER_LIST(state, order) {\r\n            state.orderList = order\r\n        },\r\n        GET_TX_INFO_BY_HASH(state, tx) {\r\n            state.txInfo = tx\r\n        },\r\n        SEARCH_LIST(state, data) {\r\n            state.searchList = data\r\n        },\r\n        ORDERS(state, order) {\r\n            state.orderList = order\r\n        }\r\n    },\r\n    actions: {\r\n        async getOrderList({commit}, account) {\r\n            let list = []\r\n            let orders = await getOrders(reportUrl, account)\r\n            // commit('ORDER_LIST', orders)\r\n            for (let i = 0; i < orders.length; i++) {\r\n                if (orders[i].paymentStatus !== paymentStatus.EXPIRED) {\r\n                    orders[i].metaInfo = await getItemMeta(reportUrl, orders[i].itemId)\r\n                    list.push(orders[i])\r\n                } else {\r\n                    orders[i].metaInfo = {}\r\n                    list.push(orders[i])\r\n                }\r\n            }\r\n            Promise.all(list).then(() => {\r\n                commit('ORDER_LIST', list)\r\n            })\r\n        },\r\n        async getOrders({ commit }, account) {\r\n            let orders = await getOrders(reportUrl, account)\r\n            commit('ORDERS', orders)\r\n            return orders\r\n        },\r\n        // eslint-disable-next-line no-empty-pattern\r\n        getItemMeta({}, id) {\r\n            return getItemMeta(reportUrl, id)\r\n        },\r\n        // eslint-disable-next-line no-empty-pattern\r\n        getOrderDetail({}, id) {\r\n            return getDataByGW(reportUrl, id)\r\n        },\r\n        /**\r\n         * Transactions paid for on everpay\r\n         * @param commit\r\n         * @param id\r\n         * @returns {Promise<void>}\r\n         */\r\n        async getTxByHash({commit}, id) {\r\n            const info = await everpay.txByHash(id)\r\n            commit('GET_TX_INFO_BY_HASH', info)\r\n            return info\r\n        },\r\n        async searchArweave({commit}, param) {\r\n            const { data } = await ajaxAdot.post('/arweave/search/test', param)\r\n            console.log(1, data)\r\n            commit('SEARCH_LIST', data)\r\n            return data\r\n        }\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}