{"ast":null,"code":"// ATTENTION:\n// This use case will use multiple wallet address.\n// During testing period, please make you have all wallet address are registered in into whitelist\n\nimport { MindLake } from 'mind-lake-sdk';\nconst DataType = MindLake.DataType;\nconst appKey = '3KjBLshwhIt1QAKgHda72GeF0UrzlOoT/1bfyg2p79w=';\n\n/**\r\n * Encrypt the data and create the account table\r\n * @param data {Array} like:[{'wallet': '0x70dBcC09edF6D9AdD4A235e2D8346E78A79ac770', 'token': 'USDT', 'volume': 7.7}]\r\n * @param address {String} The account is you want to access encrypted information\r\n * @returns {Promise<void>}\r\n */\nexport async function insertData(data, address) {\n  const mindLake = await MindLake.getInstance(appKey);\n  console.log('========>', mindLake);\n\n  // connect to MindLake\n  const res1 = await mindLake.connect();\n  if (res1.code !== 0) {\n    console.error(res1.message);\n    return;\n  }\n\n  // create a table\n  const dataLake = mindLake.dataLake;\n  await dataLake.dropTable(\"transaction\");\n  const res2 = await dataLake.createTable(\"transaction\", [{\n    columnName: 'WalletAddress',\n    type: DataType.text,\n    encrypt: false\n  }, {\n    columnName: 'Token',\n    type: DataType.text,\n    encrypt: true\n  }, {\n    columnName: 'Volume',\n    type: DataType.float4,\n    encrypt: true\n  }]);\n  if (res2.code !== 0) {\n    console.error(res2.message);\n    return;\n  }\n\n  // encrypt data\n  const crypto = mindLake.crypto;\n  for (const row of data) {\n    const walletAddress = row.WalletAddress;\n    const encryptToken = await crypto.encrypt(row.Token, \"transaction.Token\");\n    const encryptVolume = await crypto.encrypt(row.Volume, \"transaction.Volume\");\n    const sql = `insert into transaction (\"WalletAddress\", \"Token\", \"Volume\") values ('${walletAddress}', '${encryptToken.result}', '${encryptVolume.result}')`;\n    const sqlRes = await dataLake.query(sql);\n    if (sqlRes.code !== 0) {\n      return console.error(sqlRes.message);\n    }\n  }\n  const permission = mindLake.permission;\n  const result = await permission.grant(address, ['transaction.Token', 'transaction.Volume']);\n  if (result.code !== 0) {\n    console.error(result.message);\n    return;\n  }\n}","map":{"version":3,"names":["MindLake","DataType","appKey","insertData","data","address","mindLake","getInstance","console","log","res1","connect","code","error","message","dataLake","dropTable","res2","createTable","columnName","type","text","encrypt","float4","crypto","row","walletAddress","WalletAddress","encryptToken","Token","encryptVolume","Volume","sql","result","sqlRes","query","permission","grant"],"sources":["E:/Amanda-project/vue2-project/project-vue2/src/utils/encryption.js"],"sourcesContent":["// ATTENTION:\r\n// This use case will use multiple wallet address.\r\n// During testing period, please make you have all wallet address are registered in into whitelist\r\n\r\nimport {MindLake} from 'mind-lake-sdk'\r\n\r\nconst DataType = MindLake.DataType\r\n\r\nconst appKey = '3KjBLshwhIt1QAKgHda72GeF0UrzlOoT/1bfyg2p79w='\r\n\r\n/**\r\n * Encrypt the data and create the account table\r\n * @param data {Array} like:[{'wallet': '0x70dBcC09edF6D9AdD4A235e2D8346E78A79ac770', 'token': 'USDT', 'volume': 7.7}]\r\n * @param address {String} The account is you want to access encrypted information\r\n * @returns {Promise<void>}\r\n */\r\nexport async function insertData(data, address) {\r\n    const mindLake = await MindLake.getInstance(appKey)\r\n    console.log('========>', mindLake)\r\n\r\n    // connect to MindLake\r\n    const res1 = await mindLake.connect()\r\n    if (res1.code !== 0) {\r\n        console.error(res1.message)\r\n        return\r\n    }\r\n\r\n    // create a table\r\n    const dataLake = mindLake.dataLake\r\n    await dataLake.dropTable(\"transaction\")\r\n    const res2 = await dataLake.createTable(\"transaction\", [\r\n        {columnName: 'WalletAddress', type: DataType.text, encrypt: false},\r\n        {columnName: 'Token', type: DataType.text, encrypt: true},\r\n        {columnName: 'Volume', type: DataType.float4, encrypt: true}],)\r\n    if (res2.code !== 0) {\r\n        console.error(res2.message)\r\n        return\r\n    }\r\n\r\n    // encrypt data\r\n    const crypto = mindLake.crypto\r\n    for (const row of data) {\r\n        const walletAddress = row.WalletAddress\r\n        const encryptToken = await crypto.encrypt(row.Token, \"transaction.Token\")\r\n        const encryptVolume = await crypto.encrypt(row.Volume, \"transaction.Volume\")\r\n        const sql = `insert into transaction (\"WalletAddress\", \"Token\", \"Volume\") values ('${walletAddress}', '${encryptToken.result}', '${encryptVolume.result}')`\r\n        const sqlRes = await dataLake.query(sql)\r\n        if (sqlRes.code !== 0) {\r\n            return console.error(sqlRes.message)\r\n        }\r\n    }\r\n    const permission = mindLake.permission\r\n    const result = await permission.grant(address, ['transaction.Token', 'transaction.Volume'])\r\n    if (result.code !== 0) {\r\n        console.error(result.message)\r\n        return\r\n    }\r\n}"],"mappings":"AAAA;AACA;AACA;;AAEA,SAAQA,QAAQ,QAAO,eAAe;AAEtC,MAAMC,QAAQ,GAAGD,QAAQ,CAACC,QAAQ;AAElC,MAAMC,MAAM,GAAG,8CAA8C;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,UAAUA,CAACC,IAAI,EAAEC,OAAO,EAAE;EAC5C,MAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACO,WAAW,CAACL,MAAM,CAAC;EACnDM,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEH,QAAQ,CAAC;;EAElC;EACA,MAAMI,IAAI,GAAG,MAAMJ,QAAQ,CAACK,OAAO,CAAC,CAAC;EACrC,IAAID,IAAI,CAACE,IAAI,KAAK,CAAC,EAAE;IACjBJ,OAAO,CAACK,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;IAC3B;EACJ;;EAEA;EACA,MAAMC,QAAQ,GAAGT,QAAQ,CAACS,QAAQ;EAClC,MAAMA,QAAQ,CAACC,SAAS,CAAC,aAAa,CAAC;EACvC,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,WAAW,CAAC,aAAa,EAAE,CACnD;IAACC,UAAU,EAAE,eAAe;IAAEC,IAAI,EAAEnB,QAAQ,CAACoB,IAAI;IAAEC,OAAO,EAAE;EAAK,CAAC,EAClE;IAACH,UAAU,EAAE,OAAO;IAAEC,IAAI,EAAEnB,QAAQ,CAACoB,IAAI;IAAEC,OAAO,EAAE;EAAI,CAAC,EACzD;IAACH,UAAU,EAAE,QAAQ;IAAEC,IAAI,EAAEnB,QAAQ,CAACsB,MAAM;IAAED,OAAO,EAAE;EAAI,CAAC,CAAE,CAAC;EACnE,IAAIL,IAAI,CAACL,IAAI,KAAK,CAAC,EAAE;IACjBJ,OAAO,CAACK,KAAK,CAACI,IAAI,CAACH,OAAO,CAAC;IAC3B;EACJ;;EAEA;EACA,MAAMU,MAAM,GAAGlB,QAAQ,CAACkB,MAAM;EAC9B,KAAK,MAAMC,GAAG,IAAIrB,IAAI,EAAE;IACpB,MAAMsB,aAAa,GAAGD,GAAG,CAACE,aAAa;IACvC,MAAMC,YAAY,GAAG,MAAMJ,MAAM,CAACF,OAAO,CAACG,GAAG,CAACI,KAAK,EAAE,mBAAmB,CAAC;IACzE,MAAMC,aAAa,GAAG,MAAMN,MAAM,CAACF,OAAO,CAACG,GAAG,CAACM,MAAM,EAAE,oBAAoB,CAAC;IAC5E,MAAMC,GAAG,GAAI,yEAAwEN,aAAc,OAAME,YAAY,CAACK,MAAO,OAAMH,aAAa,CAACG,MAAO,IAAG;IAC3J,MAAMC,MAAM,GAAG,MAAMnB,QAAQ,CAACoB,KAAK,CAACH,GAAG,CAAC;IACxC,IAAIE,MAAM,CAACtB,IAAI,KAAK,CAAC,EAAE;MACnB,OAAOJ,OAAO,CAACK,KAAK,CAACqB,MAAM,CAACpB,OAAO,CAAC;IACxC;EACJ;EACA,MAAMsB,UAAU,GAAG9B,QAAQ,CAAC8B,UAAU;EACtC,MAAMH,MAAM,GAAG,MAAMG,UAAU,CAACC,KAAK,CAAChC,OAAO,EAAE,CAAC,mBAAmB,EAAE,oBAAoB,CAAC,CAAC;EAC3F,IAAI4B,MAAM,CAACrB,IAAI,KAAK,CAAC,EAAE;IACnBJ,OAAO,CAACK,KAAK,CAACoB,MAAM,CAACnB,OAAO,CAAC;IAC7B;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}