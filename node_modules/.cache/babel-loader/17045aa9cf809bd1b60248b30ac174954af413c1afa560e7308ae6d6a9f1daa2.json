{"ast":null,"code":"import { providers } from \"ethers\";\nimport getCurrency from \"bundlr-arseeding-client/build/web/currencies\";\n// import {sign} from \"arseeding-arbundles/src/ar-data-bundle\";\nimport Everpay from 'everpay';\nimport axios from 'axios';\nimport { redstoneUrl, web3infuraIoUrl } from '@/utils/constant/apiConst';\n// import {genAPI} from \"arseeding-js\";\nconst everpay = new Everpay();\nconst ajax = axios.create({\n  baseURL: redstoneUrl\n});\nconst ajaxIo = axios.create({\n  baseURL: web3infuraIoUrl\n});\nexport default {\n  namespaced: true,\n  state: {\n    accountInfo: null,\n    signer: null,\n    instance: null,\n    symbol: null,\n    selectedSymbol: null,\n    balance: null,\n    tokenBalance: null\n  },\n  getters: {\n    account(state) {\n      if (!state.accountInfo) {\n        return sessionStorage.getItem('ACCOUNT_STRING') || '';\n      }\n      if (state.accountInfo && state.accountInfo.length !== 0) {\n        sessionStorage.setItem('ACCOUNT_STRING', state.accountInfo);\n        return state.accountInfo;\n      }\n      return '';\n    },\n    symbolList(state) {\n      if (state.symbol && state.symbol.length !== 0) {\n        return state.symbol.map(item => {\n          // item.value = (`${item.id}-${index}`).toString()\n          item.label = item.symbol;\n          item.value = item.symbol;\n          return item;\n        });\n      } else {\n        return [];\n      }\n    },\n    selectedSymbol(state) {\n      return state.selectedSymbol;\n    },\n    balance(state) {\n      return state.balance;\n    }\n  },\n  mutations: {\n    METE_MASK_ACCOUNT(state, account) {\n      state.accountInfo = account;\n    },\n    SIGNER_INFO(state, signer) {\n      state.signer = signer;\n    },\n    SYMBOL_LIST_INFO(state, symbol) {\n      state.symbol = symbol;\n    },\n    GET_BALANCE(state, balance) {\n      state.balance = balance;\n    },\n    TOKEN_BALANCE(state, tokenBalance) {\n      state.tokenBalance = tokenBalance;\n    }\n  },\n  actions: {\n    async getMetaMaskAccount({\n      commit\n    }) {\n      await window.ethereum.enable();\n      // const instance = await genAPI(window.ethereum)\n      const provider = new providers.Web3Provider(window.ethereum);\n      await provider._ready();\n      const accounts = await provider.listAccounts();\n      console.log(\"getCurrency\");\n      const currencyConfig = getCurrency('ethereum', provider);\n      await currencyConfig.ready();\n      console.log(currencyConfig);\n      const signer = await currencyConfig.getSigner();\n      // commit('METE_MASK_ACCOUNT', accounts)\n      commit('SIGNER_INFO', signer);\n      // commit('INSTANCE_INFO', instance)\n      return accounts;\n    },\n    async getNewMetaMaskAccount({\n      commit\n    }) {\n      const account = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      commit('METE_MASK_ACCOUNT', account[0]);\n      return account[0];\n    },\n    // eslint-disable-next-line no-empty-pattern\n    async getAccountBalances({\n      commit\n    }, accountId) {\n      const result = await everpay.balances({\n        account: accountId\n      });\n      commit('TOKEN_BALANCE', result);\n      return result;\n    },\n    async getAccountInfo({\n      commit\n    }) {\n      const info = await everpay.info();\n      const symbols = info.tokenList;\n      commit('SYMBOL_LIST_INFO', symbols);\n      return symbols;\n    },\n    async updateSelectSymbol({\n      commit\n    }, symbol) {\n      const balance = await everpay.balance({\n        symbol: symbol,\n        account: window.ethereum.selectedAddress\n      });\n      commit('GET_BALANCE', balance);\n      return balance;\n    },\n    // eslint-disable-next-line no-empty-pattern\n    getAllSymbolPrice({}, symbolStr) {\n      return ajax.get(`/prices?provider=redstone&symbols=${symbolStr}`);\n    },\n    // eslint-disable-next-line no-empty-pattern\n    async buyDeposit({}, params) {\n      // await window.ethereum.enable()\n      const provider = new providers.Web3Provider(window.ethereum);\n      const signer = await provider.getSigner();\n      const pay = new Everpay({\n        account: window.ethereum.selectedAddress,\n        chainType: params.chainType,\n        ethConnectedSigner: signer\n      });\n      const result = await pay.deposit({\n        tag: params.tag,\n        amount: params.amount\n      });\n      return result;\n    },\n    // eslint-disable-next-line no-empty-pattern\n    getFeeInfo({}, param) {\n      return ajaxIo.get(`/bundle/fee/1048576/${param}`);\n    },\n    // eslint-disable-next-line no-empty-pattern\n    getFee({}, param) {\n      return ajaxIo.get(`/bundle/fee/${param.size}/${param.currency}`);\n    }\n  }\n};","map":{"version":3,"names":["providers","getCurrency","Everpay","axios","redstoneUrl","web3infuraIoUrl","everpay","ajax","create","baseURL","ajaxIo","namespaced","state","accountInfo","signer","instance","symbol","selectedSymbol","balance","tokenBalance","getters","account","sessionStorage","getItem","length","setItem","symbolList","map","item","label","value","mutations","METE_MASK_ACCOUNT","SIGNER_INFO","SYMBOL_LIST_INFO","GET_BALANCE","TOKEN_BALANCE","actions","getMetaMaskAccount","commit","window","ethereum","enable","provider","Web3Provider","_ready","accounts","listAccounts","console","log","currencyConfig","ready","getSigner","getNewMetaMaskAccount","request","method","getAccountBalances","accountId","result","balances","getAccountInfo","info","symbols","tokenList","updateSelectSymbol","selectedAddress","getAllSymbolPrice","symbolStr","get","buyDeposit","params","pay","chainType","ethConnectedSigner","deposit","tag","amount","getFeeInfo","param","getFee","size","currency"],"sources":["E:/Amanda-project/vue2-project/project-vue2/src/store/account.js"],"sourcesContent":["import {providers} from \"ethers\";\r\nimport getCurrency from \"bundlr-arseeding-client/build/web/currencies\";\r\n// import {sign} from \"arseeding-arbundles/src/ar-data-bundle\";\r\nimport Everpay from 'everpay'\r\nimport axios from 'axios'\r\nimport {redstoneUrl, web3infuraIoUrl} from '@/utils/constant/apiConst'\r\n// import {genAPI} from \"arseeding-js\";\r\nconst everpay = new Everpay()\r\n\r\n\r\nconst ajax = axios.create({\r\n    baseURL: redstoneUrl\r\n})\r\nconst ajaxIo = axios.create({\r\n    baseURL: web3infuraIoUrl\r\n})\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state: {\r\n        accountInfo: null,\r\n        signer: null,\r\n        instance: null,\r\n        symbol: null,\r\n        selectedSymbol: null,\r\n        balance: null,\r\n        tokenBalance: null\r\n    },\r\n    getters: {\r\n        account(state) {\r\n            if (!state.accountInfo) {\r\n                return sessionStorage.getItem('ACCOUNT_STRING') || ''\r\n            }\r\n            if(state.accountInfo && state.accountInfo.length !== 0) {\r\n                sessionStorage.setItem('ACCOUNT_STRING', state.accountInfo)\r\n                return state.accountInfo\r\n            }\r\n            return ''\r\n        },\r\n        symbolList(state) {\r\n            if (state.symbol && state.symbol.length !== 0) {\r\n                return state.symbol.map((item) => {\r\n                    // item.value = (`${item.id}-${index}`).toString()\r\n                    item.label = item.symbol\r\n                    item.value = item.symbol\r\n                    return item\r\n                })\r\n            } else {\r\n                return []\r\n            }\r\n        },\r\n        selectedSymbol(state) {\r\n            return state.selectedSymbol\r\n        },\r\n        balance(state) {\r\n            return state.balance\r\n        }\r\n    },\r\n    mutations: {\r\n        METE_MASK_ACCOUNT(state, account) {\r\n            state.accountInfo = account\r\n        },\r\n        SIGNER_INFO(state, signer) {\r\n            state.signer = signer\r\n        },\r\n        SYMBOL_LIST_INFO(state, symbol) {\r\n            state.symbol = symbol\r\n        },\r\n        GET_BALANCE(state, balance) {\r\n            state.balance = balance\r\n        },\r\n        TOKEN_BALANCE(state, tokenBalance) {\r\n            state.tokenBalance = tokenBalance\r\n        }\r\n    },\r\n    actions: {\r\n        async getMetaMaskAccount({commit}) {\r\n            await window.ethereum.enable()\r\n            // const instance = await genAPI(window.ethereum)\r\n            const provider = new providers.Web3Provider(window.ethereum)\r\n            await provider._ready()\r\n            const accounts = await provider.listAccounts()\r\n            console.log(\"getCurrency\")\r\n            const currencyConfig = getCurrency('ethereum', provider)\r\n            await currencyConfig.ready()\r\n            console.log(currencyConfig)\r\n            const signer = await currencyConfig.getSigner()\r\n            // commit('METE_MASK_ACCOUNT', accounts)\r\n            commit('SIGNER_INFO', signer)\r\n            // commit('INSTANCE_INFO', instance)\r\n            return accounts\r\n        },\r\n        async getNewMetaMaskAccount({commit}) {\r\n            const account = await window.ethereum.request({method: 'eth_requestAccounts'})\r\n            commit('METE_MASK_ACCOUNT', account[0])\r\n            return account[0]\r\n        },\r\n        // eslint-disable-next-line no-empty-pattern\r\n        async getAccountBalances({commit}, accountId) {\r\n            const result = await everpay.balances({account: accountId})\r\n            commit('TOKEN_BALANCE', result)\r\n            return result\r\n        },\r\n        async getAccountInfo({commit}) {\r\n            const info = await everpay.info()\r\n            const symbols = info.tokenList\r\n            commit('SYMBOL_LIST_INFO', symbols)\r\n            return symbols\r\n        },\r\n        async updateSelectSymbol({commit}, symbol) {\r\n            const balance = await everpay.balance({\r\n                symbol: symbol,\r\n                account: window.ethereum.selectedAddress\r\n            })\r\n            commit('GET_BALANCE', balance)\r\n            return balance\r\n        },\r\n        // eslint-disable-next-line no-empty-pattern\r\n        getAllSymbolPrice({}, symbolStr) {\r\n            return ajax.get(`/prices?provider=redstone&symbols=${symbolStr}`)\r\n        },\r\n        // eslint-disable-next-line no-empty-pattern\r\n        async buyDeposit({}, params) {\r\n            // await window.ethereum.enable()\r\n            const provider = new providers.Web3Provider(window.ethereum)\r\n            const signer = await provider.getSigner()\r\n            const pay = new Everpay({\r\n                account: window.ethereum.selectedAddress,\r\n                chainType: params.chainType,\r\n                ethConnectedSigner: signer\r\n            })\r\n            const result = await pay.deposit({\r\n                tag: params.tag,\r\n                amount: params.amount\r\n            })\r\n            return result\r\n        },\r\n        // eslint-disable-next-line no-empty-pattern\r\n        getFeeInfo({}, param) {\r\n            return ajaxIo.get(`/bundle/fee/1048576/${param}`)\r\n        },\r\n        // eslint-disable-next-line no-empty-pattern\r\n        getFee({}, param) {\r\n            return ajaxIo.get(`/bundle/fee/${param.size}/${param.currency}`)\r\n        }\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}