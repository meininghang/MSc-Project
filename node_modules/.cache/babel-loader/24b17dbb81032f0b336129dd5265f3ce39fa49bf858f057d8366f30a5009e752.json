{"ast":null,"code":"import _classPrivateFieldInitSpec from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldSet from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport _classPrivateFieldGet from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport \"core-js/modules/es.array.push.js\";\n/**\n *  Generic long-lived socket provider.\n *\n *  Sub-classing notes\n *  - a sub-class MUST call the `_start()` method once connected\n *  - a sub-class MUST override the `_write(string)` method\n *  - a sub-class MUST call `_processMessage(string)` for each message\n *\n *  @_subsection: api/providers/abstract-provider\n */\nimport { UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { assert, assertArgument, makeError } from \"../utils/index.js\";\nimport { JsonRpcApiProvider } from \"./provider-jsonrpc.js\";\n/**\n *  A **SocketSubscriber** uses a socket transport to handle events and\n *  should use [[_emit]] to manage the events.\n */\nvar _provider = /*#__PURE__*/new WeakMap();\nvar _filter = /*#__PURE__*/new WeakMap();\nvar _filterId = /*#__PURE__*/new WeakMap();\nvar _paused = /*#__PURE__*/new WeakMap();\nvar _emitPromise = /*#__PURE__*/new WeakMap();\nexport class SocketSubscriber {\n  /**\n   *  The filter.\n   */\n  get filter() {\n    return JSON.parse(_classPrivateFieldGet(this, _filter));\n  }\n  /**\n   *  Creates a new **SocketSubscriber** attached to %%provider%% listening\n   *  to %%filter%%.\n   */\n  constructor(provider, filter) {\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _filter, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _filterId, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _paused, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _emitPromise, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _provider, provider);\n    _classPrivateFieldSet(this, _filter, JSON.stringify(filter));\n    _classPrivateFieldSet(this, _filterId, null);\n    _classPrivateFieldSet(this, _paused, null);\n    _classPrivateFieldSet(this, _emitPromise, null);\n  }\n  start() {\n    _classPrivateFieldSet(this, _filterId, _classPrivateFieldGet(this, _provider).send(\"eth_subscribe\", this.filter).then(filterId => {\n      ;\n      _classPrivateFieldGet(this, _provider)._register(filterId, this);\n      return filterId;\n    }));\n  }\n  stop() {\n    _classPrivateFieldGet(this, _filterId).then(filterId => {\n      _classPrivateFieldGet(this, _provider).send(\"eth_unsubscribe\", [filterId]);\n    });\n    _classPrivateFieldSet(this, _filterId, null);\n  }\n  // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs\n  //        and resume\n  pause(dropWhilePaused) {\n    assert(dropWhilePaused, \"preserve logs while paused not supported by SocketSubscriber yet\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"pause(false)\"\n    });\n    _classPrivateFieldSet(this, _paused, !!dropWhilePaused);\n  }\n  resume() {\n    _classPrivateFieldSet(this, _paused, null);\n  }\n  /**\n   *  @_ignore:\n   */\n  _handleMessage(message) {\n    if (_classPrivateFieldGet(this, _filterId) == null) {\n      return;\n    }\n    if (_classPrivateFieldGet(this, _paused) === null) {\n      let emitPromise = _classPrivateFieldGet(this, _emitPromise);\n      if (emitPromise == null) {\n        emitPromise = this._emit(_classPrivateFieldGet(this, _provider), message);\n      } else {\n        emitPromise = emitPromise.then(async () => {\n          await this._emit(_classPrivateFieldGet(this, _provider), message);\n        });\n      }\n      _classPrivateFieldSet(this, _emitPromise, emitPromise.then(() => {\n        if (_classPrivateFieldGet(this, _emitPromise) === emitPromise) {\n          _classPrivateFieldSet(this, _emitPromise, null);\n        }\n      }));\n    }\n  }\n  /**\n   *  Sub-classes **must** override this to emit the events on the\n   *  provider.\n   */\n  async _emit(provider, message) {\n    throw new Error(\"sub-classes must implemente this; _emit\");\n  }\n}\n/**\n *  A **SocketBlockSubscriber** listens for ``newHeads`` events and emits\n *  ``\"block\"`` events.\n */\nexport class SocketBlockSubscriber extends SocketSubscriber {\n  /**\n   *  @_ignore:\n   */\n  constructor(provider) {\n    super(provider, [\"newHeads\"]);\n  }\n  async _emit(provider, message) {\n    provider.emit(\"block\", parseInt(message.number));\n  }\n}\n/**\n *  A **SocketPendingSubscriber** listens for pending transacitons and emits\n *  ``\"pending\"`` events.\n */\nexport class SocketPendingSubscriber extends SocketSubscriber {\n  /**\n   *  @_ignore:\n   */\n  constructor(provider) {\n    super(provider, [\"newPendingTransactions\"]);\n  }\n  async _emit(provider, message) {\n    provider.emit(\"pending\", message);\n  }\n}\n/**\n *  A **SocketEventSubscriber** listens for event logs.\n */\nvar _logFilter = /*#__PURE__*/new WeakMap();\nexport class SocketEventSubscriber extends SocketSubscriber {\n  /**\n   *  The filter.\n   */\n  get logFilter() {\n    return JSON.parse(_classPrivateFieldGet(this, _logFilter));\n  }\n  /**\n   *  @_ignore:\n   */\n  constructor(provider, filter) {\n    super(provider, [\"logs\", filter]);\n    _classPrivateFieldInitSpec(this, _logFilter, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _logFilter, JSON.stringify(filter));\n  }\n  async _emit(provider, message) {\n    provider.emit(this.logFilter, provider._wrapLog(message, provider._network));\n  }\n}\n/**\n *  A **SocketProvider** is backed by a long-lived connection over a\n *  socket, which can subscribe and receive real-time messages over\n *  its communication channel.\n */\nvar _callbacks = /*#__PURE__*/new WeakMap();\nvar _subs = /*#__PURE__*/new WeakMap();\nvar _pending = /*#__PURE__*/new WeakMap();\nexport class SocketProvider extends JsonRpcApiProvider {\n  /**\n   *  Creates a new **SocketProvider** connected to %%network%%.\n   *\n   *  If unspecified, the network will be discovered.\n   */\n  constructor(network) {\n    super(network, {\n      batchMaxCount: 1\n    });\n    _classPrivateFieldInitSpec(this, _callbacks, {\n      writable: true,\n      value: void 0\n    });\n    // Maps each filterId to its subscriber\n    _classPrivateFieldInitSpec(this, _subs, {\n      writable: true,\n      value: void 0\n    });\n    // If any events come in before a subscriber has finished\n    // registering, queue them\n    _classPrivateFieldInitSpec(this, _pending, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _callbacks, new Map());\n    _classPrivateFieldSet(this, _subs, new Map());\n    _classPrivateFieldSet(this, _pending, new Map());\n  }\n  // This value is only valid after _start has been called\n  /*\n  get _network(): Network {\n      if (this.#network == null) {\n          throw new Error(\"this shouldn't happen\");\n      }\n      return this.#network.clone();\n  }\n  */\n  _getSubscriber(sub) {\n    switch (sub.type) {\n      case \"close\":\n        return new UnmanagedSubscriber(\"close\");\n      case \"block\":\n        return new SocketBlockSubscriber(this);\n      case \"pending\":\n        return new SocketPendingSubscriber(this);\n      case \"event\":\n        return new SocketEventSubscriber(this, sub.filter);\n      case \"orphan\":\n        // Handled auto-matically within AbstractProvider\n        // when the log.removed = true\n        if (sub.filter.orphan === \"drop-log\") {\n          return new UnmanagedSubscriber(\"drop-log\");\n        }\n    }\n    return super._getSubscriber(sub);\n  }\n  /**\n   *  Register a new subscriber. This is used internalled by Subscribers\n   *  and generally is unecessary unless extending capabilities.\n   */\n  _register(filterId, subscriber) {\n    _classPrivateFieldGet(this, _subs).set(filterId, subscriber);\n    const pending = _classPrivateFieldGet(this, _pending).get(filterId);\n    if (pending) {\n      for (const message of pending) {\n        subscriber._handleMessage(message);\n      }\n      _classPrivateFieldGet(this, _pending).delete(filterId);\n    }\n  }\n  async _send(payload) {\n    // WebSocket provider doesn't accept batches\n    assertArgument(!Array.isArray(payload), \"WebSocket does not support batch send\", \"payload\", payload);\n    // @TODO: stringify payloads here and store to prevent mutations\n    // Prepare a promise to respond to\n    const promise = new Promise((resolve, reject) => {\n      _classPrivateFieldGet(this, _callbacks).set(payload.id, {\n        payload,\n        resolve,\n        reject\n      });\n    });\n    // Wait until the socket is connected before writing to it\n    await this._waitUntilReady();\n    // Write the request to the socket\n    await this._write(JSON.stringify(payload));\n    return [await promise];\n  }\n  // Sub-classes must call this once they are connected\n  /*\n  async _start(): Promise<void> {\n      if (this.#ready) { return; }\n       for (const { payload } of this.#callbacks.values()) {\n          await this._write(JSON.stringify(payload));\n      }\n       this.#ready = (async function() {\n          await super._start();\n      })();\n  }\n  */\n  /**\n   *  Sub-classes **must** call this with messages received over their\n   *  transport to be processed and dispatched.\n   */\n  async _processMessage(message) {\n    const result = JSON.parse(message);\n    if (result && typeof result === \"object\" && \"id\" in result) {\n      const callback = _classPrivateFieldGet(this, _callbacks).get(result.id);\n      if (callback == null) {\n        this.emit(\"error\", makeError(\"received result for unknown id\", \"UNKNOWN_ERROR\", {\n          reasonCode: \"UNKNOWN_ID\",\n          result\n        }));\n        return;\n      }\n      _classPrivateFieldGet(this, _callbacks).delete(result.id);\n      callback.resolve(result);\n    } else if (result && result.method === \"eth_subscription\") {\n      const filterId = result.params.subscription;\n      const subscriber = _classPrivateFieldGet(this, _subs).get(filterId);\n      if (subscriber) {\n        subscriber._handleMessage(result.params.result);\n      } else {\n        let pending = _classPrivateFieldGet(this, _pending).get(filterId);\n        if (pending == null) {\n          pending = [];\n          _classPrivateFieldGet(this, _pending).set(filterId, pending);\n        }\n        pending.push(result.params.result);\n      }\n    } else {\n      this.emit(\"error\", makeError(\"received unexpected message\", \"UNKNOWN_ERROR\", {\n        reasonCode: \"UNEXPECTED_MESSAGE\",\n        result\n      }));\n      return;\n    }\n  }\n  /**\n   *  Sub-classes **must** override this to send %%message%% over their\n   *  transport.\n   */\n  async _write(message) {\n    throw new Error(\"sub-classes must override this\");\n  }\n}","map":{"version":3,"names":["UnmanagedSubscriber","assert","assertArgument","makeError","JsonRpcApiProvider","_provider","WeakMap","_filter","_filterId","_paused","_emitPromise","SocketSubscriber","filter","JSON","parse","_classPrivateFieldGet","constructor","provider","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","stringify","start","send","then","filterId","_register","stop","pause","dropWhilePaused","operation","resume","_handleMessage","message","emitPromise","_emit","Error","SocketBlockSubscriber","emit","parseInt","number","SocketPendingSubscriber","_logFilter","SocketEventSubscriber","logFilter","_wrapLog","_network","_callbacks","_subs","_pending","SocketProvider","network","batchMaxCount","Map","_getSubscriber","sub","type","orphan","subscriber","set","pending","get","delete","_send","payload","Array","isArray","promise","Promise","resolve","reject","id","_waitUntilReady","_write","_processMessage","result","callback","reasonCode","method","params","subscription","push"],"sources":["../../src.ts/providers/provider-socket.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}