{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport editor from \"vue2-medium-editor\";\nimport { submitToArseed } from \"@/utils/arseed\";\nimport { providers } from 'ethers';\nimport Everpay from 'everpay';\nimport { payOrder } from \"arseeding-js/cjs/payOrder\";\nimport { mapGetters, mapActions } from \"vuex\";\nimport { strToHexCharCode, strToUtf8Bytes } from \"@/utils/util\";\nconst buttonList = ['bold', 'italic', {\n  name: 'h1',\n  action: 'append-h2',\n  aria: 'header type 1',\n  tagNames: ['h2'],\n  contentDefault: '<b>H1</b>',\n  classList: ['custom-class-h1'],\n  attrs: {\n    'data-custom-attr': 'attr-value-h1'\n  }\n}, {\n  name: 'h2',\n  action: 'append-h3',\n  aria: 'header type 2',\n  tagNames: ['h3'],\n  contentDefault: '<b>H2</b>',\n  classList: ['custom-class-h2'],\n  attrs: {\n    'data-custom-attr': 'attr-value-h2'\n  }\n}, {\n  name: 'justifyCenter',\n  contentDefault: '<b>C</b>',\n  classList: ['custom-class-h2'],\n  style: {\n    prop: 'font-size',\n    value: '20px'\n  }\n},\n// 'justifyCenter',\n'quote', 'anchor'];\nexport default {\n  name: \"writeContent\",\n  components: {\n    editor\n  },\n  data() {\n    return {\n      title: \"\",\n      content: \"\",\n      isShowEditor: true,\n      options: {\n        delay: 0,\n        targetBlank: true,\n        toolbar: {\n          allowMultiParagraphSelection: true,\n          // buttons: ['bold', 'italic', 'underline', 'anchor', 'h2', 'h3', 'quote'],\n          buttons: buttonList,\n          diffLeft: 0,\n          diffTop: -10,\n          firstButtonClass: 'medium-editor-button-first',\n          lastButtonClass: 'medium-editor-button-last',\n          relativeContainer: null,\n          standardizeSelectionStart: true,\n          static: true,\n          /* options which only apply when static is true */\n          align: 'left',\n          sticky: true,\n          updateOnEmptySelection: false\n        },\n        anchor: {\n          placeholderText: 'Type a link',\n          customClassOption: 'btn',\n          customClassOptionText: 'Create Button'\n        },\n        paste: {\n          cleanPastedHTML: true,\n          cleanAttrs: ['style', 'dir'],\n          cleanTags: ['label', 'meta'],\n          unwrapTags: ['sub', 'sup']\n        },\n        anchorPreview: {\n          hideDelay: 300\n        },\n        placeholder: {\n          text: 'please enter you Title'\n        }\n      },\n      applyTextEdit: undefined,\n      orderInfo: {\n        createdAt: \"\",\n        itemId: \"\",\n        // 唯一id,string\n        size: 0,\n        // 大小\n        currency: \"\",\n        // 代币币种\n        decimals: 18,\n        // 币种的小数位\n        fee: \"\",\n        // 金额，费用\n        paymentStatus: \"\",\n        // 订单支付状态（unpaid---waiting, paid---pending,success, expired---failed）\n        paymentId: \"\",\n        // string，订单id\n        onChainStatus: \"\" // 是否上链（waiting，pending, success, failed）\n      },\n\n      // signer: Signer,\n      pay: Everpay\n    };\n  },\n  computed: {\n    ...mapGetters({\n      signer: 'account/signerInfo',\n      account: 'account/account'\n    }),\n    accountColor() {\n      if (!this.account) return '#ffffff';\n      const str = strToHexCharCode(strToUtf8Bytes(this.account));\n      return {\n        top: `#${str.slice(0, 6)}`,\n        bottom: `#${str.substring(str.length - 6)}`\n      };\n    },\n    accountString() {\n      return `${this.account.slice(0, 4)}......${this.account.substring(this.account.length - 4)}`;\n    }\n  },\n  async mounted() {\n    if (this.$route.query.id) {\n      const itemId = this.$route.query.id;\n      const data = await this.getMeta(itemId);\n      this.title = data.content.title;\n      this.content = data.content.body;\n    }\n  },\n  methods: {\n    ...mapActions({\n      getMeta: 'order/getItemMetaInfo'\n    }),\n    async save() {\n      const tokenSymbol = \"AR\";\n      const originalContentDigest = \"\";\n      const ord = await submitToArseed(tokenSymbol, this.signer, this.title, this.content, originalContentDigest);\n      this.orderInfo = {\n        itemId: ord.itemId,\n        bundler: ord.bundler,\n        size: ord.size,\n        currency: ord.currency,\n        decimals: ord.decimals,\n        fee: ord.fee,\n        paymentStatus: \"unpaid\"\n      };\n    },\n    async payBill() {\n      // 点击 submit 调用这个方法\n      await this.testPay();\n      payOrder(this.pay, this.orderInfo).then(tx => {\n        if (tx) {\n          this.$router.push({\n            name: 'List'\n          });\n        }\n      }).catch(() => {\n        this.$message.error('submit failed');\n      });\n    },\n    handleChangeTitle(e) {\n      this.title = e.target.innerHTML;\n    },\n    handleChangeContent(e) {\n      this.content = e.target.innerHTML;\n    },\n    async submit() {\n      await this.save();\n      await this.payBill();\n    },\n    async BackTo() {\n      this.$router.push({\n        name: \"Main\"\n      });\n    },\n    async testSigner() {\n      // await window.ethereum.enable()\n      // const provider = new providers.Web3Provider(window.ethereum)\n      // await provider._ready()\n      // console.log('provider', provider)\n      // const currencyConfig = getCurrency('ethereum', provider)\n      // await currencyConfig.ready()\n      // const signer = await currencyConfig.getSigner()\n      // console.log(222222222, signer)\n      // return signer\n    },\n    async testPay() {\n      await window.ethereum.enable();\n      const provider = new providers.Web3Provider(window.ethereum);\n      await provider._ready();\n      this.pay = new Everpay({\n        account: this.account,\n        chainType: 'ethereum',\n        ethConnectedSigner: provider.getSigner()\n      });\n    }\n  }\n};","map":{"version":3,"names":["editor","submitToArseed","providers","Everpay","payOrder","mapGetters","mapActions","strToHexCharCode","strToUtf8Bytes","buttonList","name","action","aria","tagNames","contentDefault","classList","attrs","style","prop","value","components","data","title","content","isShowEditor","options","delay","targetBlank","toolbar","allowMultiParagraphSelection","buttons","diffLeft","diffTop","firstButtonClass","lastButtonClass","relativeContainer","standardizeSelectionStart","static","align","sticky","updateOnEmptySelection","anchor","placeholderText","customClassOption","customClassOptionText","paste","cleanPastedHTML","cleanAttrs","cleanTags","unwrapTags","anchorPreview","hideDelay","placeholder","text","applyTextEdit","undefined","orderInfo","createdAt","itemId","size","currency","decimals","fee","paymentStatus","paymentId","onChainStatus","pay","computed","signer","account","accountColor","str","top","slice","bottom","substring","length","accountString","mounted","$route","query","id","getMeta","body","methods","save","tokenSymbol","originalContentDigest","ord","bundler","payBill","testPay","then","tx","$router","push","catch","$message","error","handleChangeTitle","e","target","innerHTML","handleChangeContent","submit","BackTo","testSigner","window","ethereum","enable","provider","Web3Provider","_ready","chainType","ethConnectedSigner","getSigner"],"sources":["src/pages/writeContentPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"write-content__main\">\r\n    <el-row :gutter=\"20\" style=\"margin: 0\">\r\n      <el-col :span=\"4\">\r\n        <div class=\"grid-content bg-purple\"></div>\r\n      </el-col>\r\n      <el-col :span=\"16\">\r\n        <div style=\"text-align: right\">\r\n          <span id=\"submit\" class=\"submit-draft-button\" @click=\"submit\">Submit</span>\r\n          <span class=\"submit-draft-button\" @click=\"BackTo\">Back</span>\r\n        </div>\r\n        <div @input=\"handleChangeTitle\">\r\n          <editor :text='title' :options='options' custom-tag='h1' :edit='applyTextEdit'></editor>\r\n        </div>\r\n        <div class=\"content-info\">\r\n          <el-avatar\r\n            slot=\"reference\"\r\n            size=\"medium\"\r\n            style=\"margin: 0 20px 0 0\"\r\n            :style=\"`background-image: linear-gradient(${accountColor.top}, #fff, ${accountColor.bottom})`\">\r\n          </el-avatar>\r\n          {{ accountString }}\r\n        </div>\r\n        <div @input=\"handleChangeContent\">\r\n          <editor :text='content' :options='options' custom-tag='div' :edit='applyTextEdit'></editor>\r\n        </div>\r\n      </el-col>\r\n      <el-col :span=\"4\">\r\n        <div class=\"grid-content bg-purple\"></div>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport editor from \"vue2-medium-editor\"\r\nimport {submitToArseed} from \"@/utils/arseed\"\r\nimport {providers} from 'ethers'\r\nimport Everpay from 'everpay'\r\nimport {payOrder} from \"arseeding-js/cjs/payOrder\"\r\nimport {mapGetters, mapActions} from \"vuex\"\r\nimport {strToHexCharCode, strToUtf8Bytes} from \"@/utils/util\"\r\n\r\nconst buttonList = ['bold',\r\n      'italic',\r\n      {\r\n        name: 'h1',\r\n        action: 'append-h2',\r\n        aria: 'header type 1',\r\n        tagNames: ['h2'],\r\n        contentDefault: '<b>H1</b>',\r\n        classList: ['custom-class-h1'],\r\n        attrs: {\r\n          'data-custom-attr': 'attr-value-h1'\r\n        }\r\n      },\r\n      {\r\n        name: 'h2',\r\n        action: 'append-h3',\r\n        aria: 'header type 2',\r\n        tagNames: ['h3'],\r\n        contentDefault: '<b>H2</b>',\r\n        classList: ['custom-class-h2'],\r\n        attrs: {\r\n          'data-custom-attr': 'attr-value-h2'\r\n        }\r\n      },\r\n      {\r\n        name: 'justifyCenter',\r\n        contentDefault: '<b>C</b>',\r\n        classList: ['custom-class-h2'],\r\n        style: {\r\n          prop: 'font-size',\r\n          value: '20px'\r\n        }\r\n      },\r\n      // 'justifyCenter',\r\n      'quote',\r\n      'anchor'\r\n    ]\r\n\r\nexport default {\r\n  name: \"writeContent\",\r\n  components: {\r\n    editor\r\n  },\r\n  data() {\r\n    return {\r\n      title: \"\",\r\n      content: \"\",\r\n      isShowEditor: true,\r\n      options: {\r\n        delay: 0,\r\n        targetBlank: true,\r\n        toolbar: {\r\n          allowMultiParagraphSelection: true,\r\n          // buttons: ['bold', 'italic', 'underline', 'anchor', 'h2', 'h3', 'quote'],\r\n          buttons: buttonList,\r\n          diffLeft: 0,\r\n          diffTop: -10,\r\n          firstButtonClass: 'medium-editor-button-first',\r\n          lastButtonClass: 'medium-editor-button-last',\r\n          relativeContainer: null,\r\n          standardizeSelectionStart: true,\r\n          static: true,\r\n          /* options which only apply when static is true */\r\n          align: 'left',\r\n          sticky: true,\r\n          updateOnEmptySelection: false\r\n        },\r\n        anchor: {\r\n          placeholderText: 'Type a link',\r\n          customClassOption: 'btn',\r\n          customClassOptionText: 'Create Button'\r\n        },\r\n        paste: {\r\n          cleanPastedHTML: true,\r\n          cleanAttrs: ['style', 'dir'],\r\n          cleanTags: ['label', 'meta'],\r\n          unwrapTags: ['sub', 'sup']\r\n        },\r\n        anchorPreview: {\r\n          hideDelay: 300\r\n        },\r\n        placeholder: {\r\n          text: 'please enter you Title'\r\n        }\r\n      },\r\n      applyTextEdit: undefined,\r\n      orderInfo: {\r\n        createdAt: \"\",\r\n        itemId: \"\", // 唯一id,string\r\n        size: 0, // 大小\r\n        currency: \"\", // 代币币种\r\n        decimals: 18, // 币种的小数位\r\n        fee: \"\", // 金额，费用\r\n        paymentStatus: \"\", // 订单支付状态（unpaid---waiting, paid---pending,success, expired---failed）\r\n        paymentId: \"\", // string，订单id\r\n        onChainStatus: \"\" // 是否上链（waiting，pending, success, failed）\r\n      },\r\n      // signer: Signer,\r\n      pay: Everpay,\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      signer: 'account/signerInfo',\r\n      account: 'account/account'\r\n    }),\r\n    accountColor() {\r\n      if (!this.account) return '#ffffff'\r\n      const str = strToHexCharCode(strToUtf8Bytes(this.account))\r\n      return {\r\n        top: `#${str.slice(0, 6)}`,\r\n        bottom: `#${str.substring(str.length - 6)}`\r\n      }\r\n    },\r\n    accountString() {\r\n      return `${this.account.slice(0, 4)}......${this.account.substring(this.account.length-4)}`\r\n    }\r\n  },\r\n  async mounted() {\r\n    if (this.$route.query.id) {\r\n      const itemId = this.$route.query.id\r\n      const data = await this.getMeta(itemId)\r\n      this.title = data.content.title\r\n      this.content = data.content.body\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      getMeta: 'order/getItemMetaInfo'\r\n    }),\r\n    async save() {\r\n      const tokenSymbol = \"AR\"\r\n      const originalContentDigest = \"\"\r\n      const ord = await submitToArseed(tokenSymbol, this.signer, this.title, this.content, originalContentDigest)\r\n      this.orderInfo = {\r\n        itemId: ord.itemId,\r\n        bundler: ord.bundler,\r\n        size: ord.size,\r\n        currency: ord.currency,\r\n        decimals: ord.decimals,\r\n        fee: ord.fee,\r\n        paymentStatus: \"unpaid\"\r\n      }\r\n    },\r\n\r\n    async payBill() { // 点击 submit 调用这个方法\r\n      await this.testPay()\r\n      payOrder(this.pay, this.orderInfo).then(tx => {\r\n        if (tx) {\r\n          this.$router.push({\r\n            name: 'List'\r\n          })\r\n        }\r\n      }).catch(() => {\r\n        this.$message.error('submit failed')\r\n      })\r\n    },\r\n    handleChangeTitle(e) {\r\n      this.title = e.target.innerHTML\r\n    },\r\n    handleChangeContent(e) {\r\n      this.content = e.target.innerHTML\r\n    },\r\n    async submit() {\r\n      await this.save()\r\n      await this.payBill()\r\n    },\r\n    async BackTo() {\r\n      this.$router.push({\r\n        name: \"Main\"\r\n      })\r\n    },\r\n    async testSigner() {\r\n      // await window.ethereum.enable()\r\n      // const provider = new providers.Web3Provider(window.ethereum)\r\n      // await provider._ready()\r\n      // console.log('provider', provider)\r\n      // const currencyConfig = getCurrency('ethereum', provider)\r\n      // await currencyConfig.ready()\r\n      // const signer = await currencyConfig.getSigner()\r\n      // console.log(222222222, signer)\r\n      // return signer\r\n    },\r\n    async testPay() {\r\n      await window.ethereum.enable()\r\n      const provider = new providers.Web3Provider(window.ethereum)\r\n      await provider._ready()\r\n      this.pay = new Everpay({\r\n        account: this.account,\r\n        chainType: 'ethereum',\r\n        ethConnectedSigner: provider.getSigner()\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.write-content__main {\r\n  /*min-height: 90vh;*/\r\n  margin-top: 30px;\r\n  position: relative;\r\n}\r\n.grid-content {\r\n  border-radius: 4px;\r\n  min-height: 36px;\r\n}\r\n.submit-draft-button {\r\n  display: inline-block;\r\n  margin-right: 25px;\r\n  width: 200px;\r\n  height: 40px;\r\n  line-height: 40px;\r\n  border-radius: 5px;\r\n  color: #222326;\r\n  border: 1px solid #222326;\r\n  box-shadow: 5px 5px 0 0 rgba(34, 35, 38, .5);\r\n  text-align: center;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n}\r\n.submit-draft-button:hover {\r\n  box-shadow: 5px 5px 0 0 rgba(34, 35, 38, 1);\r\n}\r\n.content-info {\r\n  padding: 20px 0;\r\n  display: flex;\r\n  justify-content: start;\r\n  align-items: center;\r\n}\r\n</style>\r\n"],"mappings":";AAmCA,OAAAA,MAAA;AACA,SAAAC,cAAA;AACA,SAAAC,SAAA;AACA,OAAAC,OAAA;AACA,SAAAC,QAAA;AACA,SAAAC,UAAA,EAAAC,UAAA;AACA,SAAAC,gBAAA,EAAAC,cAAA;AAEA,MAAAC,UAAA,YACA,UACA;EACAC,IAAA;EACAC,MAAA;EACAC,IAAA;EACAC,QAAA;EACAC,cAAA;EACAC,SAAA;EACAC,KAAA;IACA;EACA;AACA,GACA;EACAN,IAAA;EACAC,MAAA;EACAC,IAAA;EACAC,QAAA;EACAC,cAAA;EACAC,SAAA;EACAC,KAAA;IACA;EACA;AACA,GACA;EACAN,IAAA;EACAI,cAAA;EACAC,SAAA;EACAE,KAAA;IACAC,IAAA;IACAC,KAAA;EACA;AACA;AACA;AACA,SACA,SACA;AAEA;EACAT,IAAA;EACAU,UAAA;IACApB;EACA;EACAqB,KAAA;IACA;MACAC,KAAA;MACAC,OAAA;MACAC,YAAA;MACAC,OAAA;QACAC,KAAA;QACAC,WAAA;QACAC,OAAA;UACAC,4BAAA;UACA;UACAC,OAAA,EAAArB,UAAA;UACAsB,QAAA;UACAC,OAAA;UACAC,gBAAA;UACAC,eAAA;UACAC,iBAAA;UACAC,yBAAA;UACAC,MAAA;UACA;UACAC,KAAA;UACAC,MAAA;UACAC,sBAAA;QACA;QACAC,MAAA;UACAC,eAAA;UACAC,iBAAA;UACAC,qBAAA;QACA;QACAC,KAAA;UACAC,eAAA;UACAC,UAAA;UACAC,SAAA;UACAC,UAAA;QACA;QACAC,aAAA;UACAC,SAAA;QACA;QACAC,WAAA;UACAC,IAAA;QACA;MACA;MACAC,aAAA,EAAAC,SAAA;MACAC,SAAA;QACAC,SAAA;QACAC,MAAA;QAAA;QACAC,IAAA;QAAA;QACAC,QAAA;QAAA;QACAC,QAAA;QAAA;QACAC,GAAA;QAAA;QACAC,aAAA;QAAA;QACAC,SAAA;QAAA;QACAC,aAAA;MACA;;MACA;MACAC,GAAA,EAAA/D;IACA;EACA;EACAgE,QAAA;IACA,GAAA9D,UAAA;MACA+D,MAAA;MACAC,OAAA;IACA;IACAC,aAAA;MACA,UAAAD,OAAA;MACA,MAAAE,GAAA,GAAAhE,gBAAA,CAAAC,cAAA,MAAA6D,OAAA;MACA;QACAG,GAAA,MAAAD,GAAA,CAAAE,KAAA;QACAC,MAAA,MAAAH,GAAA,CAAAI,SAAA,CAAAJ,GAAA,CAAAK,MAAA;MACA;IACA;IACAC,cAAA;MACA,eAAAR,OAAA,CAAAI,KAAA,oBAAAJ,OAAA,CAAAM,SAAA,MAAAN,OAAA,CAAAO,MAAA;IACA;EACA;EACA,MAAAE,QAAA;IACA,SAAAC,MAAA,CAAAC,KAAA,CAAAC,EAAA;MACA,MAAAvB,MAAA,QAAAqB,MAAA,CAAAC,KAAA,CAAAC,EAAA;MACA,MAAA5D,IAAA,cAAA6D,OAAA,CAAAxB,MAAA;MACA,KAAApC,KAAA,GAAAD,IAAA,CAAAE,OAAA,CAAAD,KAAA;MACA,KAAAC,OAAA,GAAAF,IAAA,CAAAE,OAAA,CAAA4D,IAAA;IACA;EACA;EACAC,OAAA;IACA,GAAA9E,UAAA;MACA4E,OAAA;IACA;IACA,MAAAG,KAAA;MACA,MAAAC,WAAA;MACA,MAAAC,qBAAA;MACA,MAAAC,GAAA,SAAAvF,cAAA,CAAAqF,WAAA,OAAAlB,MAAA,OAAA9C,KAAA,OAAAC,OAAA,EAAAgE,qBAAA;MACA,KAAA/B,SAAA;QACAE,MAAA,EAAA8B,GAAA,CAAA9B,MAAA;QACA+B,OAAA,EAAAD,GAAA,CAAAC,OAAA;QACA9B,IAAA,EAAA6B,GAAA,CAAA7B,IAAA;QACAC,QAAA,EAAA4B,GAAA,CAAA5B,QAAA;QACAC,QAAA,EAAA2B,GAAA,CAAA3B,QAAA;QACAC,GAAA,EAAA0B,GAAA,CAAA1B,GAAA;QACAC,aAAA;MACA;IACA;IAEA,MAAA2B,QAAA;MAAA;MACA,WAAAC,OAAA;MACAvF,QAAA,MAAA8D,GAAA,OAAAV,SAAA,EAAAoC,IAAA,CAAAC,EAAA;QACA,IAAAA,EAAA;UACA,KAAAC,OAAA,CAAAC,IAAA;YACArF,IAAA;UACA;QACA;MACA,GAAAsF,KAAA;QACA,KAAAC,QAAA,CAAAC,KAAA;MACA;IACA;IACAC,kBAAAC,CAAA;MACA,KAAA9E,KAAA,GAAA8E,CAAA,CAAAC,MAAA,CAAAC,SAAA;IACA;IACAC,oBAAAH,CAAA;MACA,KAAA7E,OAAA,GAAA6E,CAAA,CAAAC,MAAA,CAAAC,SAAA;IACA;IACA,MAAAE,OAAA;MACA,WAAAnB,IAAA;MACA,WAAAK,OAAA;IACA;IACA,MAAAe,OAAA;MACA,KAAAX,OAAA,CAAAC,IAAA;QACArF,IAAA;MACA;IACA;IACA,MAAAgG,WAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA,CACA;IACA,MAAAf,QAAA;MACA,MAAAgB,MAAA,CAAAC,QAAA,CAAAC,MAAA;MACA,MAAAC,QAAA,OAAA5G,SAAA,CAAA6G,YAAA,CAAAJ,MAAA,CAAAC,QAAA;MACA,MAAAE,QAAA,CAAAE,MAAA;MACA,KAAA9C,GAAA,OAAA/D,OAAA;QACAkE,OAAA,OAAAA,OAAA;QACA4C,SAAA;QACAC,kBAAA,EAAAJ,QAAA,CAAAK,SAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}