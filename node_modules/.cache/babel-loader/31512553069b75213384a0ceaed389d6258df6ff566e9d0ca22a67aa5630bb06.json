{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.newEverpayByRSA = exports.newEverpayByEcc = exports.payOrders = exports.payOrder = void 0;\nconst everpay_1 = __importDefault(require(\"everpay\"));\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst ethers_1 = require(\"ethers\");\nconst payOrder = async (everpay, order) => {\n  const ords = [];\n  ords.push(order);\n  return await payOrders(everpay, ords);\n};\nexports.payOrder = payOrder;\nconst payOrders = async (everpay, orders) => {\n  if (orders.length === 0) {\n    return 'No Order Need to Pay';\n  }\n  const order = orders[0];\n  const {\n    paymentStatus = '',\n    paymentId = '',\n    onChainStatus = ''\n  } = order;\n  if (paymentStatus === 'paid' && paymentId.length > 0) {\n    if (onChainStatus !== 'success') {\n      return 'The order has been paid for and is waiting to be uploaded';\n    }\n    return 'The order has been paid for and the upload was successful';\n  }\n  const to = order.bundler;\n  const tag = order.tag;\n  const decimals = order.decimals;\n  const ids = [];\n  let fee = new bignumber_js_1.default(0);\n  for (const ord of orders) {\n    ids.push(ord.itemId);\n    fee = fee.plus(ord.fee);\n  }\n  const result = await everpay.transfer({\n    amount: fee.dividedBy(new bignumber_js_1.default(10).pow(decimals.toString())).toString(),\n    tag: tag,\n    to: to,\n    data: {\n      appName: 'arseeding',\n      action: 'payment',\n      itemIds: ids\n    }\n  });\n  return result.everHash;\n};\nexports.payOrders = payOrders;\nconst newEverpayByEcc = eccPrivateKey => {\n  const provider = new ethers_1.ethers.providers.InfuraProvider('mainnet');\n  const signer = new ethers_1.ethers.Wallet(eccPrivateKey, provider);\n  const pay = new everpay_1.default({\n    account: signer.address,\n    chainType: 'ethereum',\n    ethConnectedSigner: signer\n  });\n  return pay;\n};\nexports.newEverpayByEcc = newEverpayByEcc;\nconst newEverpayByRSA = (arJWK, arAddress) => {\n  const everpay = new everpay_1.default({\n    account: arAddress,\n    chainType: 'arweave',\n    arJWK: arJWK\n  });\n  return everpay;\n};\nexports.newEverpayByRSA = newEverpayByRSA;","map":{"version":3,"names":["require","__importDefault","mod","__esModule","Object","defineProperty","exports","value","newEverpayByRSA","newEverpayByEcc","payOrders","payOrder","everpay_1","bignumber_js_1","ethers_1","everpay","order","ords","push","orders","length","paymentStatus","paymentId","onChainStatus","to","bundler","tag","decimals","ids","fee","default","ord","itemId","plus","result","transfer","amount","dividedBy","pow","toString","data","appName","action","itemIds","everHash","eccPrivateKey","provider","ethers","providers","InfuraProvider","signer","Wallet","pay","account","address","chainType","ethConnectedSigner","arJWK","arAddress"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/arseeding-js/esm/payOrder.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.newEverpayByRSA = exports.newEverpayByEcc = exports.payOrders = exports.payOrder = void 0;\nconst everpay_1 = __importDefault(require(\"everpay\"));\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst ethers_1 = require(\"ethers\");\nconst payOrder = async (everpay, order) => {\n    const ords = [];\n    ords.push(order);\n    return await payOrders(everpay, ords);\n};\nexports.payOrder = payOrder;\nconst payOrders = async (everpay, orders) => {\n    if (orders.length === 0) {\n        return 'No Order Need to Pay';\n    }\n    const order = orders[0];\n    const { paymentStatus = '', paymentId = '', onChainStatus = '' } = order;\n    if (paymentStatus === 'paid' && paymentId.length > 0) {\n        if (onChainStatus !== 'success') {\n            return 'The order has been paid for and is waiting to be uploaded';\n        }\n        return 'The order has been paid for and the upload was successful';\n    }\n    const to = order.bundler;\n    const tag = order.tag;\n    const decimals = order.decimals;\n    const ids = [];\n    let fee = new bignumber_js_1.default(0);\n    for (const ord of orders) {\n        ids.push(ord.itemId);\n        fee = fee.plus(ord.fee);\n    }\n    const result = await everpay.transfer({\n        amount: fee.dividedBy(new bignumber_js_1.default(10).pow(decimals.toString())).toString(),\n        tag: tag,\n        to: to,\n        data: {\n            appName: 'arseeding',\n            action: 'payment',\n            itemIds: ids\n        }\n    });\n    return result.everHash;\n};\nexports.payOrders = payOrders;\nconst newEverpayByEcc = (eccPrivateKey) => {\n    const provider = new ethers_1.ethers.providers.InfuraProvider('mainnet');\n    const signer = new ethers_1.ethers.Wallet(eccPrivateKey, provider);\n    const pay = new everpay_1.default({\n        account: signer.address,\n        chainType: 'ethereum',\n        ethConnectedSigner: signer\n    });\n    return pay;\n};\nexports.newEverpayByEcc = newEverpayByEcc;\nconst newEverpayByRSA = (arJWK, arAddress) => {\n    const everpay = new everpay_1.default({\n        account: arAddress,\n        chainType: 'arweave',\n        arJWK: arJWK\n    });\n    return everpay;\n};\nexports.newEverpayByRSA = newEverpayByRSA;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}