{"ast":null,"code":"import Everpay from 'everpay';\nconst everpay = new Everpay();\nexport default {\n  namespaced: true,\n  state: {\n    accountInfo: null\n  },\n  getters: {\n    account(state) {\n      if (!state.accountInfo) {\n        return sessionStorage.getItem('ACCOUNT_STRING') || '';\n      }\n      if (state.accountInfo && state.accountInfo.length !== 0) {\n        sessionStorage.setItem('ACCOUNT_STRING', state.accountInfo);\n        return state.accountInfo;\n      }\n      return '';\n    }\n  },\n  mutations: {\n    METE_MASK_ACCOUNT(state, account) {\n      state.accountInfo = account;\n    }\n  },\n  actions: {\n    async getNewMetaMaskAccount({\n      commit\n    }) {\n      const account = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      commit('METE_MASK_ACCOUNT', account[0]);\n      return account[0];\n    },\n    async getAccountBalances({\n      commit\n    }, accountId) {\n      const result = await everpay.balances({\n        account: accountId\n      });\n      commit('TOKEN_BALANCE', result);\n      return result;\n    }\n  }\n};","map":{"version":3,"names":["Everpay","everpay","namespaced","state","accountInfo","getters","account","sessionStorage","getItem","length","setItem","mutations","METE_MASK_ACCOUNT","actions","getNewMetaMaskAccount","commit","window","ethereum","request","method","getAccountBalances","accountId","result","balances"],"sources":["E:/Amanda-project/vue2-project/project-vue2/src/store/account.js"],"sourcesContent":["import Everpay from 'everpay'\r\n\r\nconst everpay = new Everpay()\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state: {\r\n        accountInfo: null,\r\n    },\r\n    getters: {\r\n        account(state) {\r\n            if (!state.accountInfo) {\r\n                return sessionStorage.getItem('ACCOUNT_STRING') || ''\r\n            }\r\n            if(state.accountInfo && state.accountInfo.length !== 0) {\r\n                sessionStorage.setItem('ACCOUNT_STRING', state.accountInfo)\r\n                return state.accountInfo\r\n            }\r\n            return ''\r\n        },\r\n    },\r\n    mutations: {\r\n        METE_MASK_ACCOUNT(state, account) {\r\n            state.accountInfo = account\r\n        },\r\n    },\r\n    actions: {\r\n        async getNewMetaMaskAccount({commit}) {\r\n            const account = await window.ethereum.request({method: 'eth_requestAccounts'})\r\n            commit('METE_MASK_ACCOUNT', account[0])\r\n            return account[0]\r\n        },\r\n        async getAccountBalances({commit}, accountId) {\r\n            const result = await everpay.balances({account: accountId})\r\n            commit('TOKEN_BALANCE', result)\r\n            return result\r\n        },\r\n    }\r\n}"],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS;AAE7B,MAAMC,OAAO,GAAG,IAAID,OAAO,CAAC,CAAC;AAE7B,eAAe;EACXE,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE;IACHC,WAAW,EAAE;EACjB,CAAC;EACDC,OAAO,EAAE;IACLC,OAAOA,CAACH,KAAK,EAAE;MACX,IAAI,CAACA,KAAK,CAACC,WAAW,EAAE;QACpB,OAAOG,cAAc,CAACC,OAAO,CAAC,gBAAgB,CAAC,IAAI,EAAE;MACzD;MACA,IAAGL,KAAK,CAACC,WAAW,IAAID,KAAK,CAACC,WAAW,CAACK,MAAM,KAAK,CAAC,EAAE;QACpDF,cAAc,CAACG,OAAO,CAAC,gBAAgB,EAAEP,KAAK,CAACC,WAAW,CAAC;QAC3D,OAAOD,KAAK,CAACC,WAAW;MAC5B;MACA,OAAO,EAAE;IACb;EACJ,CAAC;EACDO,SAAS,EAAE;IACPC,iBAAiBA,CAACT,KAAK,EAAEG,OAAO,EAAE;MAC9BH,KAAK,CAACC,WAAW,GAAGE,OAAO;IAC/B;EACJ,CAAC;EACDO,OAAO,EAAE;IACL,MAAMC,qBAAqBA,CAAC;MAACC;IAAM,CAAC,EAAE;MAClC,MAAMT,OAAO,GAAG,MAAMU,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;QAACC,MAAM,EAAE;MAAqB,CAAC,CAAC;MAC9EJ,MAAM,CAAC,mBAAmB,EAAET,OAAO,CAAC,CAAC,CAAC,CAAC;MACvC,OAAOA,OAAO,CAAC,CAAC,CAAC;IACrB,CAAC;IACD,MAAMc,kBAAkBA,CAAC;MAACL;IAAM,CAAC,EAAEM,SAAS,EAAE;MAC1C,MAAMC,MAAM,GAAG,MAAMrB,OAAO,CAACsB,QAAQ,CAAC;QAACjB,OAAO,EAAEe;MAAS,CAAC,CAAC;MAC3DN,MAAM,CAAC,eAAe,EAAEO,MAAM,CAAC;MAC/B,OAAOA,MAAM;IACjB;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}