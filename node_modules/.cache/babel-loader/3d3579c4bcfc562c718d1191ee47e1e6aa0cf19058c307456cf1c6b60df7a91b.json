{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashStream = exports.deepHashChunks = exports.deepHash = void 0;\n// In TypeScript 3.7, could be written as a single type:\n// `type DeepHashChunk = Uint8Array | DeepHashChunk[];`\nconst arweave_1 = __importDefault(require(\"arweave\"));\nconst crypto_browserify_1 = require(\"crypto-browserify\");\nasync function deepHash(data) {\n  if (typeof data[Symbol.asyncIterator] === \"function\") {\n    const _data = data;\n    const context = crypto_browserify_1.createHash(\"sha384\");\n    let length = 0;\n    for await (const chunk of _data) {\n      length += chunk.byteLength;\n      context.update(chunk);\n    }\n    const tag = arweave_1.default.utils.concatBuffers([arweave_1.default.utils.stringToBuffer(\"blob\"), arweave_1.default.utils.stringToBuffer(length.toString())]);\n    const taggedHash = arweave_1.default.utils.concatBuffers([await arweave_1.default.crypto.hash(tag, \"SHA-384\"), context.digest()]);\n    return await arweave_1.default.crypto.hash(taggedHash, \"SHA-384\");\n  } else if (Array.isArray(data)) {\n    const tag = arweave_1.default.utils.concatBuffers([arweave_1.default.utils.stringToBuffer(\"list\"), arweave_1.default.utils.stringToBuffer(data.length.toString())]);\n    return await deepHashChunks(data, await arweave_1.default.crypto.hash(tag, \"SHA-384\"));\n  }\n  const _data = data;\n  const tag = arweave_1.default.utils.concatBuffers([arweave_1.default.utils.stringToBuffer(\"blob\"), arweave_1.default.utils.stringToBuffer(_data.byteLength.toString())]);\n  const taggedHash = arweave_1.default.utils.concatBuffers([await arweave_1.default.crypto.hash(tag, \"SHA-384\"), await arweave_1.default.crypto.hash(_data, \"SHA-384\")]);\n  return await arweave_1.default.crypto.hash(taggedHash, \"SHA-384\");\n}\nexports.deepHash = deepHash;\nasync function deepHashChunks(chunks, acc) {\n  if (chunks.length < 1) {\n    return acc;\n  }\n  const hashPair = arweave_1.default.utils.concatBuffers([acc, await deepHash(chunks[0])]);\n  const newAcc = await arweave_1.default.crypto.hash(hashPair, \"SHA-384\");\n  return await deepHashChunks(chunks.slice(1), newAcc);\n}\nexports.deepHashChunks = deepHashChunks;\nasync function hashStream(stream) {\n  const context = crypto_browserify_1.createHash(\"sha384\");\n  for await (const chunk of stream) {\n    context.update(chunk);\n  }\n  return context.digest();\n}\nexports.hashStream = hashStream;","map":{"version":3,"names":["arweave_1","__importDefault","require","crypto_browserify_1","deepHash","data","Symbol","asyncIterator","_data","context","createHash","length","chunk","byteLength","update","tag","default","utils","concatBuffers","stringToBuffer","toString","taggedHash","crypto","hash","digest","Array","isArray","deepHashChunks","exports","chunks","acc","hashPair","newAcc","slice","hashStream","stream"],"sources":["deepHash.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}