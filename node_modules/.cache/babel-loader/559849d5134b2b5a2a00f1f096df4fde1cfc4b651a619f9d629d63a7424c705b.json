{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nconst arweave_1 = __importDefault(require(\"arweave\"));\n;\n;\nconst DEFAULT_HOSTS = [{\n  host: \"arweave.net\",\n  protocol: \"https\",\n  port: 443\n}, {\n  host: \"gateway.amplify.host\",\n  protocol: \"https\",\n  port: 443\n}, {\n  host: \"arweave.dev\",\n  protocol: \"https\",\n  port: 443\n}];\nconst defaultArweaveConfig = {\n  timeout: 10000,\n  logging: false,\n  onError: console.error\n};\n/**\n   * Returns overrriden arweave instance\n   * @param hosts - Array of hosts\n   * @param config - Other configuration options\n   * (timeout, logging, logger, onError callback)\n   * @returns arweave instance\n   */\nfunction init(hosts, config = defaultArweaveConfig) {\n  if (hosts.length === 0) {\n    throw new Error(\"Multihost config should have at least one host\");\n  }\n  const arweave = arweave_1.default.init(Object.assign(Object.assign({}, hosts[0]), config));\n  let currentHostIndex = 0,\n    lastFailedHost = 0;\n  function updateHostParams(hostConfig) {\n    arweave.api.config.host = hostConfig.host;\n    arweave.api.config.port = hostConfig.port;\n    arweave.api.config.protocol = hostConfig.protocol;\n  }\n  const originalApiRequestMethods = {\n    get: arweave.api.get.bind(arweave.api),\n    post: arweave.api.post.bind(arweave.api)\n  };\n  function switchHost() {\n    const oldHost = getCurrentHost();\n    currentHostIndex = (currentHostIndex + 1) % hosts.length;\n    const newHost = hosts[currentHostIndex];\n    if (config.logging && config.logger !== undefined) {\n      config.logger(\"Request failed. Switching host and retrying. \" + `Old host: ${JSON.stringify(oldHost)}. ` + `New host: ${JSON.stringify(newHost)}.`);\n    }\n    updateHostParams(newHost);\n  }\n  function getCurrentHost() {\n    return hosts[currentHostIndex];\n  }\n  function isHostActive(host) {\n    const currentHost = getCurrentHost();\n    return JSON.stringify(host) === JSON.stringify(currentHost);\n  }\n  async function overridenRequestMethod(sendOriginalRequest) {\n    for (let i = 0; i < hosts.length; i++) {\n      const hostUsedForRequest = getCurrentHost();\n      try {\n        const response = await sendOriginalRequest();\n        if (response.status >= 500 && response.status < 600) {\n          throw new Error(\"Error while sending http request: \" + `Status: ${response.status}. ` + `Data: ${JSON.stringify(response.data)}`);\n        }\n        return response;\n      } catch (err) {\n        // config.onError callback may be used for error logging\n        if (config.onError) {\n          config.onError(err);\n        }\n        if (i === hosts.length - 1) {\n          throw err;\n        } else {\n          // We switch host only if it's still active.\n          // If it's not active it means that it was switched by\n          // another concurrent request\n          if (isHostActive(hostUsedForRequest)) {\n            switchHost();\n          }\n        }\n      }\n    }\n    throw new Error(\"Should never reach this\");\n  }\n  arweave.api.get = async (endpoint, axiosConfig) => {\n    return await overridenRequestMethod(() => originalApiRequestMethods.get(endpoint, axiosConfig));\n  };\n  arweave.api.post = async (endpoint, body, axiosConfig) => {\n    return await overridenRequestMethod(() => originalApiRequestMethods.post(endpoint, body, axiosConfig));\n  };\n  return arweave;\n}\n/**\n   * Returns overrriden arweave instance with default hosts\n   * (arweave.net, gateway.amplify.host, arweave.dev)\n   * @param config - Other configuration options\n   * (timeout, logging, logger, onError callback)\n   * @returns arweave instance\n   */\nfunction initWithDefaultHosts(config) {\n  return init(DEFAULT_HOSTS, config);\n}\nmodule.exports = {\n  init,\n  initWithDefaultHosts\n};","map":{"version":3,"names":["__importDefault","mod","__esModule","arweave_1","require","DEFAULT_HOSTS","host","protocol","port","defaultArweaveConfig","timeout","logging","onError","console","error","init","hosts","config","length","Error","arweave","default","Object","assign","currentHostIndex","lastFailedHost","updateHostParams","hostConfig","api","originalApiRequestMethods","get","bind","post","switchHost","oldHost","getCurrentHost","newHost","logger","undefined","JSON","stringify","isHostActive","currentHost","overridenRequestMethod","sendOriginalRequest","i","hostUsedForRequest","response","status","data","err","endpoint","axiosConfig","body","initWithDefaultHosts","module","exports"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/arweave-multihost/lib/index.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst arweave_1 = __importDefault(require(\"arweave\"));\n;\n;\nconst DEFAULT_HOSTS = [\n    {\n        host: \"arweave.net\",\n        protocol: \"https\",\n        port: 443,\n    },\n    {\n        host: \"gateway.amplify.host\",\n        protocol: \"https\",\n        port: 443,\n    },\n    {\n        host: \"arweave.dev\",\n        protocol: \"https\",\n        port: 443,\n    },\n];\nconst defaultArweaveConfig = {\n    timeout: 10000,\n    logging: false,\n    onError: console.error,\n};\n/**\n   * Returns overrriden arweave instance\n   * @param hosts - Array of hosts\n   * @param config - Other configuration options\n   * (timeout, logging, logger, onError callback)\n   * @returns arweave instance\n   */\nfunction init(hosts, config = defaultArweaveConfig) {\n    if (hosts.length === 0) {\n        throw new Error(\"Multihost config should have at least one host\");\n    }\n    const arweave = arweave_1.default.init(Object.assign(Object.assign({}, hosts[0]), config));\n    let currentHostIndex = 0, lastFailedHost = 0;\n    function updateHostParams(hostConfig) {\n        arweave.api.config.host = hostConfig.host;\n        arweave.api.config.port = hostConfig.port;\n        arweave.api.config.protocol = hostConfig.protocol;\n    }\n    const originalApiRequestMethods = {\n        get: arweave.api.get.bind(arweave.api),\n        post: arweave.api.post.bind(arweave.api),\n    };\n    function switchHost() {\n        const oldHost = getCurrentHost();\n        currentHostIndex = (currentHostIndex + 1) % hosts.length;\n        const newHost = hosts[currentHostIndex];\n        if (config.logging && config.logger !== undefined) {\n            config.logger(\"Request failed. Switching host and retrying. \"\n                + `Old host: ${JSON.stringify(oldHost)}. `\n                + `New host: ${JSON.stringify(newHost)}.`);\n        }\n        updateHostParams(newHost);\n    }\n    function getCurrentHost() {\n        return hosts[currentHostIndex];\n    }\n    function isHostActive(host) {\n        const currentHost = getCurrentHost();\n        return JSON.stringify(host) === JSON.stringify(currentHost);\n    }\n    async function overridenRequestMethod(sendOriginalRequest) {\n        for (let i = 0; i < hosts.length; i++) {\n            const hostUsedForRequest = getCurrentHost();\n            try {\n                const response = await sendOriginalRequest();\n                if (response.status >= 500 && response.status < 600) {\n                    throw new Error(\"Error while sending http request: \"\n                        + `Status: ${response.status}. `\n                        + `Data: ${JSON.stringify(response.data)}`);\n                }\n                return response;\n            }\n            catch (err) {\n                // config.onError callback may be used for error logging\n                if (config.onError) {\n                    config.onError(err);\n                }\n                if (i === hosts.length - 1) {\n                    throw err;\n                }\n                else {\n                    // We switch host only if it's still active.\n                    // If it's not active it means that it was switched by\n                    // another concurrent request\n                    if (isHostActive(hostUsedForRequest)) {\n                        switchHost();\n                    }\n                }\n            }\n        }\n        throw new Error(\"Should never reach this\");\n    }\n    arweave.api.get = async (endpoint, axiosConfig) => {\n        return await overridenRequestMethod(() => originalApiRequestMethods.get(endpoint, axiosConfig));\n    };\n    arweave.api.post = async (endpoint, body, axiosConfig) => {\n        return await overridenRequestMethod(() => originalApiRequestMethods.post(endpoint, body, axiosConfig));\n    };\n    return arweave;\n}\n/**\n   * Returns overrriden arweave instance with default hosts\n   * (arweave.net, gateway.amplify.host, arweave.dev)\n   * @param config - Other configuration options\n   * (timeout, logging, logger, onError callback)\n   * @returns arweave instance\n   */\nfunction initWithDefaultHosts(config) {\n    return init(DEFAULT_HOSTS, config);\n}\nmodule.exports = {\n    init,\n    initWithDefaultHosts,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}