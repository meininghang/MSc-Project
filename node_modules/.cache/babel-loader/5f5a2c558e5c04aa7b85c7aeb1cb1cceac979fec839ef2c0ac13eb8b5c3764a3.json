{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.Mustache = factory());\n})(this, function () {\n  'use strict';\n\n  /*!\n   * mustache.js - Logic-less {{mustache}} templates with JavaScript\n   * http://github.com/janl/mustache.js\n   */\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill(object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n  function isFunction(object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr(obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n  function escapeRegExp(string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty(obj, propName) {\n    return obj != null && typeof obj === 'object' && propName in obj;\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty(primitive, propName) {\n    return primitive != null && typeof primitive !== 'object' && primitive.hasOwnProperty && primitive.hasOwnProperty(propName);\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp(re, string) {\n    return regExpTest.call(re, string);\n  }\n  var nonSpaceRe = /\\S/;\n  function isWhitespace(string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n  function escapeHtml(string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap(s) {\n      return entityMap[s];\n    });\n  }\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   *\n   * Tokens for partials also contain two more elements: 1) a string value of\n   * indendation prior to that tag and 2) the index of that tag on that line -\n   * eg a value of 2 indicates the partial is the third tag on this line.\n   */\n  function parseTemplate(template, tags) {\n    if (!template) return [];\n    var lineHasNonSpace = false;\n    var sections = []; // Stack to hold section tokens\n    var tokens = []; // Buffer to hold the tokens\n    var spaces = []; // Indices of whitespace tokens on the current line\n    var hasTag = false; // Is there a {{tag}} on the current line?\n    var nonSpace = false; // Is there a non-space char on the current line?\n    var indentation = ''; // Tracks indentation for tags that use it\n    var tagIndex = 0; // Stores a count of number of tags encountered on a line\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace() {\n      if (hasTag && !nonSpace) {\n        while (spaces.length) delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n      hasTag = false;\n      nonSpace = false;\n    }\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags(tagsToCompile) {\n      if (typeof tagsToCompile === 'string') tagsToCompile = tagsToCompile.split(spaceRe, 2);\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2) throw new Error('Invalid tags: ' + tagsToCompile);\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n    compileTags(tags || mustache.tags);\n    var scanner = new Scanner(template);\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n            indentation += chr;\n          } else {\n            nonSpace = true;\n            lineHasNonSpace = true;\n            indentation += ' ';\n          }\n          tokens.push(['text', chr, start, start + 1]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n            indentation = '';\n            tagIndex = 0;\n            lineHasNonSpace = false;\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe)) break;\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe)) throw new Error('Unclosed tag at ' + scanner.pos);\n      if (type == '>') {\n        token = [type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace];\n      } else {\n        token = [type, value, start, scanner.pos];\n      }\n      tagIndex++;\n      tokens.push(token);\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n        if (!openSection) throw new Error('Unopened section \"' + value + '\" at ' + start);\n        if (openSection[1] !== value) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n    stripSpace();\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n    if (openSection) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens(tokens) {\n    var squashedTokens = [];\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens(tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner(string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos() {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan(re) {\n    var match = this.tail.match(re);\n    if (!match || match.index !== 0) return '';\n    var string = match[0];\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil(re) {\n    var index = this.tail.search(re),\n      match;\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n    this.pos += match.length;\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context(view, parentContext) {\n    this.view = view;\n    this.cache = {\n      '.': this.view\n    };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push(view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup(name) {\n    var cache = this.cache;\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this,\n        intermediateValue,\n        names,\n        index,\n        lookupHit = false;\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1) lookupHit = hasProperty(intermediateValue, names[index]) || primitiveHasOwnProperty(intermediateValue, names[index]);\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n        context = context.parent;\n      }\n      cache[name] = value;\n    }\n    if (isFunction(value)) value = value.call(this.view);\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer() {\n    this.templateCache = {\n      _cache: {},\n      set: function set(key, value) {\n        this._cache[key] = value;\n      },\n      get: function get(key) {\n        return this._cache[key];\n      },\n      clear: function clear() {\n        this._cache = {};\n      }\n    };\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache() {\n    if (typeof this.templateCache !== 'undefined') {\n      this.templateCache.clear();\n    }\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse(template, tags) {\n    var cache = this.templateCache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var isCacheEnabled = typeof cache !== 'undefined';\n    var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n    if (tokens == undefined) {\n      tokens = parseTemplate(template, tags);\n      isCacheEnabled && cache.set(cacheKey, tokens);\n    }\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `config` argument is given here, then it should be an\n   * object with a `tags` attribute or an `escape` attribute or both.\n   * If an array is passed, then it will be interpreted the same way as\n   * a `tags` attribute on a `config` object.\n   *\n   * The `tags` attribute of a `config` object must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   *\n   * The `escape` attribute of a `config` object must be a function which\n   * accepts a string as input and outputs a safely escaped string.\n   * If an `escape` function is not provided, then an HTML-safe string\n   * escaping function is used as the default.\n   */\n  Writer.prototype.render = function render(template, view, partials, config) {\n    var tags = this.getConfigTags(config);\n    var tokens = this.parse(template, tags);\n    var context = view instanceof Context ? view : new Context(view, undefined);\n    return this.renderTokens(tokens, context, partials, template, config);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens(tokens, context, partials, originalTemplate, config) {\n    var buffer = '';\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);else if (symbol === '>') value = this.renderPartial(token, context, partials, config);else if (symbol === '&') value = this.unescapedValue(token, context);else if (symbol === 'name') value = this.escapedValue(token, context, config);else if (symbol === 'text') value = this.rawValue(token);\n      if (value !== undefined) buffer += value;\n    }\n    return buffer;\n  };\n  Writer.prototype.renderSection = function renderSection(token, context, partials, originalTemplate, config) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender(template) {\n      return self.render(template, context, partials, config);\n    }\n    if (!value) return;\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string') throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n      if (value != null) buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n    }\n    return buffer;\n  };\n  Writer.prototype.renderInverted = function renderInverted(token, context, partials, originalTemplate, config) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || isArray(value) && value.length === 0) return this.renderTokens(token[4], context, partials, originalTemplate, config);\n  };\n  Writer.prototype.indentPartial = function indentPartial(partial, indentation, lineHasNonSpace) {\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n    var partialByNl = partial.split('\\n');\n    for (var i = 0; i < partialByNl.length; i++) {\n      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n        partialByNl[i] = filteredIndentation + partialByNl[i];\n      }\n    }\n    return partialByNl.join('\\n');\n  };\n  Writer.prototype.renderPartial = function renderPartial(token, context, partials, config) {\n    if (!partials) return;\n    var tags = this.getConfigTags(config);\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) {\n      var lineHasNonSpace = token[6];\n      var tagIndex = token[5];\n      var indentation = token[4];\n      var indentedValue = value;\n      if (tagIndex == 0 && indentation) {\n        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n      }\n      var tokens = this.parse(indentedValue, tags);\n      return this.renderTokens(tokens, context, partials, indentedValue, config);\n    }\n  };\n  Writer.prototype.unescapedValue = function unescapedValue(token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null) return value;\n  };\n  Writer.prototype.escapedValue = function escapedValue(token, context, config) {\n    var escape = this.getConfigEscape(config) || mustache.escape;\n    var value = context.lookup(token[1]);\n    if (value != null) return typeof value === 'number' && escape === mustache.escape ? String(value) : escape(value);\n  };\n  Writer.prototype.rawValue = function rawValue(token) {\n    return token[1];\n  };\n  Writer.prototype.getConfigTags = function getConfigTags(config) {\n    if (isArray(config)) {\n      return config;\n    } else if (config && typeof config === 'object') {\n      return config.tags;\n    } else {\n      return undefined;\n    }\n  };\n  Writer.prototype.getConfigEscape = function getConfigEscape(config) {\n    if (config && typeof config === 'object' && !isArray(config)) {\n      return config.escape;\n    } else {\n      return undefined;\n    }\n  };\n  var mustache = {\n    name: 'mustache.js',\n    version: '4.2.0',\n    tags: ['{{', '}}'],\n    clearCache: undefined,\n    escape: undefined,\n    parse: undefined,\n    render: undefined,\n    Scanner: undefined,\n    Context: undefined,\n    Writer: undefined,\n    /**\n     * Allows a user to override the default caching strategy, by providing an\n     * object with set, get and clear methods. This can also be used to disable\n     * the cache by setting it to the literal `undefined`.\n     */\n    set templateCache(cache) {\n      defaultWriter.templateCache = cache;\n    },\n    /**\n     * Gets the default or overridden caching object from the default writer.\n     */\n    get templateCache() {\n      return defaultWriter.templateCache;\n    }\n  };\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache() {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse(template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view`, `partials`, and `config`\n   * using the default writer.\n   */\n  mustache.render = function render(template, view, partials, config) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' + 'but \"' + typeStr(template) + '\" was given as the first ' + 'argument for mustache#render(template, view, partials)');\n    }\n    return defaultWriter.render(template, view, partials, config);\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n  return mustache;\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","self","Mustache","objectToString","Object","prototype","toString","isArray","Array","isArrayPolyfill","object","call","isFunction","typeStr","obj","escapeRegExp","string","replace","hasProperty","propName","primitiveHasOwnProperty","primitive","hasOwnProperty","regExpTest","RegExp","test","testRegExp","re","nonSpaceRe","isWhitespace","entityMap","escapeHtml","String","fromEntityMap","s","whiteRe","spaceRe","equalsRe","curlyRe","tagRe","parseTemplate","template","tags","lineHasNonSpace","sections","tokens","spaces","hasTag","nonSpace","indentation","tagIndex","stripSpace","length","pop","openingTagRe","closingTagRe","closingCurlyRe","compileTags","tagsToCompile","split","Error","mustache","scanner","Scanner","start","type","value","chr","token","openSection","eos","pos","scanUntil","i","valueLength","charAt","push","scan","nestTokens","squashTokens","squashedTokens","lastToken","numTokens","nestedTokens","collector","section","tail","match","index","substring","search","Context","view","parentContext","cache","parent","lookup","name","context","intermediateValue","names","lookupHit","indexOf","Writer","templateCache","_cache","set","key","get","clear","clearCache","parse","cacheKey","join","isCacheEnabled","undefined","render","partials","config","getConfigTags","renderTokens","originalTemplate","buffer","symbol","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","subRender","j","slice","indentPartial","partial","filteredIndentation","partialByNl","indentedValue","escape","getConfigEscape","version","defaultWriter","TypeError"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/mustache/mustache.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.Mustache = factory());\n}(this, (function () { 'use strict';\n\n  /*!\n   * mustache.js - Logic-less {{mustache}} templates with JavaScript\n   * http://github.com/janl/mustache.js\n   */\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {\n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   *\n   * Tokens for partials also contain two more elements: 1) a string value of\n   * indendation prior to that tag and 2) the index of that tag on that line -\n   * eg a value of 2 indicates the partial is the third tag on this line.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n    var lineHasNonSpace = false;\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n    var indentation = '';  // Tracks indentation for tags that use it\n    var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n            indentation += chr;\n          } else {\n            nonSpace = true;\n            lineHasNonSpace = true;\n            indentation += ' ';\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n            indentation = '';\n            tagIndex = 0;\n            lineHasNonSpace = false;\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      if (type == '>') {\n        token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n      } else {\n        token = [ type, value, start, scanner.pos ];\n      }\n      tagIndex++;\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    stripSpace();\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index])\n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.templateCache = {\n      _cache: {},\n      set: function set (key, value) {\n        this._cache[key] = value;\n      },\n      get: function get (key) {\n        return this._cache[key];\n      },\n      clear: function clear () {\n        this._cache = {};\n      }\n    };\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    if (typeof this.templateCache !== 'undefined') {\n      this.templateCache.clear();\n    }\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.templateCache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var isCacheEnabled = typeof cache !== 'undefined';\n    var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n    if (tokens == undefined) {\n      tokens = parseTemplate(template, tags);\n      isCacheEnabled && cache.set(cacheKey, tokens);\n    }\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `config` argument is given here, then it should be an\n   * object with a `tags` attribute or an `escape` attribute or both.\n   * If an array is passed, then it will be interpreted the same way as\n   * a `tags` attribute on a `config` object.\n   *\n   * The `tags` attribute of a `config` object must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   *\n   * The `escape` attribute of a `config` object must be a function which\n   * accepts a string as input and outputs a safely escaped string.\n   * If an `escape` function is not provided, then an HTML-safe string\n   * escaping function is used as the default.\n   */\n  Writer.prototype.render = function render (template, view, partials, config) {\n    var tags = this.getConfigTags(config);\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view, undefined);\n    return this.renderTokens(tokens, context, partials, template, config);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context, config);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials, config);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate, config);\n  };\n\n  Writer.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n    var partialByNl = partial.split('\\n');\n    for (var i = 0; i < partialByNl.length; i++) {\n      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n        partialByNl[i] = filteredIndentation + partialByNl[i];\n      }\n    }\n    return partialByNl.join('\\n');\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, config) {\n    if (!partials) return;\n    var tags = this.getConfigTags(config);\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) {\n      var lineHasNonSpace = token[6];\n      var tagIndex = token[5];\n      var indentation = token[4];\n      var indentedValue = value;\n      if (tagIndex == 0 && indentation) {\n        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n      }\n      var tokens = this.parse(indentedValue, tags);\n      return this.renderTokens(tokens, context, partials, indentedValue, config);\n    }\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context, config) {\n    var escape = this.getConfigEscape(config) || mustache.escape;\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  Writer.prototype.getConfigTags = function getConfigTags (config) {\n    if (isArray(config)) {\n      return config;\n    }\n    else if (config && typeof config === 'object') {\n      return config.tags;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  Writer.prototype.getConfigEscape = function getConfigEscape (config) {\n    if (config && typeof config === 'object' && !isArray(config)) {\n      return config.escape;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  var mustache = {\n    name: 'mustache.js',\n    version: '4.2.0',\n    tags: [ '{{', '}}' ],\n    clearCache: undefined,\n    escape: undefined,\n    parse: undefined,\n    render: undefined,\n    Scanner: undefined,\n    Context: undefined,\n    Writer: undefined,\n    /**\n     * Allows a user to override the default caching strategy, by providing an\n     * object with set, get and clear methods. This can also be used to disable\n     * the cache by setting it to the literal `undefined`.\n     */\n    set templateCache (cache) {\n      defaultWriter.templateCache = cache;\n    },\n    /**\n     * Gets the default or overridden caching object from the default writer.\n     */\n    get templateCache () {\n      return defaultWriter.templateCache;\n    }\n  };\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view`, `partials`, and `config`\n   * using the default writer.\n   */\n  mustache.render = function render (template, view, partials, config) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, config);\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n\n})));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}