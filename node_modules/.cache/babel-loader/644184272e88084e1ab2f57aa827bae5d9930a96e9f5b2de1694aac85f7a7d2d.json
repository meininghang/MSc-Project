{"ast":null,"code":"import _classPrivateFieldInitSpec from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldSet from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport _classPrivateFieldGet from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _defineProperty from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { defineProperties } from \"../utils/properties.js\";\nimport { assertArgument } from \"../utils/index.js\";\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n/**\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\n */\nexport class NetworkPlugin {\n  /**\n   *  Creates a new **NetworkPlugin**.\n   */\n  constructor(name) {\n    /**\n     *  The name of the plugin.\n     *\n     *  It is recommended to use reverse-domain-notation, which permits\n     *  unique names with a known authority as well as hierarchal entries.\n     */\n    _defineProperty(this, \"name\", void 0);\n    defineProperties(this, {\n      name\n    });\n  }\n  /**\n   *  Creates a copy of this plugin.\n   */\n  clone() {\n    return new NetworkPlugin(this.name);\n  }\n}\n/**\n *  A **GasCostPlugin** allows a network to provide alternative values when\n *  computing the intrinsic gas required for a transaction.\n */\nexport class GasCostPlugin extends NetworkPlugin {\n  /**\n   *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\n   *  latest block or another GasCostPlugin supercedes that block number,\n   *  with the associated %%costs%%.\n   */\n  constructor(effectiveBlock, costs) {\n    if (effectiveBlock == null) {\n      effectiveBlock = 0;\n    }\n    super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);\n    /**\n     *  The block number to treat these values as valid from.\n     *\n     *  This allows a hardfork to have updated values included as well as\n     *  mulutiple hardforks to be supported.\n     */\n    _defineProperty(this, \"effectiveBlock\", void 0);\n    /**\n     *  The transactions base fee.\n     */\n    _defineProperty(this, \"txBase\", void 0);\n    /**\n     *  The fee for creating a new account.\n     */\n    _defineProperty(this, \"txCreate\", void 0);\n    /**\n     *  The fee per zero-byte in the data.\n     */\n    _defineProperty(this, \"txDataZero\", void 0);\n    /**\n     *  The fee per non-zero-byte in the data.\n     */\n    _defineProperty(this, \"txDataNonzero\", void 0);\n    /**\n     *  The fee per storage key in the [[link-eip-2930]] access list.\n     */\n    _defineProperty(this, \"txAccessListStorageKey\", void 0);\n    /**\n     *  The fee per address in the [[link-eip-2930]] access list.\n     */\n    _defineProperty(this, \"txAccessListAddress\", void 0);\n    const props = {\n      effectiveBlock\n    };\n    function set(name, nullish) {\n      let value = (costs || {})[name];\n      if (value == null) {\n        value = nullish;\n      }\n      assertArgument(typeof value === \"number\", `invalud value for ${name}`, \"costs\", costs);\n      props[name] = value;\n    }\n    set(\"txBase\", 21000);\n    set(\"txCreate\", 32000);\n    set(\"txDataZero\", 4);\n    set(\"txDataNonzero\", 16);\n    set(\"txAccessListStorageKey\", 1900);\n    set(\"txAccessListAddress\", 2400);\n    defineProperties(this, props);\n  }\n  clone() {\n    return new GasCostPlugin(this.effectiveBlock, this);\n  }\n}\n/**\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\n *  Contract address and the target network to use when using that\n *  contract.\n *\n *  Various testnets have their own instance of the contract to use, but\n *  in general, the mainnet instance supports multi-chain addresses and\n *  should be used.\n */\nexport class EnsPlugin extends NetworkPlugin {\n  /**\n   *  Creates a new **EnsPlugin** connected to %%address%% on the\n   *  %%targetNetwork%%. The default ENS address and mainnet is used\n   *  if unspecified.\n   */\n  constructor(address, targetNetwork) {\n    super(\"org.ethers.plugins.network.Ens\");\n    /**\n     *  The ENS Registrty Contract address.\n     */\n    _defineProperty(this, \"address\", void 0);\n    /**\n     *  The chain ID that the ENS contract lives on.\n     */\n    _defineProperty(this, \"targetNetwork\", void 0);\n    defineProperties(this, {\n      address: address || EnsAddress,\n      targetNetwork: targetNetwork == null ? 1 : targetNetwork\n    });\n  }\n  clone() {\n    return new EnsPlugin(this.address, this.targetNetwork);\n  }\n}\n/**\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\n *  means to specify its fee data.\n *\n *  For example, a network which does not support [[link-eip-1559]] may\n *  choose to use a Gas Station site to approximate the gas price.\n */\nvar _feeDataFunc = /*#__PURE__*/new WeakMap();\nexport class FeeDataNetworkPlugin extends NetworkPlugin {\n  /**\n   *  The fee data function provided to the constructor.\n   */\n  get feeDataFunc() {\n    return _classPrivateFieldGet(this, _feeDataFunc);\n  }\n  /**\n   *  Creates a new **FeeDataNetworkPlugin**.\n   */\n  constructor(feeDataFunc) {\n    super(\"org.ethers.plugins.network.FeeData\");\n    _classPrivateFieldInitSpec(this, _feeDataFunc, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _feeDataFunc, feeDataFunc);\n  }\n  /**\n   *  Resolves to the fee data.\n   */\n  async getFeeData(provider) {\n    return await _classPrivateFieldGet(this, _feeDataFunc).call(this, provider);\n  }\n  clone() {\n    return new FeeDataNetworkPlugin(_classPrivateFieldGet(this, _feeDataFunc));\n  }\n}\n/*\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\n\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\n        super(\"org.ethers.network-plugins.custom-block\");\n        this.#blockFunc = blockFunc;\n        this.#blockWithTxsFunc = blockWithTxsFunc;\n    }\n\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\n        return await this.#blockFunc(provider, block);\n    }\n\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\n        return await this.#blockWithTxsFunc(provider, block);\n    }\n\n    clone(): CustomBlockNetworkPlugin {\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\n    }\n}\n*/","map":{"version":3,"names":["defineProperties","assertArgument","EnsAddress","NetworkPlugin","constructor","name","_defineProperty","clone","GasCostPlugin","effectiveBlock","costs","props","set","nullish","value","EnsPlugin","address","targetNetwork","_feeDataFunc","WeakMap","FeeDataNetworkPlugin","feeDataFunc","_classPrivateFieldGet","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","getFeeData","provider","call"],"sources":["../../src.ts/providers/plugins-network.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}