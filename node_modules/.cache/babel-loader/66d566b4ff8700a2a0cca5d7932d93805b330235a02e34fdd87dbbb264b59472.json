{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseNearAmount = exports.formatNearAmount = exports.NEAR_NOMINATION = exports.NEAR_NOMINATION_EXP = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * Exponent for calculating how many indivisible units are there in one NEAR. See {@link NEAR_NOMINATION}.\n */\nexports.NEAR_NOMINATION_EXP = 24;\n/**\n * Number of indivisible units in one NEAR. Derived from {@link NEAR_NOMINATION_EXP}.\n */\nexports.NEAR_NOMINATION = new bn_js_1.default('10', 10).pow(new bn_js_1.default(exports.NEAR_NOMINATION_EXP, 10));\n// Pre-calculate offests used for rounding to different number of digits\nconst ROUNDING_OFFSETS = [];\nconst BN10 = new bn_js_1.default(10);\nfor (let i = 0, offset = new bn_js_1.default(5); i < exports.NEAR_NOMINATION_EXP; i++, offset = offset.mul(BN10)) {\n  ROUNDING_OFFSETS[i] = offset;\n}\n/**\n * Convert account balance value from internal indivisible units to NEAR. 1 NEAR is defined by {@link NEAR_NOMINATION}.\n * Effectively this divides given amount by {@link NEAR_NOMINATION}.\n *\n * @param balance decimal string representing balance in smallest non-divisible NEAR units (as specified by {@link NEAR_NOMINATION})\n * @param fracDigits number of fractional digits to preserve in formatted string. Balance is rounded to match given number of digits.\n * @returns Value in Ⓝ\n */\nfunction formatNearAmount(balance, fracDigits = exports.NEAR_NOMINATION_EXP) {\n  const balanceBN = new bn_js_1.default(balance, 10);\n  if (fracDigits !== exports.NEAR_NOMINATION_EXP) {\n    // Adjust balance for rounding at given number of digits\n    const roundingExp = exports.NEAR_NOMINATION_EXP - fracDigits - 1;\n    if (roundingExp > 0) {\n      balanceBN.iadd(ROUNDING_OFFSETS[roundingExp]);\n    }\n  }\n  balance = balanceBN.toString();\n  const wholeStr = balance.substring(0, balance.length - exports.NEAR_NOMINATION_EXP) || '0';\n  const fractionStr = balance.substring(balance.length - exports.NEAR_NOMINATION_EXP).padStart(exports.NEAR_NOMINATION_EXP, '0').substring(0, fracDigits);\n  return trimTrailingZeroes(`${formatWithCommas(wholeStr)}.${fractionStr}`);\n}\nexports.formatNearAmount = formatNearAmount;\n/**\n * Convert human readable NEAR amount to internal indivisible units.\n * Effectively this multiplies given amount by {@link NEAR_NOMINATION}.\n *\n * @param amt decimal string (potentially fractional) denominated in NEAR.\n * @returns The parsed yoctoⓃ amount or null if no amount was passed in\n */\nfunction parseNearAmount(amt) {\n  if (!amt) {\n    return null;\n  }\n  amt = cleanupAmount(amt);\n  const split = amt.split('.');\n  const wholePart = split[0];\n  const fracPart = split[1] || '';\n  if (split.length > 2 || fracPart.length > exports.NEAR_NOMINATION_EXP) {\n    throw new Error(`Cannot parse '${amt}' as NEAR amount`);\n  }\n  return trimLeadingZeroes(wholePart + fracPart.padEnd(exports.NEAR_NOMINATION_EXP, '0'));\n}\nexports.parseNearAmount = parseNearAmount;\n/**\n * Removes commas from the input\n * @param amount A value or amount that may contain commas\n * @returns string The cleaned value\n */\nfunction cleanupAmount(amount) {\n  return amount.replace(/,/g, '').trim();\n}\n/**\n * Removes .000… from an input\n * @param value A value that may contain trailing zeroes in the decimals place\n * @returns string The value without the trailing zeros\n */\nfunction trimTrailingZeroes(value) {\n  return value.replace(/\\.?0*$/, '');\n}\n/**\n * Removes leading zeroes from an input\n * @param value A value that may contain leading zeroes\n * @returns string The value without the leading zeroes\n */\nfunction trimLeadingZeroes(value) {\n  value = value.replace(/^0+/, '');\n  if (value === '') {\n    return '0';\n  }\n  return value;\n}\n/**\n * Returns a human-readable value with commas\n * @param value A value that may not contain commas\n * @returns string A value with commas\n */\nfunction formatWithCommas(value) {\n  const pattern = /(-?\\d+)(\\d{3})/;\n  while (pattern.test(value)) {\n    value = value.replace(pattern, '$1,$2');\n  }\n  return value;\n}","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","parseNearAmount","formatNearAmount","NEAR_NOMINATION","NEAR_NOMINATION_EXP","bn_js_1","require","default","pow","ROUNDING_OFFSETS","BN10","i","offset","mul","balance","fracDigits","balanceBN","roundingExp","iadd","toString","wholeStr","substring","length","fractionStr","padStart","trimTrailingZeroes","formatWithCommas","amt","cleanupAmount","split","wholePart","fracPart","Error","trimLeadingZeroes","padEnd","amount","replace","trim","pattern","test"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/near-api-js/lib/utils/format.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseNearAmount = exports.formatNearAmount = exports.NEAR_NOMINATION = exports.NEAR_NOMINATION_EXP = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * Exponent for calculating how many indivisible units are there in one NEAR. See {@link NEAR_NOMINATION}.\n */\nexports.NEAR_NOMINATION_EXP = 24;\n/**\n * Number of indivisible units in one NEAR. Derived from {@link NEAR_NOMINATION_EXP}.\n */\nexports.NEAR_NOMINATION = new bn_js_1.default('10', 10).pow(new bn_js_1.default(exports.NEAR_NOMINATION_EXP, 10));\n// Pre-calculate offests used for rounding to different number of digits\nconst ROUNDING_OFFSETS = [];\nconst BN10 = new bn_js_1.default(10);\nfor (let i = 0, offset = new bn_js_1.default(5); i < exports.NEAR_NOMINATION_EXP; i++, offset = offset.mul(BN10)) {\n    ROUNDING_OFFSETS[i] = offset;\n}\n/**\n * Convert account balance value from internal indivisible units to NEAR. 1 NEAR is defined by {@link NEAR_NOMINATION}.\n * Effectively this divides given amount by {@link NEAR_NOMINATION}.\n *\n * @param balance decimal string representing balance in smallest non-divisible NEAR units (as specified by {@link NEAR_NOMINATION})\n * @param fracDigits number of fractional digits to preserve in formatted string. Balance is rounded to match given number of digits.\n * @returns Value in Ⓝ\n */\nfunction formatNearAmount(balance, fracDigits = exports.NEAR_NOMINATION_EXP) {\n    const balanceBN = new bn_js_1.default(balance, 10);\n    if (fracDigits !== exports.NEAR_NOMINATION_EXP) {\n        // Adjust balance for rounding at given number of digits\n        const roundingExp = exports.NEAR_NOMINATION_EXP - fracDigits - 1;\n        if (roundingExp > 0) {\n            balanceBN.iadd(ROUNDING_OFFSETS[roundingExp]);\n        }\n    }\n    balance = balanceBN.toString();\n    const wholeStr = balance.substring(0, balance.length - exports.NEAR_NOMINATION_EXP) || '0';\n    const fractionStr = balance.substring(balance.length - exports.NEAR_NOMINATION_EXP)\n        .padStart(exports.NEAR_NOMINATION_EXP, '0').substring(0, fracDigits);\n    return trimTrailingZeroes(`${formatWithCommas(wholeStr)}.${fractionStr}`);\n}\nexports.formatNearAmount = formatNearAmount;\n/**\n * Convert human readable NEAR amount to internal indivisible units.\n * Effectively this multiplies given amount by {@link NEAR_NOMINATION}.\n *\n * @param amt decimal string (potentially fractional) denominated in NEAR.\n * @returns The parsed yoctoⓃ amount or null if no amount was passed in\n */\nfunction parseNearAmount(amt) {\n    if (!amt) {\n        return null;\n    }\n    amt = cleanupAmount(amt);\n    const split = amt.split('.');\n    const wholePart = split[0];\n    const fracPart = split[1] || '';\n    if (split.length > 2 || fracPart.length > exports.NEAR_NOMINATION_EXP) {\n        throw new Error(`Cannot parse '${amt}' as NEAR amount`);\n    }\n    return trimLeadingZeroes(wholePart + fracPart.padEnd(exports.NEAR_NOMINATION_EXP, '0'));\n}\nexports.parseNearAmount = parseNearAmount;\n/**\n * Removes commas from the input\n * @param amount A value or amount that may contain commas\n * @returns string The cleaned value\n */\nfunction cleanupAmount(amount) {\n    return amount.replace(/,/g, '').trim();\n}\n/**\n * Removes .000… from an input\n * @param value A value that may contain trailing zeroes in the decimals place\n * @returns string The value without the trailing zeros\n */\nfunction trimTrailingZeroes(value) {\n    return value.replace(/\\.?0*$/, '');\n}\n/**\n * Removes leading zeroes from an input\n * @param value A value that may contain leading zeroes\n * @returns string The value without the leading zeroes\n */\nfunction trimLeadingZeroes(value) {\n    value = value.replace(/^0+/, '');\n    if (value === '') {\n        return '0';\n    }\n    return value;\n}\n/**\n * Returns a human-readable value with commas\n * @param value A value that may not contain commas\n * @returns string A value with commas\n */\nfunction formatWithCommas(value) {\n    const pattern = /(-?\\d+)(\\d{3})/;\n    while (pattern.test(value)) {\n        value = value.replace(pattern, '$1,$2');\n    }\n    return value;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}