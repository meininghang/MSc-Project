{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst constants_1 = require(\"../../constants\");\nconst arweave_1 = __importDefault(require(\"arweave\"));\nconst base64url_1 = __importDefault(require(\"base64url\"));\nconst isString = obj => {\n  return Object.prototype.toString.call(obj) === \"[object String]\" ? true : false;\n};\nconst checkArPermissions = async (windowArweaveWallet, permissions) => {\n  let existingPermissions = [];\n  const checkPermissions = isString(permissions) ? [permissions] : permissions;\n  try {\n    existingPermissions = await windowArweaveWallet.getPermissions();\n  } catch {\n    throw new Error(\"PLEASE_INSTALL_ARCONNECT\");\n  }\n  if (checkPermissions.length === 0) {\n    return;\n  }\n  if (checkPermissions.some(permission => {\n    return !existingPermissions.includes(permission);\n  })) {\n    await windowArweaveWallet.connect(checkPermissions);\n  }\n};\nclass InjectedArweaveSigner {\n  constructor(windowArweaveWallet) {\n    this.ownerLength = constants_1.SIG_CONFIG[constants_1.SignatureConfig.ARWEAVE].pubLength;\n    this.signatureLength = constants_1.SIG_CONFIG[constants_1.SignatureConfig.ARWEAVE].sigLength;\n    this.signatureType = constants_1.SignatureConfig.ARWEAVE;\n    this.signer = windowArweaveWallet;\n  }\n  async setPublicKey() {\n    try {\n      await checkArPermissions(this.signer, [\"ACCESS_PUBLIC_KEY\"]);\n    } catch {\n      throw new Error(\"ACCESS_PUBLIC_KEY_PERMISSION_NEEDED\");\n    }\n    const arOwner = await this.signer.getActivePublicKey();\n    this.publicKey = base64url_1.default.toBuffer(arOwner);\n  }\n  async sign(message) {\n    if (!this.publicKey) {\n      await this.setPublicKey();\n    }\n    try {\n      await checkArPermissions(this.signer, \"SIGNATURE\");\n    } catch {\n      throw new Error(\"SIGNATURE_PERMISSION_NEEDED\");\n    }\n    const algorithm = {\n      name: \"RSA-PSS\",\n      saltLength: 0\n    };\n    try {\n      const signature = await this.signer.signature(message, algorithm);\n      const buf = new Uint8Array(Object.values(signature));\n      return buf;\n    } catch {\n      throw new Error(\"SIGNATURE_FAILED\");\n    }\n  }\n  static async verify(pk, message, signature) {\n    return await arweave_1.default.crypto.verify(pk, message, signature);\n  }\n}\nexports.default = InjectedArweaveSigner;","map":{"version":3,"names":["constants_1","require","arweave_1","__importDefault","base64url_1","isString","obj","Object","prototype","toString","call","checkArPermissions","windowArweaveWallet","permissions","existingPermissions","checkPermissions","getPermissions","Error","length","some","permission","includes","connect","InjectedArweaveSigner","constructor","ownerLength","SIG_CONFIG","SignatureConfig","ARWEAVE","pubLength","signatureLength","sigLength","signatureType","signer","setPublicKey","arOwner","getActivePublicKey","publicKey","default","toBuffer","sign","message","algorithm","name","saltLength","signature","buf","Uint8Array","values","verify","pk","crypto","exports"],"sources":["injectedArweaveSigner.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}