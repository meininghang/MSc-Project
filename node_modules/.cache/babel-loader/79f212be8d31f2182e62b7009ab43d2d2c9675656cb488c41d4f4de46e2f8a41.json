{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst keccak256_1 = __importDefault(require(\"arseeding-arbundles/src/signing/keccak256\"));\nconst ethers_1 = require(\"ethers\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst signing_1 = require(\"arseeding-arbundles/src/signing\");\nconst currency_1 = __importDefault(require(\"../currency\"));\nconst ethBigNumber = ethers_1.ethers.BigNumber; // required for hexString conversions (w/ 0x padding)\nconst ethereumSigner = signing_1.InjectedEthereumSigner;\nclass EthereumConfig extends currency_1.default {\n  constructor(config) {\n    super(config);\n    this.base = [\"wei\", 1e18];\n  }\n  async getTx(txId) {\n    const provider = this.providerInstance;\n    const response = await provider.getTransaction(txId);\n    if (!response) throw new Error(\"Tx doesn't exist\");\n    return {\n      from: response.from,\n      to: response.to,\n      blockHeight: response.blockNumber ? new bignumber_js_1.default(response.blockNumber) : null,\n      amount: new bignumber_js_1.default(response.value.toHexString(), 16),\n      pending: response.blockNumber ? false : true,\n      confirmed: response.confirmations >= this.minConfirm\n    };\n  }\n  ownerToAddress(owner) {\n    return \"0x\" + (0, keccak256_1.default)(Buffer.from(owner.slice(1))).slice(-20).toString(\"hex\");\n  }\n  async sign(data) {\n    const signer = await this.getSigner();\n    return signer.sign(data);\n  }\n  getSigner() {\n    if (!this.signer) {\n      this.signer = new signing_1.InjectedEthereumSigner(this.wallet);\n    }\n    return this.signer;\n  }\n  async verify(pub, data, signature) {\n    return ethereumSigner.verify(pub, data, signature);\n  }\n  async getCurrentHeight() {\n    const provider = this.providerInstance;\n    const response = await provider.send(\"eth_blockNumber\", []);\n    return new bignumber_js_1.default(response, 16);\n  }\n  async getFee(amount, to) {\n    const provider = this.providerInstance;\n    await provider._ready();\n    const tx = {\n      to,\n      value: \"0x\" + new bignumber_js_1.default(amount).toString(16)\n    };\n    const estimatedGas = await provider.estimateGas(tx);\n    const gasPrice = await provider.getGasPrice();\n    return new bignumber_js_1.default(estimatedGas.mul(gasPrice).toString());\n  }\n  async sendTx(data) {\n    const signer = this.w3signer;\n    const receipt = await signer.sendTransaction(data); // .catch((e) => { console.error(`Sending tx: ${e}`) })\n    return receipt ? receipt.hash : undefined;\n  }\n  async createTx(amount, to, _fee) {\n    const amountc = ethBigNumber.from(new bignumber_js_1.default(amount).toString());\n    const signer = this.w3signer;\n    const estimatedGas = await signer.estimateGas({\n      to,\n      value: amountc.toHexString()\n    });\n    const gasPrice = await signer.getGasPrice();\n    const txr = await signer.populateTransaction({\n      to,\n      value: amountc.toHexString(),\n      gasPrice,\n      gasLimit: estimatedGas\n    });\n    return {\n      txId: undefined,\n      tx: txr\n    };\n  }\n  async getPublicKey() {\n    const signer = await this.getSigner();\n    await signer.setPublicKey();\n    return signer.publicKey;\n  }\n  pruneBalanceTransactions(_txIds) {\n    throw new Error(\"Method not implemented.\");\n  }\n  async ready() {\n    this.w3signer = await this.wallet.getSigner();\n    this._address = this.ownerToAddress(await this.getPublicKey());\n    this.providerInstance = new ethers_1.ethers.providers.JsonRpcProvider(this.providerUrl);\n  }\n}\nexports.default = EthereumConfig;","map":{"version":3,"names":["keccak256_1","__importDefault","require","ethers_1","bignumber_js_1","signing_1","currency_1","ethBigNumber","ethers","BigNumber","ethereumSigner","InjectedEthereumSigner","EthereumConfig","default","constructor","config","base","getTx","txId","provider","providerInstance","response","getTransaction","Error","from","to","blockHeight","blockNumber","amount","value","toHexString","pending","confirmed","confirmations","minConfirm","ownerToAddress","owner","Buffer","slice","toString","sign","data","signer","getSigner","wallet","verify","pub","signature","getCurrentHeight","send","getFee","_ready","tx","estimatedGas","estimateGas","gasPrice","getGasPrice","mul","sendTx","w3signer","receipt","sendTransaction","hash","undefined","createTx","_fee","amountc","txr","populateTransaction","gasLimit","getPublicKey","setPublicKey","publicKey","pruneBalanceTransactions","_txIds","ready","_address","providers","JsonRpcProvider","providerUrl","exports"],"sources":["../../../src/web/currencies/ethereum.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}