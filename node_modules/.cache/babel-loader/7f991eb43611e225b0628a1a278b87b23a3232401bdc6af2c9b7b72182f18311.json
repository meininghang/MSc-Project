{"ast":null,"code":"// ATTENTION:\n// This use case will use multiple wallet address.\n// During testing period, please make you have all wallet address are registered in into whitelist\n\nimport { MindLake } from 'mind-lake-sdk';\nconst DataType = MindLake.DataType;\nconst appKey = '3KjBLshwhIt1QAKgHda72GeF0UrzlOoT/1bfyg2p79w=';\n\n/**\r\n * Encrypt the data and create the account table\r\n * @param data like:[{'wallet': '0x70dBcC09edF6D9AdD4A235e2D8346E78A79ac770', 'token': 'USDT', 'volume': 7.7}]\r\n * @param fileName {String} file Name\r\n * @param address {String} The account is you want to access encrypted information\r\n * @returns {Promise<void>}\r\n */\nexport async function insertData(data, fileName) {\n  const mindLake = await MindLake.getInstance(appKey);\n  console.log('========>', mindLake);\n\n  // connect to MindLake\n  const res1 = await mindLake.connect();\n  console.log(12222, res1);\n  if (res1.code !== 0) {\n    console.error(res1.message);\n    return;\n  }\n\n  // create a table\n  const dataLake = mindLake.dataLake;\n  await dataLake.dropTable(\"album\");\n  const res2 = await dataLake.createTable(\"album\", [{\n    columnName: 'name',\n    type: DataType.text,\n    encrypt: false\n  }, {\n    columnName: 'file',\n    type: DataType.text,\n    encrypt: true\n  }]);\n  if (res2.code !== 0) {\n    console.error(res2.message);\n    return;\n  }\n\n  // encrypt data\n  const crypto = mindLake.crypto;\n  const res3 = await crypto.encrypt(data, \"album.file\");\n  if (res3.code !== 0) {\n    console.error(res3.message);\n    return;\n  }\n  const sql = `insert into album (name, file) values (${fileName}, '${res3.result}')`;\n  const res4 = await dataLake.query(sql);\n  console.log('11111=======>', res4);\n  if (res4.code !== 0) {\n    console.error(res4.message);\n    return;\n  }\n}","map":{"version":3,"names":["MindLake","DataType","appKey","insertData","data","fileName","mindLake","getInstance","console","log","res1","connect","code","error","message","dataLake","dropTable","res2","createTable","columnName","type","text","encrypt","crypto","res3","sql","result","res4","query"],"sources":["E:/Amanda-project/vue2-project/project-vue2/src/utils/encryption.js"],"sourcesContent":["// ATTENTION:\r\n// This use case will use multiple wallet address.\r\n// During testing period, please make you have all wallet address are registered in into whitelist\r\n\r\nimport {MindLake} from 'mind-lake-sdk'\r\n\r\nconst DataType = MindLake.DataType\r\n\r\nconst appKey = '3KjBLshwhIt1QAKgHda72GeF0UrzlOoT/1bfyg2p79w='\r\n\r\n/**\r\n * Encrypt the data and create the account table\r\n * @param data like:[{'wallet': '0x70dBcC09edF6D9AdD4A235e2D8346E78A79ac770', 'token': 'USDT', 'volume': 7.7}]\r\n * @param fileName {String} file Name\r\n * @param address {String} The account is you want to access encrypted information\r\n * @returns {Promise<void>}\r\n */\r\nexport async function insertData(data, fileName) {\r\n    const mindLake = await MindLake.getInstance(appKey)\r\n    console.log('========>', mindLake)\r\n\r\n    // connect to MindLake\r\n    const res1 = await mindLake.connect()\r\n    console.log(12222, res1)\r\n    if (res1.code !== 0) {\r\n        console.error(res1.message)\r\n        return\r\n    }\r\n\r\n    // create a table\r\n    const dataLake = mindLake.dataLake\r\n    await dataLake.dropTable(\"album\")\r\n    const res2 = await dataLake.createTable(\"album\", [\r\n        {columnName: 'name', type: DataType.text, encrypt: false},\r\n        {columnName: 'file', type: DataType.text, encrypt: true}])\r\n    if (res2.code !== 0) {\r\n        console.error(res2.message)\r\n        return\r\n    }\r\n\r\n    // encrypt data\r\n    const crypto = mindLake.crypto\r\n    const res3 = await crypto.encrypt(data, \"album.file\");\r\n    if(res3.code !== 0) {\r\n        console.error(res3.message);\r\n        return\r\n    }\r\n    const sql = `insert into album (name, file) values (${fileName}, '${res3.result}')`;\r\n    const res4 = await dataLake.query(sql);\r\n    console.log('11111=======>', res4)\r\n    if(res4.code !== 0) {\r\n        console.error(res4.message);\r\n        return\r\n    }\r\n}"],"mappings":"AAAA;AACA;AACA;;AAEA,SAAQA,QAAQ,QAAO,eAAe;AAEtC,MAAMC,QAAQ,GAAGD,QAAQ,CAACC,QAAQ;AAElC,MAAMC,MAAM,GAAG,8CAA8C;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,UAAUA,CAACC,IAAI,EAAEC,QAAQ,EAAE;EAC7C,MAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACO,WAAW,CAACL,MAAM,CAAC;EACnDM,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEH,QAAQ,CAAC;;EAElC;EACA,MAAMI,IAAI,GAAG,MAAMJ,QAAQ,CAACK,OAAO,CAAC,CAAC;EACrCH,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEC,IAAI,CAAC;EACxB,IAAIA,IAAI,CAACE,IAAI,KAAK,CAAC,EAAE;IACjBJ,OAAO,CAACK,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;IAC3B;EACJ;;EAEA;EACA,MAAMC,QAAQ,GAAGT,QAAQ,CAACS,QAAQ;EAClC,MAAMA,QAAQ,CAACC,SAAS,CAAC,OAAO,CAAC;EACjC,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,WAAW,CAAC,OAAO,EAAE,CAC7C;IAACC,UAAU,EAAE,MAAM;IAAEC,IAAI,EAAEnB,QAAQ,CAACoB,IAAI;IAAEC,OAAO,EAAE;EAAK,CAAC,EACzD;IAACH,UAAU,EAAE,MAAM;IAAEC,IAAI,EAAEnB,QAAQ,CAACoB,IAAI;IAAEC,OAAO,EAAE;EAAI,CAAC,CAAC,CAAC;EAC9D,IAAIL,IAAI,CAACL,IAAI,KAAK,CAAC,EAAE;IACjBJ,OAAO,CAACK,KAAK,CAACI,IAAI,CAACH,OAAO,CAAC;IAC3B;EACJ;;EAEA;EACA,MAAMS,MAAM,GAAGjB,QAAQ,CAACiB,MAAM;EAC9B,MAAMC,IAAI,GAAG,MAAMD,MAAM,CAACD,OAAO,CAAClB,IAAI,EAAE,YAAY,CAAC;EACrD,IAAGoB,IAAI,CAACZ,IAAI,KAAK,CAAC,EAAE;IAChBJ,OAAO,CAACK,KAAK,CAACW,IAAI,CAACV,OAAO,CAAC;IAC3B;EACJ;EACA,MAAMW,GAAG,GAAI,0CAAyCpB,QAAS,MAAKmB,IAAI,CAACE,MAAO,IAAG;EACnF,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,KAAK,CAACH,GAAG,CAAC;EACtCjB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEkB,IAAI,CAAC;EAClC,IAAGA,IAAI,CAACf,IAAI,KAAK,CAAC,EAAE;IAChBJ,OAAO,CAACK,KAAK,CAACc,IAAI,CAACb,OAAO,CAAC;IAC3B;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}