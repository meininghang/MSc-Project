{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport t from \"axios\";\nimport { createAuth0Client as a } from \"@auth0/auth0-spa-js\";\nimport e from \"jwt-decode\";\nimport n from \"jwk-to-pem\";\nimport { KJUR as r } from \"jsrsasign\";\nimport o from \"crypto-js\";\nasync function s(t) {\n  const a = await crypto.subtle.digest(\"SHA-256\", \"string\" != typeof t ? t : new TextEncoder().encode(t));\n  return Array.from(new Uint8Array(a)).map(t => t.toString(16).padStart(2, \"0\")).join(\"\");\n}\nasync function i(i) {\n  const c = i.API_ID,\n    d = window.location.href;\n  return t({\n    method: \"POST\",\n    url: \"https://server.othent.io/use-othent\",\n    data: {\n      API_ID: c,\n      callbackURL: d\n    }\n  }).then(i => {\n    if (!1 === i.data.success) throw new Error(\"Please specify an API ID (you can get one from Othent.io)\");\n    const d = () => a({\n      domain: \"auth.othent.io\",\n      clientId: \"dyegx4dZj5yOv0v0RkoUsc48CIqaNS6C\",\n      authorizationParams: {\n        redirect_uri: window.location.origin\n      }\n    });\n    function u(t, a) {\n      return t.getTokenSilently({\n        detailedResponse: !0,\n        authorizationParams: a,\n        cacheMode: \"off\"\n      });\n    }\n    async function h(t) {\n      let a;\n      if (t instanceof File) a = await async function (t) {\n        return new Promise((a, e) => {\n          const n = new FileReader();\n          n.onload = () => {\n            const t = n.result,\n              e = Buffer.from(t);\n            a(e);\n          }, n.onerror = e, n.readAsArrayBuffer(t);\n        });\n      }(t);else if (\"string\" == typeof t) a = Buffer.from(t, \"utf8\");else if (Buffer.isBuffer(t)) a = t;else if (t instanceof ArrayBuffer || t instanceof SharedArrayBuffer) a = Buffer.from(t);else {\n        if (!(t instanceof Uint8Array)) throw new Error(\"Invalid data, we accept: string | Buffer | ArrayBuffer | SharedArrayBuffer | Uint8Array | File\");\n        a = Buffer.from(t.buffer);\n      }\n      return a;\n    }\n    return {\n      getAPIID: async function () {\n        const t = await d(),\n          a = {\n            transaction_input: JSON.stringify({\n              othentFunction: \"API_ID\"\n            })\n          },\n          n = (await u(t, a)).id_token,\n          r = e(n);\n        if (r.contract_id) return {\n          API_ID: r.API_ID\n        };\n        throw new Error('{ success: false, message: \"Please create a Othent account\" }');\n      },\n      queryWalletAddressTxns: async function (a) {\n        return await t({\n          method: \"POST\",\n          url: \"https://server.othent.io/query-wallet-address-txns\",\n          data: {\n            walletAddress: a.walletAddress\n          }\n        }).then(t => t.data).catch(t => {\n          throw t;\n        });\n      },\n      ping: async function () {\n        return await t({\n          method: \"GET\",\n          url: \"https://server.othent.io/\"\n        }).then(t => t.data).catch(t => {\n          throw t;\n        });\n      },\n      logIn: async function (a = {}) {\n        var n;\n        null !== (n = a.testNet) && void 0 !== n || (a.testNet = !1);\n        const r = await d(),\n          o = await r.isAuthenticated(),\n          s = {\n            authorizationParams: {\n              transaction_input: JSON.stringify({\n                othentFunction: \"idToken\",\n                testNet: a.testNet\n              }),\n              redirect_uri: window.location.origin\n            }\n          },\n          i = async t => {\n            await r.loginWithPopup(t);\n            const a = {\n                transaction_input: JSON.stringify({\n                  othentFunction: \"idToken\"\n                })\n              },\n              n = await u(r, a),\n              o = e(n.id_token);\n            if ((s = o) && \"string\" == typeof s.contract_id) return {\n              encoded: n.id_token,\n              decoded: o\n            };\n            throw new Error(\"Invalid JWT structure received.\");\n            var s;\n          },\n          h = async (t, a, e) => {\n            if (e ? a.test_net_contract_id : a.contract_id) {\n              return [\"nonce\", \"sid\", \"aud\", \"iss\", \"iat\", \"exp\", \"updated_at\"].forEach(t => delete a[t]), a;\n            }\n            return await l(t, e ? \"testNet\" : \"\");\n          },\n          l = async (a, e = \"\") => (await t({\n            method: \"POST\",\n            url: \"https://server.othent.io/create-user\",\n            data: {\n              JWT: a,\n              API_ID: c,\n              network: e\n            }\n          })).data;\n        if (o) {\n          const {\n            encoded: t,\n            decoded: e\n          } = await i(s);\n          return h(t, e, a.testNet);\n        }\n        try {\n          const {\n            encoded: t,\n            decoded: e\n          } = await i(s);\n          return h(t, e, a.testNet);\n        } catch (t) {\n          throw new Error(\"Your browser is blocking us! Please turn off your shields or allow cross site cookies! :)\");\n        }\n      },\n      logOut: async function () {\n        const t = await d();\n        return await t.logout({\n          logoutParams: {\n            returnTo: window.location.origin\n          }\n        }), {\n          response: \"User logged out\"\n        };\n      },\n      userDetails: async function () {\n        const t = await d(),\n          a = {\n            transaction_input: JSON.stringify({\n              othentFunction: \"idToken\"\n            })\n          },\n          n = (await u(t, a)).id_token,\n          r = e(n);\n        if (r.contract_id) return delete r.nonce, delete r.sid, delete r.aud, delete r.iss, delete r.iat, delete r.exp, delete r.updated_at, r;\n        throw new Error('{ success: false, message: \"Please create a Othent account\" }');\n      },\n      readContract: async function () {\n        const a = await d(),\n          e = {\n            transaction_input: JSON.stringify({\n              othentFunction: \"idToken\"\n            })\n          },\n          n = (await u(a, e)).id_token;\n        return await t({\n          method: \"POST\",\n          url: \"https://server.othent.io/read-contract\",\n          data: {\n            JWT: n\n          }\n        }).then(t => t.data).catch(t => {\n          throw console.log(t.response.data), t;\n        });\n      },\n      viewCustomContract: async function (a) {\n        var e, n;\n        let r;\n        return null !== (e = a.tags) && void 0 !== e || (a.tags = []), null !== (n = a.testNet) && void 0 !== n || (a.testNet = !1), r = !0 === a.testNet ? \"testNet\" : \"mainNet\", await t({\n          method: \"POST\",\n          url: \"https://server.othent.io/view-custom-contract-state\",\n          data: {\n            contract_id: a.contract_id,\n            func: a.function,\n            data: a.tags,\n            network: r\n          }\n        }).then(t => t.data).catch(t => {\n          throw console.log(t.response.data), t;\n        });\n      },\n      signTransactionWarp: async function (t) {\n        var a, n;\n        null !== (a = t.tags) && void 0 !== a || (t.tags = []), null !== (n = t.testNet) && void 0 !== n || (t.testNet = !1);\n        const r = {\n            function: t.othentFunction,\n            data: {\n              toContractId: t.data.toContractId,\n              toContractFunction: t.data.toContractFunction,\n              txnData: t.data.txnData\n            }\n          },\n          o = await d(),\n          s = {\n            transaction_input: JSON.stringify({\n              othentFunction: t.othentFunction,\n              warpData: r,\n              testNet: t.testNet\n            })\n          },\n          i = await u(o, s),\n          c = i.id_token,\n          h = e(c);\n        if (!h.contract_id) throw new Error('{success: false, message:\"Please create a Othent account\"}');\n        if (!0 === t.testNet && !h.test_net_contract_id) throw new Error('{success: false, message:\"Please create a Othent test net account\"}');\n        return {\n          JWT: i.id_token,\n          tags: t.tags,\n          testNet: t.testNet\n        };\n      },\n      sendTransactionWarp: async function (a) {\n        const e = a.JWT,\n          n = a.tags;\n        let r;\n        return r = !0 === a.testNet ? \"testNet\" : \"mainNet\", await t({\n          method: \"POST\",\n          url: \"https://server.othent.io/send-transaction\",\n          data: {\n            JWT: e,\n            tags: n,\n            API_ID: c,\n            network: r\n          }\n        }).then(t => t.data).catch(t => {\n          throw console.log(t.response.data), t;\n        });\n      },\n      signTransactionArweave: async function (t) {\n        var a;\n        null !== (a = t.tags) && void 0 !== a || (t.tags = []);\n        const n = await h(t.data);\n        if (!n) throw new Error(\"Invalid data, we accept: string | Buffer | ArrayBuffer | SharedArrayBuffer | Uint8Array | File\");\n        const r = await s(n),\n          o = await d(),\n          i = {\n            transaction_input: JSON.stringify({\n              othentFunction: t.othentFunction,\n              file_hash: r\n            })\n          },\n          c = await u(o, i),\n          l = c.id_token;\n        if (!e(l).contract_id) throw new Error('{ success: false, message: \"Please create a Othent account\" }');\n        return {\n          data: n,\n          JWT: c.id_token,\n          tags: t.tags\n        };\n      },\n      sendTransactionArweave: async function (t) {\n        const a = t.data,\n          e = new Blob([a]),\n          n = new FormData();\n        return n.append(\"file\", e), n.append(\"dataHashJWT\", t.JWT), n.append(\"API_ID\", c), n.append(\"tags\", JSON.stringify(t.tags)), await fetch(\"https://server.othent.io/upload-data-arweave\", {\n          method: \"POST\",\n          body: n\n        }).then(t => t.json()).then(t => t).catch(t => {\n          throw console.log(t), t;\n        });\n      },\n      signTransactionBundlr: async function (t) {\n        var a;\n        null !== (a = t.tags) && void 0 !== a || (t.tags = []);\n        const n = await h(t.data);\n        if (!n) throw new Error(\"Invalid data, we accept: string | Buffer | ArrayBuffer | SharedArrayBuffer | Uint8Array | File\");\n        const r = await s(n),\n          o = await d(),\n          i = {\n            transaction_input: JSON.stringify({\n              othentFunction: t.othentFunction,\n              file_hash: r\n            })\n          },\n          c = await u(o, i),\n          l = c.id_token;\n        if (!e(l).contract_id) throw new Error('{ success: false, message: \"Please create a Othent account\" }');\n        return {\n          data: n,\n          JWT: c.id_token,\n          tags: t.tags\n        };\n      },\n      sendTransactionBundlr: async function (t) {\n        const a = t.data,\n          e = new Blob([a]),\n          n = new FormData();\n        return n.append(\"file\", e), n.append(\"dataHashJWT\", t.JWT), n.append(\"API_ID\", c), n.append(\"tags\", JSON.stringify(t.tags)), await fetch(\"https://server.othent.io/upload-data-bundlr\", {\n          method: \"POST\",\n          body: n\n        }).then(t => t.json()).then(t => t).catch(t => {\n          throw console.log(t), t;\n        });\n      },\n      initializeJWK: async function (a) {\n        const e = a.privateKey,\n          r = JSON.stringify(e),\n          o = JSON.parse(r),\n          s = n(o),\n          i = await d(),\n          h = {\n            transaction_input: JSON.stringify({\n              othentFunction: \"initializeJWK\",\n              warpData: {\n                function: \"initializeJWK\",\n                data: {\n                  JWK_public_key_PEM: s,\n                  JWK_public_key: null\n                }\n              }\n            })\n          },\n          l = (await u(i, h)).id_token;\n        return t({\n          method: \"POST\",\n          url: \"https://server.othent.io/initialize-JWK\",\n          data: {\n            PEM_key_JWT: l,\n            API_ID: c\n          }\n        }).then(t => t.data).catch(t => {\n          throw console.log(t.response.data), t;\n        });\n      },\n      JWKBackupTxn: async function (a) {\n        const e = {\n            iat: Math.floor(Date.now() / 1e3),\n            sub: a.sub,\n            contract_id: a.contract_id,\n            tags: a.tags,\n            contract_input: {\n              data: a.data,\n              othentFunction: a.othentFunction\n            }\n          },\n          o = a.privateKey,\n          s = n(o, {\n            private: !0\n          }),\n          i = {\n            alg: \"RS256\",\n            typ: \"JWT\",\n            exp: Math.floor(Date.now() / 1e3) + 3600\n          },\n          d = r.jws.JWS.sign(\"RS256\", JSON.stringify(i), JSON.stringify(e), s);\n        return await t({\n          method: \"POST\",\n          url: \"https://server.othent.io/JWK-backup-transaction\",\n          data: {\n            JWK_signed_JWT: d,\n            API_ID: c\n          }\n        }).then(t => t.data).catch(t => {\n          throw console.log(t.response.data), t;\n        });\n      },\n      readCustomContract: async function (a) {\n        var e;\n        let n;\n        return null !== (e = a.testNet) && void 0 !== e || (a.testNet = !1), n = !0 === a.testNet ? \"testNet\" : \"mainNet\", await t({\n          method: \"POST\",\n          url: \"https://server.othent.io/read-custom-contract\",\n          data: {\n            contract_id: a.contract_id,\n            network: n\n          }\n        }).then(t => t.data).catch(t => {\n          throw console.log(t.response.data), t;\n        });\n      },\n      verifyArweaveData: async function (a) {\n        let n,\n          r = await fetch(`https://arweave.net/tx/${a.transactionId}`, {\n            headers: {\n              responseType: \"arraybuffer\"\n            }\n          });\n        (await r.json()).tags.map(t => {\n          \"File-Hash-JWT\" === atob(t.name) && (n = e(atob(t.value)));\n        });\n        const o = n.file_hash;\n        let i = (await t.get(`https://arweave.net/${a.transactionId}`, {\n          responseType: \"arraybuffer\"\n        })).data;\n        const c = await s(i);\n        return o === c ? {\n          validData: !0,\n          contract_id: n.contract_id,\n          onChainHash: c,\n          tagHash: o,\n          iat: n.iat,\n          userId: n.sub\n        } : {\n          validData: !1,\n          onChainHash: c,\n          tagHash: o\n        };\n      },\n      verifyBundlrData: async function (a) {\n        let n,\n          r = await fetch(`https://gateway.bundlr.network/tx/${a.transactionId}`, {\n            headers: {\n              responseType: \"arraybuffer\"\n            }\n          });\n        (await r.json()).tags.map(t => {\n          \"File-Hash-JWT\" === t.name && (n = e(t.value));\n        });\n        const o = n.file_hash;\n        let i = (await t.get(`https://arweave.net/${a.transactionId}`, {\n          responseType: \"arraybuffer\"\n        })).data;\n        const c = await s(i);\n        return o === c ? {\n          validData: !0,\n          contract_id: n.contract_id,\n          onChainHash: c,\n          tagHash: o,\n          iat: n.iat,\n          userId: n.sub\n        } : {\n          validData: !1,\n          onChainHash: c,\n          tagHash: o\n        };\n      },\n      encryptData: async function (t) {\n        const a = t.data,\n          e = t.key;\n        return {\n          encryptedData: o.AES.encrypt(a, e).toString()\n        };\n      },\n      decryptData: async function (t) {\n        const a = t.data,\n          e = t.key,\n          n = o.AES.decrypt(a, e);\n        return {\n          decryptedData: o.enc.Utf8.stringify(n)\n        };\n      },\n      deployWarpContract: async function (a) {\n        var e, n;\n        let r;\n        null !== (e = a.tags) && void 0 !== e || (a.tags = []), null !== (n = a.testNet) && void 0 !== n || (a.testNet = !1), r = !0 === a.testNet ? \"testNet\" : \"mainNet\";\n        const o = await s(a.contractSrc),\n          i = await d(),\n          c = {\n            transaction_input: JSON.stringify({\n              othentFunction: \"uploadData\",\n              file_hash: o\n            })\n          },\n          h = (await u(i, c)).id_token;\n        return await t({\n          method: \"POST\",\n          url: \"https://server.othent.io/deploy-warp-contract\",\n          data: {\n            contractSrc: a.contractSrc,\n            contractState: a.state,\n            JWT: h,\n            tags: a.tags,\n            network: r\n          }\n        }).then(t => t.data).catch(t => {\n          throw console.log(t.response.data), t;\n        });\n      },\n      deployWarpContractFromTx: async function (a) {\n        var e, n;\n        let r;\n        null !== (e = a.tags) && void 0 !== e || (a.tags = []), null !== (n = a.testNet) && void 0 !== n || (a.testNet = !1), r = !0 === a.testNet ? \"testNet\" : \"mainNet\";\n        const o = await d(),\n          s = {\n            transaction_input: JSON.stringify({\n              othentFunction: \"deployWarpContractFromTx\",\n              srcTxId: a.srcTxId\n            })\n          },\n          i = (await u(o, s)).id_token;\n        return await t({\n          method: \"POST\",\n          url: \"https://server.othent.io/deploy-warp-contract-from-tx\",\n          data: {\n            srcTxId: a.srcTxId,\n            contractState: a.state,\n            JWT: i,\n            tags: a.tags,\n            network: r\n          }\n        }).then(t => t.data).catch(t => {\n          throw console.log(t.response.data), t;\n        });\n      }\n    };\n  }).catch(t => {\n    throw console.error(\"An error occurred:\", t), t;\n  });\n}\nexport { i as Othent };","map":{"version":3,"names":["s","t","a","crypto","subtle","digest","TextEncoder","encode","Array","from","Uint8Array","map","toString","padStart","join","i","c","API_ID","d","window","location","href","method","url","data","callbackURL","then","success","Error","getAuth0Client","domain","clientId","authorizationParams","redirect_uri","origin","u","getTokenSilently","detailedResponse","cacheMode","h","File","Promise","e","n","FileReader","onload","result","Buffer","onerror","readAsArrayBuffer","isBuffer","ArrayBuffer","SharedArrayBuffer","buffer","getAPIID","transaction_input","JSON","stringify","othentFunction","id_token","r","contract_id","queryWalletAddressTxns","walletAddress","catch","ping","logIn","testNet","o","isAuthenticated","loginWithPopup","encoded","decoded","test_net_contract_id","forEach","l","JWT","network","logOut","logout","logoutParams","returnTo","response","userDetails","nonce","sid","aud","iss","iat","exp","updated_at","readContract","console","log","viewCustomContract","tags","func","function","signTransactionWarp","toContractId","toContractFunction","txnData","warpData","sendTransactionWarp","signTransactionArweave","file_hash","sendTransactionArweave","Blob","FormData","append","fetch","body","json","signTransactionBundlr","sendTransactionBundlr","initializeJWK","privateKey","parse","JWK_public_key_PEM","JWK_public_key","PEM_key_JWT","JWKBackupTxn","Math","floor","Date","now","sub","contract_input","private","alg","typ","jws","JWS","sign","JWK_signed_JWT","readCustomContract","verifyArweaveData","transactionId","headers","responseType","atob","name","value","get","validData","onChainHash","tagHash","userId","verifyBundlrData","encryptData","key","encryptedData","AES","encrypt","decryptData","decrypt","decryptedData","enc","Utf8","deployWarpContract","contractSrc","contractState","state","deployWarpContractFromTx","srcTxId","error","Othent"],"sources":["../src/lib/index.ts"],"sourcesContent":["import axios from 'axios';\nimport { createAuth0Client } from '@auth0/auth0-spa-js';\nimport jwt_decode from 'jwt-decode';\nimport jwkToPem from 'jwk-to-pem';\nimport { KJUR } from 'jsrsasign';\nimport CryptoJS from 'crypto-js';\n// sha256\nasync function sha256(message) {\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", typeof message != \"string\" ? message : new TextEncoder().encode(message));\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray\n        .map((b) => b.toString(16).padStart(2, \"0\"))\n        .join(\"\"); // convert bytes to hex string\n    return hashHex;\n}\n// Othent\nexport async function Othent(params) {\n    const API_ID = params.API_ID;\n    const callbackURL = window.location.href;\n    return axios({\n        method: 'POST',\n        url: 'https://server.othent.io/use-othent',\n        data: { API_ID, callbackURL }\n    })\n        .then((API_valid) => {\n        if (API_valid.data.success === false) {\n            throw new Error('Please specify an API ID (you can get one from Othent.io)');\n        }\n        // auth0\n        const getAuth0Client = () => createAuth0Client({\n            domain: \"auth.othent.io\",\n            clientId: \"dyegx4dZj5yOv0v0RkoUsc48CIqaNS6C\",\n            authorizationParams: {\n                redirect_uri: window.location.origin\n            }\n        });\n        function getTokenSilently(auth0, authParams) {\n            return auth0.getTokenSilently({\n                detailedResponse: true,\n                authorizationParams: authParams,\n                cacheMode: 'off'\n            });\n        }\n        // get API keys\n        async function getAPIID() {\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({ othentFunction: \"API_ID\" }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const JWT = accessToken.id_token;\n            const decoded_JWT = jwt_decode(JWT);\n            if (decoded_JWT.contract_id) {\n                return { API_ID: decoded_JWT.API_ID };\n            }\n            else {\n                throw new Error(`{ success: false, message: \"Please create a Othent account\" }`);\n            }\n        }\n        // process data\n        async function processData(data) {\n            let dataBuffer;\n            if (data instanceof File) {\n                dataBuffer = await readFileData(data);\n            }\n            else if (typeof data === 'string') {\n                dataBuffer = Buffer.from(data, 'utf8');\n            }\n            else if (Buffer.isBuffer(data)) {\n                dataBuffer = data;\n            }\n            else if (data instanceof ArrayBuffer || data instanceof SharedArrayBuffer) {\n                dataBuffer = Buffer.from(data);\n            }\n            else if (data instanceof Uint8Array) {\n                dataBuffer = Buffer.from(data.buffer);\n            }\n            else {\n                throw new Error('Invalid data, we accept: string | Buffer | ArrayBuffer | SharedArrayBuffer | Uint8Array | File');\n            }\n            return dataBuffer;\n        }\n        // query a wallet addresses transactions\n        async function queryWalletAddressTxns(params) {\n            return await axios({\n                method: 'POST',\n                url: 'https://server.othent.io/query-wallet-address-txns',\n                data: { walletAddress: params.walletAddress }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                throw error;\n            });\n        }\n        // ping server\n        async function ping() {\n            return await axios({\n                method: 'GET',\n                url: 'https://server.othent.io/',\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                throw error;\n            });\n        }\n        async function userDetails() {\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({ othentFunction: \"idToken\" }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const JWT = accessToken.id_token;\n            const decoded_JWT = jwt_decode(JWT);\n            if (decoded_JWT.contract_id) {\n                delete decoded_JWT.nonce;\n                delete decoded_JWT.sid;\n                delete decoded_JWT.aud;\n                delete decoded_JWT.iss;\n                delete decoded_JWT.iat;\n                delete decoded_JWT.exp;\n                delete decoded_JWT.updated_at;\n                return decoded_JWT;\n            }\n            else {\n                throw new Error(`{ success: false, message: \"Please create a Othent account\" }`);\n            }\n        }\n        // log in\n        async function logIn(params = {}) {\n            var _a;\n            (_a = params.testNet) !== null && _a !== void 0 ? _a : (params.testNet = false);\n            const auth0 = await getAuth0Client();\n            const isAuthenticated = await auth0.isAuthenticated();\n            const baseOptions = {\n                authorizationParams: {\n                    transaction_input: JSON.stringify({\n                        othentFunction: \"idToken\",\n                        testNet: params.testNet\n                    }),\n                    redirect_uri: window.location.origin\n                }\n            };\n            function isDecodedJWT(obj) {\n                return obj && typeof obj.contract_id === 'string';\n            }\n            const loginAndGetDecodedJWT = async (options) => {\n                await auth0.loginWithPopup(options);\n                const authParams = { transaction_input: JSON.stringify({ othentFunction: \"idToken\" }) };\n                const accessToken = await getTokenSilently(auth0, authParams);\n                const jwtObj = jwt_decode(accessToken.id_token);\n                if (isDecodedJWT(jwtObj)) {\n                    return { encoded: accessToken.id_token, decoded: jwtObj };\n                }\n                else {\n                    throw new Error('Invalid JWT structure received.');\n                }\n            };\n            const processDecodedJWT = async (encoded_JWT, decoded_JWT, isTestNet) => {\n                if (isTestNet ? decoded_JWT.test_net_contract_id : decoded_JWT.contract_id) {\n                    const fieldsToDelete = ['nonce', 'sid', 'aud', 'iss', 'iat', 'exp', 'updated_at'];\n                    fieldsToDelete.forEach(field => delete decoded_JWT[field]);\n                    return decoded_JWT;\n                }\n                return await createUserOnServer(encoded_JWT, isTestNet ? 'testNet' : ''); // send encoded JWT\n            };\n            const createUserOnServer = async (encoded_JWT, network = '') => {\n                const response = await axios({\n                    method: 'POST',\n                    url: 'https://server.othent.io/create-user',\n                    data: { JWT: encoded_JWT, API_ID, network }\n                });\n                return response.data;\n            };\n            if (isAuthenticated) {\n                const { encoded, decoded } = await loginAndGetDecodedJWT(baseOptions);\n                return processDecodedJWT(encoded, decoded, params.testNet);\n            }\n            else {\n                try {\n                    const { encoded, decoded } = await loginAndGetDecodedJWT(baseOptions);\n                    return processDecodedJWT(encoded, decoded, params.testNet);\n                }\n                catch (error) {\n                    throw new Error('Your browser is blocking us! Please turn off your shields or allow cross site cookies! :)');\n                }\n            }\n        }\n        // log out\n        async function logOut() {\n            const auth0 = await getAuth0Client();\n            await auth0.logout({\n                logoutParams: {\n                    returnTo: window.location.origin\n                }\n            });\n            return { response: 'User logged out' };\n        }\n        // read contract\n        async function readContract() {\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({ othentFunction: \"idToken\" }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const JWT = accessToken.id_token;\n            return await axios({\n                method: 'POST',\n                url: 'https://server.othent.io/read-contract',\n                data: { JWT }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                console.log(error.response.data);\n                throw error;\n            });\n        }\n        // sign transaction warp\n        async function signTransactionWarp(params) {\n            var _a, _b;\n            (_a = params.tags) !== null && _a !== void 0 ? _a : (params.tags = []);\n            (_b = params.testNet) !== null && _b !== void 0 ? _b : (params.testNet = false);\n            const warpData = {\n                function: params.othentFunction,\n                data: {\n                    toContractId: params.data.toContractId,\n                    toContractFunction: params.data.toContractFunction,\n                    txnData: params.data.txnData\n                }\n            };\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({\n                    othentFunction: params.othentFunction,\n                    warpData: warpData,\n                    testNet: params.testNet\n                }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const JWT = accessToken.id_token;\n            const decoded_JWT = jwt_decode(JWT);\n            if (!decoded_JWT.contract_id) {\n                throw new Error(`{success: false, message:\"Please create a Othent account\"}`);\n            }\n            if (params.testNet === true && !decoded_JWT.test_net_contract_id) {\n                throw new Error(`{success: false, message:\"Please create a Othent test net account\"}`);\n            }\n            return { JWT: accessToken.id_token, tags: params.tags, testNet: params.testNet };\n        }\n        // send transaction - Warp\n        async function sendTransactionWarp(params) {\n            const JWT = params.JWT;\n            const tags = params.tags;\n            let networkType;\n            if (params.testNet === true) {\n                networkType = 'testNet';\n            }\n            else {\n                networkType = 'mainNet';\n            }\n            return await axios({\n                method: 'POST',\n                url: 'https://server.othent.io/send-transaction',\n                data: { JWT, tags, API_ID, network: networkType }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                console.log(error.response.data);\n                throw error;\n            });\n        }\n        // sign functions (AR+Bndlr) readFileData\n        async function readFileData(file) {\n            return new Promise((resolve, reject) => {\n                const reader = new FileReader();\n                reader.onload = () => {\n                    const fileData = reader.result;\n                    const buffer = Buffer.from(fileData);\n                    resolve(buffer);\n                };\n                reader.onerror = reject;\n                reader.readAsArrayBuffer(file);\n            });\n        }\n        // sign transaction arweave\n        async function signTransactionArweave(params) {\n            var _a;\n            (_a = params.tags) !== null && _a !== void 0 ? _a : (params.tags = []);\n            const dataBuffer = await processData(params.data);\n            if (!dataBuffer) {\n                throw new Error('Invalid data, we accept: string | Buffer | ArrayBuffer | SharedArrayBuffer | Uint8Array | File');\n            }\n            const file_hash = await sha256(dataBuffer);\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({\n                    othentFunction: params.othentFunction,\n                    file_hash: file_hash\n                }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const JWT = accessToken.id_token;\n            const decoded_JWT = jwt_decode(JWT);\n            if (!decoded_JWT.contract_id) {\n                throw new Error(`{ success: false, message: \"Please create a Othent account\" }`);\n            }\n            return { data: dataBuffer, JWT: accessToken.id_token, tags: params.tags };\n        }\n        // send transaction - Arweave\n        async function sendTransactionArweave(params) {\n            const data = params.data;\n            const blob = new Blob([data]);\n            const formData = new FormData();\n            formData.append('file', blob);\n            formData.append('dataHashJWT', params.JWT);\n            formData.append('API_ID', API_ID);\n            formData.append('tags', JSON.stringify(params.tags));\n            return await fetch('https://server.othent.io/upload-data-arweave', {\n                method: 'POST',\n                body: formData\n            })\n                .then(response => {\n                return response.json();\n            })\n                .then(data => {\n                return data;\n            })\n                .catch(error => {\n                console.log(error);\n                throw error;\n            });\n        }\n        // sign transaction - bundlr\n        async function signTransactionBundlr(params) {\n            var _a;\n            (_a = params.tags) !== null && _a !== void 0 ? _a : (params.tags = []);\n            const dataBuffer = await processData(params.data);\n            if (!dataBuffer) {\n                throw new Error('Invalid data, we accept: string | Buffer | ArrayBuffer | SharedArrayBuffer | Uint8Array | File');\n            }\n            const file_hash = await sha256(dataBuffer);\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({\n                    othentFunction: params.othentFunction,\n                    file_hash: file_hash\n                }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const JWT = accessToken.id_token;\n            const decoded_JWT = jwt_decode(JWT);\n            if (!decoded_JWT.contract_id) {\n                throw new Error(`{ success: false, message: \"Please create a Othent account\" }`);\n            }\n            return { data: dataBuffer, JWT: accessToken.id_token, tags: params.tags };\n        }\n        // send transaction - bundlr\n        async function sendTransactionBundlr(params) {\n            const data = params.data;\n            const blob = new Blob([data]);\n            const formData = new FormData();\n            formData.append(\"file\", blob);\n            formData.append(\"dataHashJWT\", params.JWT);\n            formData.append(\"API_ID\", API_ID);\n            formData.append(\"tags\", JSON.stringify(params.tags));\n            return await fetch(\"https://server.othent.io/upload-data-bundlr\", {\n                method: \"POST\",\n                body: formData,\n            })\n                .then((response) => {\n                return response.json();\n            })\n                .then((data) => {\n                return data;\n            })\n                .catch((error) => {\n                console.log(error);\n                throw error;\n            });\n        }\n        // backup keyfile\n        async function initializeJWK(params) {\n            const privateKey = params.privateKey;\n            const key = JSON.stringify(privateKey);\n            const key1 = JSON.parse(key);\n            const JWK_public_key = null;\n            const JWK_public_key_PEM = jwkToPem(key1);\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({\n                    othentFunction: 'initializeJWK',\n                    warpData: { function: 'initializeJWK', data: { JWK_public_key_PEM, JWK_public_key } }\n                }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const PEM_key_JWT = accessToken.id_token;\n            return axios({\n                method: 'POST',\n                url: 'https://server.othent.io/initialize-JWK',\n                data: { PEM_key_JWT, API_ID }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                console.log(error.response.data);\n                throw error;\n            });\n        }\n        // JWK backup transaction\n        async function JWKBackupTxn(params) {\n            const payload = {\n                iat: Math.floor(Date.now() / 1000),\n                sub: params.sub,\n                contract_id: params.contract_id,\n                tags: params.tags,\n                contract_input: {\n                    data: params.data,\n                    othentFunction: params.othentFunction\n                }\n            };\n            const privateKey = params.privateKey;\n            const privatePem = jwkToPem(privateKey, { private: true });\n            const header = { alg: 'RS256', typ: 'JWT', exp: Math.floor(Date.now() / 1000) + (60 * 60) };\n            const JWK_signed_JWT = KJUR.jws.JWS.sign('RS256', JSON.stringify(header), JSON.stringify(payload), privatePem);\n            return await axios({\n                method: 'POST',\n                url: 'https://server.othent.io/JWK-backup-transaction',\n                data: { JWK_signed_JWT, API_ID }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                console.log(error.response.data);\n                throw error;\n            });\n        }\n        // Read custom contract\n        async function readCustomContract(params) {\n            var _a;\n            (_a = params.testNet) !== null && _a !== void 0 ? _a : (params.testNet = false);\n            let networkType;\n            if (params.testNet === true) {\n                networkType = 'testNet';\n            }\n            else {\n                networkType = 'mainNet';\n            }\n            return await axios({\n                method: 'POST',\n                url: 'https://server.othent.io/read-custom-contract',\n                data: { contract_id: params.contract_id, network: networkType }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                console.log(error.response.data);\n                throw error;\n            });\n        }\n        // View custom contract\n        async function viewCustomContract(params) {\n            var _a, _b;\n            (_a = params.tags) !== null && _a !== void 0 ? _a : (params.tags = []);\n            (_b = params.testNet) !== null && _b !== void 0 ? _b : (params.testNet = false);\n            let networkType;\n            if (params.testNet === true) {\n                networkType = 'testNet';\n            }\n            else {\n                networkType = 'mainNet';\n            }\n            return await axios({\n                method: 'POST',\n                url: 'https://server.othent.io/view-custom-contract-state',\n                data: { contract_id: params.contract_id, func: params.function, data: params.tags, network: networkType, }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                console.log(error.response.data);\n                throw error;\n            });\n        }\n        async function verifyArweaveData(params) {\n            let getTagHash = await fetch(`https://arweave.net/tx/${params.transactionId}`, {\n                headers: {\n                    responseType: 'arraybuffer'\n                }\n            });\n            let decodedVerifyJWT;\n            const getTagHashJson = await getTagHash.json();\n            getTagHashJson.tags.map((tag) => {\n                if (atob(tag.name) === 'File-Hash-JWT') {\n                    decodedVerifyJWT = jwt_decode(atob(tag.value));\n                }\n            });\n            const tagHash = decodedVerifyJWT.file_hash;\n            let axiosResponse = await axios.get(`https://arweave.net/${params.transactionId}`, {\n                responseType: 'arraybuffer'\n            });\n            let getOnChainData = axiosResponse.data;\n            const onChainHash = await sha256(getOnChainData);\n            if (tagHash === onChainHash) {\n                return {\n                    validData: true,\n                    contract_id: decodedVerifyJWT.contract_id,\n                    onChainHash: onChainHash,\n                    tagHash: tagHash,\n                    iat: decodedVerifyJWT.iat,\n                    userId: decodedVerifyJWT.sub\n                };\n            }\n            else {\n                return {\n                    validData: false,\n                    onChainHash: onChainHash,\n                    tagHash: tagHash\n                };\n            }\n        }\n        // Verify bundlr data\n        async function verifyBundlrData(params) {\n            let getTagHash = await fetch(`https://gateway.bundlr.network/tx/${params.transactionId}`, {\n                headers: {\n                    responseType: 'arraybuffer'\n                }\n            });\n            let decodedVerifyJWT;\n            const getTagHashJson = await getTagHash.json();\n            getTagHashJson.tags.map((tag) => {\n                if (tag.name === 'File-Hash-JWT') {\n                    decodedVerifyJWT = jwt_decode(tag.value);\n                }\n            });\n            const tagHash = decodedVerifyJWT.file_hash;\n            let axiosResponse = await axios.get(`https://arweave.net/${params.transactionId}`, {\n                responseType: 'arraybuffer'\n            });\n            let getOnChainData = axiosResponse.data;\n            const onChainHash = await sha256(getOnChainData);\n            if (tagHash === onChainHash) {\n                return {\n                    validData: true,\n                    contract_id: decodedVerifyJWT.contract_id,\n                    onChainHash: onChainHash,\n                    tagHash: tagHash,\n                    iat: decodedVerifyJWT.iat,\n                    userId: decodedVerifyJWT.sub\n                };\n            }\n            else {\n                return {\n                    validData: false,\n                    onChainHash: onChainHash,\n                    tagHash: tagHash\n                };\n            }\n        }\n        // encrypt data\n        async function encryptData(params) {\n            const data = params.data;\n            const key = params.key;\n            const encryptedData = CryptoJS.AES.encrypt(data, key).toString();\n            return { encryptedData: encryptedData };\n        }\n        // decrypt data\n        async function decryptData(params) {\n            const data = params.data;\n            const key = params.key;\n            const bytes = CryptoJS.AES.decrypt(data, key);\n            const decryptedData = CryptoJS.enc.Utf8.stringify(bytes);\n            return { decryptedData: decryptedData };\n        }\n        // Deploy a Warp contract\n        async function deployWarpContract(params) {\n            var _a, _b;\n            (_a = params.tags) !== null && _a !== void 0 ? _a : (params.tags = []);\n            (_b = params.testNet) !== null && _b !== void 0 ? _b : (params.testNet = false);\n            let networkType;\n            if (params.testNet === true) {\n                networkType = 'testNet';\n            }\n            else {\n                networkType = 'mainNet';\n            }\n            const file_hash = await sha256(params.contractSrc);\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({\n                    othentFunction: 'uploadData',\n                    file_hash: file_hash\n                }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const JWT = accessToken.id_token;\n            return await axios({\n                method: 'POST',\n                url: 'https://server.othent.io/deploy-warp-contract',\n                data: {\n                    contractSrc: params.contractSrc,\n                    contractState: params.state,\n                    JWT: JWT,\n                    tags: params.tags,\n                    network: networkType\n                }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                console.log(error.response.data);\n                throw error;\n            });\n        }\n        // Deploy a Warp contract from transaction\n        async function deployWarpContractFromTx(params) {\n            var _a, _b;\n            (_a = params.tags) !== null && _a !== void 0 ? _a : (params.tags = []);\n            (_b = params.testNet) !== null && _b !== void 0 ? _b : (params.testNet = false);\n            let networkType;\n            if (params.testNet === true) {\n                networkType = 'testNet';\n            }\n            else {\n                networkType = 'mainNet';\n            }\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({\n                    othentFunction: 'deployWarpContractFromTx',\n                    srcTxId: params.srcTxId,\n                }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const JWT = accessToken.id_token;\n            return await axios({\n                method: 'POST',\n                url: 'https://server.othent.io/deploy-warp-contract-from-tx',\n                data: {\n                    srcTxId: params.srcTxId,\n                    contractState: params.state,\n                    JWT: JWT,\n                    tags: params.tags,\n                    network: networkType\n                }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                console.log(error.response.data);\n                throw error;\n            });\n        }\n        return {\n            getAPIID,\n            queryWalletAddressTxns,\n            ping,\n            logIn,\n            logOut,\n            userDetails,\n            readContract,\n            viewCustomContract,\n            signTransactionWarp,\n            sendTransactionWarp,\n            signTransactionArweave,\n            sendTransactionArweave,\n            signTransactionBundlr,\n            sendTransactionBundlr,\n            initializeJWK,\n            JWKBackupTxn,\n            readCustomContract,\n            verifyArweaveData,\n            verifyBundlrData,\n            encryptData,\n            decryptData,\n            deployWarpContract,\n            deployWarpContractFromTx\n        };\n    })\n        .catch((error) => {\n        console.error('An error occurred:', error);\n        throw error;\n    });\n}\nexport default { Othent };\n//# sourceMappingURL=index.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}