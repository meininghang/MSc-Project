{"ast":null,"code":"import _classPrivateFieldInitSpec from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport { assertArgument } from \"../utils/index.js\";\nimport { JsonRpcApiPollingProvider } from \"./provider-jsonrpc.js\";\n;\n/**\n *  A **BrowserProvider** is intended to wrap an injected provider which\n *  adheres to the [[link-eip-1193]] standard, which most (if not all)\n *  currently do.\n */\nvar _request = /*#__PURE__*/new WeakMap();\nexport class BrowserProvider extends JsonRpcApiPollingProvider {\n  /**\n   *  Connnect to the %%ethereum%% provider, optionally forcing the\n   *  %%network%%.\n   */\n  constructor(ethereum, network) {\n    super(network, {\n      batchMaxCount: 1\n    });\n    _classPrivateFieldInitSpec(this, _request, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _request, async (method, params) => {\n      const payload = {\n        method,\n        params\n      };\n      this.emit(\"debug\", {\n        action: \"sendEip1193Request\",\n        payload\n      });\n      try {\n        const result = await ethereum.request(payload);\n        this.emit(\"debug\", {\n          action: \"receiveEip1193Result\",\n          result\n        });\n        return result;\n      } catch (e) {\n        const error = new Error(e.message);\n        error.code = e.code;\n        error.data = e.data;\n        error.payload = payload;\n        this.emit(\"debug\", {\n          action: \"receiveEip1193Error\",\n          error\n        });\n        throw error;\n      }\n    });\n  }\n  async send(method, params) {\n    await this._start();\n    return await super.send(method, params);\n  }\n  async _send(payload) {\n    assertArgument(!Array.isArray(payload), \"EIP-1193 does not support batch request\", \"payload\", payload);\n    try {\n      const result = await _classPrivateFieldGet(this, _request).call(this, payload.method, payload.params || []);\n      return [{\n        id: payload.id,\n        result\n      }];\n    } catch (e) {\n      return [{\n        id: payload.id,\n        error: {\n          code: e.code,\n          data: e.data,\n          message: e.message\n        }\n      }];\n    }\n  }\n  getRpcError(payload, error) {\n    error = JSON.parse(JSON.stringify(error));\n    // EIP-1193 gives us some machine-readable error codes, so rewrite\n    // them into \n    switch (error.error.code || -1) {\n      case 4001:\n        error.error.message = `ethers-user-denied: ${error.error.message}`;\n        break;\n      case 4200:\n        error.error.message = `ethers-unsupported: ${error.error.message}`;\n        break;\n    }\n    return super.getRpcError(payload, error);\n  }\n  /**\n   *  Resolves to ``true`` if the provider manages the %%address%%.\n   */\n  async hasSigner(address) {\n    if (address == null) {\n      address = 0;\n    }\n    const accounts = await this.send(\"eth_accounts\", []);\n    if (typeof address === \"number\") {\n      return accounts.length > address;\n    }\n    address = address.toLowerCase();\n    return accounts.filter(a => a.toLowerCase() === address).length !== 0;\n  }\n  async getSigner(address) {\n    if (address == null) {\n      address = 0;\n    }\n    if (!(await this.hasSigner(address))) {\n      try {\n        //const resp = \n        await _classPrivateFieldGet(this, _request).call(this, \"eth_requestAccounts\", []);\n        //console.log(\"RESP\", resp);\n      } catch (error) {\n        const payload = error.payload;\n        throw this.getRpcError(payload, {\n          id: payload.id,\n          error\n        });\n      }\n    }\n    return await super.getSigner(address);\n  }\n}","map":{"version":3,"names":["assertArgument","JsonRpcApiPollingProvider","_request","WeakMap","BrowserProvider","constructor","ethereum","network","batchMaxCount","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","method","params","payload","emit","action","result","request","e","error","Error","message","code","data","send","_start","_send","Array","isArray","_classPrivateFieldGet","call","id","getRpcError","JSON","parse","stringify","hasSigner","address","accounts","length","toLowerCase","filter","a","getSigner"],"sources":["../../src.ts/providers/provider-browser.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}