{"ast":null,"code":"import _defineProperty from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n *  [[link-ankr]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"rpc.ankr.com/eth\";\n    case \"goerli\":\n      return \"rpc.ankr.com/eth_goerli\";\n    case \"matic\":\n      return \"rpc.ankr.com/polygon\";\n    case \"arbitrum\":\n      return \"rpc.ankr.com/arbitrum\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AnkrProvider** connects to the [[link-ankr]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-ankr-signup).\n */\nexport class AnkrProvider extends JsonRpcProvider {\n  /**\n   *  Create a new **AnkrProvider**.\n   *\n   *  By default connecting to ``mainnet`` with a highly throttled\n   *  API key.\n   */\n  constructor(_network, apiKey) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = Network.from(_network);\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    // Ankr does not support filterId, so we force polling\n    const options = {\n      polling: true,\n      staticNetwork: network\n    };\n    const request = AnkrProvider.getRequest(network, apiKey);\n    super(request, network, options);\n    /**\n     *  The API key for the Ankr connection.\n     */\n    _defineProperty(this, \"apiKey\", void 0);\n    defineProperties(this, {\n      apiKey\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new AnkrProvider(chainId, this.apiKey);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  /**\n   *  Returns a prepared request for connecting to %%network%% with\n   *  %%apiKey%%.\n   */\n  static getRequest(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    const request = new FetchRequest(`https:/\\/${getHost(network.name)}/${apiKey}`);\n    request.allowGzip = true;\n    if (apiKey === defaultApiKey) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"AnkrProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n  getRpcError(payload, error) {\n    if (payload.method === \"eth_sendRawTransaction\") {\n      if (error && error.error && error.error.message === \"INTERNAL_ERROR: could not replace existing tx\") {\n        error.error.message = \"replacement transaction underpriced\";\n      }\n    }\n    return super.getRpcError(payload, error);\n  }\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n}","map":{"version":3,"names":["defineProperties","FetchRequest","assertArgument","showThrottleMessage","Network","JsonRpcProvider","defaultApiKey","getHost","name","AnkrProvider","constructor","_network","apiKey","network","from","options","polling","staticNetwork","request","getRequest","_defineProperty","_getProvider","chainId","error","allowGzip","retryFunc","response","attempt","getRpcError","payload","method","message","isCommunityResource"],"sources":["../../src.ts/providers/provider-ankr.ts"],"sourcesContent":[null],"mappings":";AAAA;;;;;;;;;;;;;AAaA,SACIA,gBAAgB,EAAEC,YAAY,EAAEC,cAAc,QAC3C,mBAAmB;AAG1B,SAASC,mBAAmB,QAAQ,gBAAgB;AACpD,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,eAAe,QAAQ,uBAAuB;AAOvD,MAAMC,aAAa,GAAG,kEAAkE;AAExF,SAASC,OAAOA,CAACC,IAAY;EACzB,QAAQA,IAAI;IACR,KAAK,SAAS;MACV,OAAO,kBAAkB;IAC7B,KAAK,QAAQ;MACT,OAAO,yBAAyB;IACpC,KAAK,OAAO;MACR,OAAO,sBAAsB;IACjC,KAAK,UAAU;MACX,OAAO,uBAAuB;;EAGtCN,cAAc,CAAC,KAAK,EAAE,qBAAqB,EAAE,SAAS,EAAEM,IAAI,CAAC;AACjE;AAGA;;;;;;;;;AASA,OAAM,MAAOC,YAAa,SAAQJ,eAAe;EAO7C;;;;;;EAMAK,YAAYC,QAAqB,EAAEC,MAAsB;IACrD,IAAID,QAAQ,IAAI,IAAI,EAAE;MAAEA,QAAQ,GAAG,SAAS;;IAC5C,MAAME,OAAO,GAAGT,OAAO,CAACU,IAAI,CAACH,QAAQ,CAAC;IACtC,IAAIC,MAAM,IAAI,IAAI,EAAE;MAAEA,MAAM,GAAGN,aAAa;;IAE5C;IACA,MAAMS,OAAO,GAAG;MAAEC,OAAO,EAAE,IAAI;MAAEC,aAAa,EAAEJ;IAAO,CAAE;IAEzD,MAAMK,OAAO,GAAGT,YAAY,CAACU,UAAU,CAACN,OAAO,EAAED,MAAM,CAAC;IACxD,KAAK,CAACM,OAAO,EAAEL,OAAO,EAAEE,OAAO,CAAC;IApBpC;;;IAAAK,eAAA;IAsBIpB,gBAAgB,CAAe,IAAI,EAAE;MAAEY;IAAM,CAAE,CAAC;EACpD;EAEAS,YAAYA,CAACC,OAAe;IACxB,IAAI;MACA,OAAO,IAAIb,YAAY,CAACa,OAAO,EAAE,IAAI,CAACV,MAAM,CAAC;KAChD,CAAC,OAAOW,KAAK,EAAE;IAChB,OAAO,KAAK,CAACF,YAAY,CAACC,OAAO,CAAC;EACtC;EAEA;;;;EAIA,OAAOH,UAAUA,CAACN,OAAgB,EAAED,MAAsB;IACtD,IAAIA,MAAM,IAAI,IAAI,EAAE;MAAEA,MAAM,GAAGN,aAAa;;IAE5C,MAAMY,OAAO,GAAG,IAAIjB,YAAY,CAAC,YAAaM,OAAO,CAACM,OAAO,CAACL,IAAI,CAAE,IAAKI,MAAO,EAAE,CAAC;IACnFM,OAAO,CAACM,SAAS,GAAG,IAAI;IAExB,IAAIZ,MAAM,KAAKN,aAAa,EAAE;MAC1BY,OAAO,CAACO,SAAS,GAAG,OAAOP,OAAO,EAAEQ,QAAQ,EAAEC,OAAO,KAAI;QACrDxB,mBAAmB,CAAC,cAAc,CAAC;QACnC,OAAO,IAAI;MACf,CAAC;;IAGL,OAAOe,OAAO;EAClB;EAEAU,WAAWA,CAACC,OAAuB,EAAEN,KAAmB;IACpD,IAAIM,OAAO,CAACC,MAAM,KAAK,wBAAwB,EAAE;MAC7C,IAAIP,KAAK,IAAIA,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACQ,OAAO,KAAK,+CAA+C,EAAE;QACjGR,KAAK,CAACA,KAAK,CAACQ,OAAO,GAAG,qCAAqC;;;IAInE,OAAO,KAAK,CAACH,WAAW,CAACC,OAAO,EAAEN,KAAK,CAAC;EAC5C;EAEAS,mBAAmBA,CAAA;IACf,OAAQ,IAAI,CAACpB,MAAM,KAAKN,aAAa;EACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}