{"ast":null,"code":"import _defineProperty from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n *  [[link-infura]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]\n */\nimport { defineProperties, FetchRequest, assert, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nimport { WebSocketProvider } from \"./provider-websocket.js\";\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"mainnet.infura.io\";\n    case \"goerli\":\n      return \"goerli.infura.io\";\n    case \"sepolia\":\n      return \"sepolia.infura.io\";\n    case \"arbitrum\":\n      return \"arbitrum-mainnet.infura.io\";\n    case \"arbitrum-goerli\":\n      return \"arbitrum-goerli.infura.io\";\n    case \"matic\":\n      return \"polygon-mainnet.infura.io\";\n    case \"matic-mumbai\":\n      return \"polygon-mumbai.infura.io\";\n    case \"optimism\":\n      return \"optimism-mainnet.infura.io\";\n    case \"optimism-goerli\":\n      return \"optimism-goerli.infura.io\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **InfuraWebSocketProvider** connects to the [[link-infura]]\n *  WebSocket end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nexport class InfuraWebSocketProvider extends WebSocketProvider {\n  /**\n   *  Creates a new **InfuraWebSocketProvider**.\n   */\n  constructor(network, projectId) {\n    const provider = new InfuraProvider(network, projectId);\n    const req = provider._getConnection();\n    assert(!req.credentials, \"INFURA WebSocket project secrets unsupported\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"InfuraProvider.getWebSocketProvider()\"\n    });\n    const url = req.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n    super(url, network);\n    /**\n     *  The Project ID for the INFURA connection.\n     */\n    _defineProperty(this, \"projectId\", void 0);\n    /**\n     *  The Project Secret.\n     *\n     *  If null, no authenticated requests are made. This should not\n     *  be used outside of private contexts.\n     */\n    _defineProperty(this, \"projectSecret\", void 0);\n    defineProperties(this, {\n      projectId: provider.projectId,\n      projectSecret: provider.projectSecret\n    });\n  }\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n}\n/**\n *  The **InfuraProvider** connects to the [[link-infura]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nexport class InfuraProvider extends JsonRpcProvider {\n  /**\n   *  Creates a new **InfuraProvider**.\n   */\n  constructor(_network, projectId, projectSecret) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = Network.from(_network);\n    if (projectId == null) {\n      projectId = defaultProjectId;\n    }\n    if (projectSecret == null) {\n      projectSecret = null;\n    }\n    const request = InfuraProvider.getRequest(network, projectId, projectSecret);\n    super(request, network, {\n      staticNetwork: network\n    });\n    /**\n     *  The Project ID for the INFURA connection.\n     */\n    _defineProperty(this, \"projectId\", void 0);\n    /**\n     *  The Project Secret.\n     *\n     *  If null, no authenticated requests are made. This should not\n     *  be used outside of private contexts.\n     */\n    _defineProperty(this, \"projectSecret\", void 0);\n    defineProperties(this, {\n      projectId,\n      projectSecret\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new InfuraProvider(chainId, this.projectId, this.projectSecret);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n  /**\n   *  Creates a new **InfuraWebSocketProvider**.\n   */\n  static getWebSocketProvider(network, projectId) {\n    return new InfuraWebSocketProvider(network, projectId);\n  }\n  /**\n   *  Returns a prepared request for connecting to %%network%%\n   *  with %%projectId%% and %%projectSecret%%.\n   */\n  static getRequest(network, projectId, projectSecret) {\n    if (projectId == null) {\n      projectId = defaultProjectId;\n    }\n    if (projectSecret == null) {\n      projectSecret = null;\n    }\n    const request = new FetchRequest(`https:/\\/${getHost(network.name)}/v3/${projectId}`);\n    request.allowGzip = true;\n    if (projectSecret) {\n      request.setCredentials(\"\", projectSecret);\n    }\n    if (projectId === defaultProjectId) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"InfuraProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n}","map":{"version":3,"names":["defineProperties","FetchRequest","assert","assertArgument","showThrottleMessage","Network","JsonRpcProvider","WebSocketProvider","defaultProjectId","getHost","name","InfuraWebSocketProvider","constructor","network","projectId","provider","InfuraProvider","req","_getConnection","credentials","operation","url","replace","_defineProperty","projectSecret","isCommunityResource","_network","from","request","getRequest","staticNetwork","_getProvider","chainId","error","getWebSocketProvider","allowGzip","setCredentials","retryFunc","response","attempt"],"sources":["../../src.ts/providers/provider-infura.ts"],"sourcesContent":[null],"mappings":";AAAA;;;;;;;;;;;;;;;;;;AAkBA,SACIA,gBAAgB,EAAEC,YAAY,EAAEC,MAAM,EAAEC,cAAc,QACnD,mBAAmB;AAE1B,SAASC,mBAAmB,QAAQ,gBAAgB;AACpD,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,eAAe,QAAQ,uBAAuB;AACvD,SAASC,iBAAiB,QAAQ,yBAAyB;AAO3D,MAAMC,gBAAgB,GAAG,kCAAkC;AAE3D,SAASC,OAAOA,CAACC,IAAY;EACzB,QAAOA,IAAI;IACP,KAAK,SAAS;MACV,OAAO,mBAAmB;IAC9B,KAAK,QAAQ;MACT,OAAO,kBAAkB;IAC7B,KAAK,SAAS;MACV,OAAO,mBAAmB;IAE9B,KAAK,UAAU;MACX,OAAO,4BAA4B;IACvC,KAAK,iBAAiB;MAClB,OAAO,2BAA2B;IACtC,KAAK,OAAO;MACR,OAAO,2BAA2B;IACtC,KAAK,cAAc;MACf,OAAO,0BAA0B;IACrC,KAAK,UAAU;MACX,OAAO,4BAA4B;IACvC,KAAK,iBAAiB;MAClB,OAAO,2BAA2B;;EAG1CP,cAAc,CAAC,KAAK,EAAE,qBAAqB,EAAE,SAAS,EAAEO,IAAI,CAAC;AACjE;AAEA;;;;;;;;;AASA,OAAM,MAAOC,uBAAwB,SAAQJ,iBAAiB;EAe1D;;;EAGAK,YAAYC,OAAoB,EAAEC,SAAkB;IAChD,MAAMC,QAAQ,GAAG,IAAIC,cAAc,CAACH,OAAO,EAAEC,SAAS,CAAC;IAEvD,MAAMG,GAAG,GAAGF,QAAQ,CAACG,cAAc,EAAE;IACrChB,MAAM,CAAC,CAACe,GAAG,CAACE,WAAW,EAAE,8CAA8C,EACnE,uBAAuB,EAAE;MAAEC,SAAS,EAAE;IAAuC,CAAE,CAAC;IAEpF,MAAMC,GAAG,GAAGJ,GAAG,CAACI,GAAG,CAACC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,SAAS,CAAC;IACtE,KAAK,CAACD,GAAG,EAAER,OAAO,CAAC;IAxBvB;;;IAAAU,eAAA;IAKA;;;;;;IAAAA,eAAA;IAqBIvB,gBAAgB,CAA0B,IAAI,EAAE;MAC5Cc,SAAS,EAAEC,QAAQ,CAACD,SAAS;MAC7BU,aAAa,EAAET,QAAQ,CAACS;KAC3B,CAAC;EACN;EAEAC,mBAAmBA,CAAA;IACf,OAAQ,IAAI,CAACX,SAAS,KAAKN,gBAAgB;EAC/C;;AAGJ;;;;;;;;;AASA,OAAM,MAAOQ,cAAe,SAAQV,eAAe;EAc/C;;;EAGAM,YAAYc,QAAqB,EAAEZ,SAAyB,EAAEU,aAA6B;IACvF,IAAIE,QAAQ,IAAI,IAAI,EAAE;MAAEA,QAAQ,GAAG,SAAS;;IAC5C,MAAMb,OAAO,GAAGR,OAAO,CAACsB,IAAI,CAACD,QAAQ,CAAC;IACtC,IAAIZ,SAAS,IAAI,IAAI,EAAE;MAAEA,SAAS,GAAGN,gBAAgB;;IACrD,IAAIgB,aAAa,IAAI,IAAI,EAAE;MAAEA,aAAa,GAAG,IAAI;;IAEjD,MAAMI,OAAO,GAAGZ,cAAc,CAACa,UAAU,CAAChB,OAAO,EAAEC,SAAS,EAAEU,aAAa,CAAC;IAC5E,KAAK,CAACI,OAAO,EAAEf,OAAO,EAAE;MAAEiB,aAAa,EAAEjB;IAAO,CAAE,CAAC;IAvBvD;;;IAAAU,eAAA;IAKA;;;;;;IAAAA,eAAA;IAoBIvB,gBAAgB,CAAiB,IAAI,EAAE;MAAEc,SAAS;MAAEU;IAAa,CAAE,CAAC;EACxE;EAEAO,YAAYA,CAACC,OAAe;IACxB,IAAI;MACA,OAAO,IAAIhB,cAAc,CAACgB,OAAO,EAAE,IAAI,CAAClB,SAAS,EAAE,IAAI,CAACU,aAAa,CAAC;KACzE,CAAC,OAAOS,KAAK,EAAE;IAChB,OAAO,KAAK,CAACF,YAAY,CAACC,OAAO,CAAC;EACtC;EAEAP,mBAAmBA,CAAA;IACf,OAAQ,IAAI,CAACX,SAAS,KAAKN,gBAAgB;EAC/C;EAEA;;;EAGA,OAAO0B,oBAAoBA,CAACrB,OAAoB,EAAEC,SAAkB;IAChE,OAAO,IAAIH,uBAAuB,CAACE,OAAO,EAAEC,SAAS,CAAC;EAC1D;EAEA;;;;EAIA,OAAOe,UAAUA,CAAChB,OAAgB,EAAEC,SAAyB,EAAEU,aAA6B;IACxF,IAAIV,SAAS,IAAI,IAAI,EAAE;MAAEA,SAAS,GAAGN,gBAAgB;;IACrD,IAAIgB,aAAa,IAAI,IAAI,EAAE;MAAEA,aAAa,GAAG,IAAI;;IAEjD,MAAMI,OAAO,GAAG,IAAI3B,YAAY,CAAC,YAAaQ,OAAO,CAACI,OAAO,CAACH,IAAI,CAAE,OAAQI,SAAU,EAAE,CAAC;IACzFc,OAAO,CAACO,SAAS,GAAG,IAAI;IACxB,IAAIX,aAAa,EAAE;MAAEI,OAAO,CAACQ,cAAc,CAAC,EAAE,EAAEZ,aAAa,CAAC;;IAE9D,IAAIV,SAAS,KAAKN,gBAAgB,EAAE;MAChCoB,OAAO,CAACS,SAAS,GAAG,OAAOT,OAAO,EAAEU,QAAQ,EAAEC,OAAO,KAAI;QACrDnC,mBAAmB,CAAC,gBAAgB,CAAC;QACrC,OAAO,IAAI;MACf,CAAC;;IAGL,OAAOwB,OAAO;EAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}