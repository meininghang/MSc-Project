{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MergeKeyStore = void 0;\nconst keystore_1 = require(\"./keystore\");\nclass MergeKeyStore extends keystore_1.KeyStore {\n  /**\n   * @param keyStores read calls are attempted from start to end of array\n   * @param options.writeKeyStoreIndex the keystore index that will receive all write calls\n   */\n  constructor(keyStores, options = {\n    writeKeyStoreIndex: 0\n  }) {\n    super();\n    this.options = options;\n    this.keyStores = keyStores;\n  }\n  /**\n   * Store a {@link KeyPain} to the first index of a key store array\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @param keyPair The key pair to store in local storage\n   */\n  async setKey(networkId, accountId, keyPair) {\n    await this.keyStores[this.options.writeKeyStoreIndex].setKey(networkId, accountId, keyPair);\n  }\n  /**\n   * Gets a {@link KeyPair} from the array of key stores\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   * @returns {Promise<KeyPair>}\n   */\n  async getKey(networkId, accountId) {\n    for (const keyStore of this.keyStores) {\n      const keyPair = await keyStore.getKey(networkId, accountId);\n      if (keyPair) {\n        return keyPair;\n      }\n    }\n    return null;\n  }\n  /**\n   * Removes a {@link KeyPair} from the array of key stores\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @param accountId The NEAR account tied to the key pair\n   */\n  async removeKey(networkId, accountId) {\n    for (const keyStore of this.keyStores) {\n      await keyStore.removeKey(networkId, accountId);\n    }\n  }\n  /**\n   * Removes all items from each key store\n   */\n  async clear() {\n    for (const keyStore of this.keyStores) {\n      await keyStore.clear();\n    }\n  }\n  /**\n   * Get the network(s) from the array of key stores\n   * @returns {Promise<string[]>}\n   */\n  async getNetworks() {\n    const result = new Set();\n    for (const keyStore of this.keyStores) {\n      for (const network of await keyStore.getNetworks()) {\n        result.add(network);\n      }\n    }\n    return Array.from(result);\n  }\n  /**\n   * Gets the account(s) from the array of key stores\n   * @param networkId The targeted network. (ex. default, betanet, etc…)\n   * @returns{Promise<string[]>}\n   */\n  async getAccounts(networkId) {\n    const result = new Set();\n    for (const keyStore of this.keyStores) {\n      for (const account of await keyStore.getAccounts(networkId)) {\n        result.add(account);\n      }\n    }\n    return Array.from(result);\n  }\n  /** @hidden */\n  toString() {\n    return `MergeKeyStore(${this.keyStores.join(', ')})`;\n  }\n}\nexports.MergeKeyStore = MergeKeyStore;","map":{"version":3,"names":["Object","defineProperty","exports","value","MergeKeyStore","keystore_1","require","KeyStore","constructor","keyStores","options","writeKeyStoreIndex","setKey","networkId","accountId","keyPair","getKey","keyStore","removeKey","clear","getNetworks","result","Set","network","add","Array","from","getAccounts","account","toString","join"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/near-api-js/lib/key_stores/merge_key_store.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MergeKeyStore = void 0;\nconst keystore_1 = require(\"./keystore\");\nclass MergeKeyStore extends keystore_1.KeyStore {\n    /**\n     * @param keyStores read calls are attempted from start to end of array\n     * @param options.writeKeyStoreIndex the keystore index that will receive all write calls\n     */\n    constructor(keyStores, options = { writeKeyStoreIndex: 0 }) {\n        super();\n        this.options = options;\n        this.keyStores = keyStores;\n    }\n    /**\n     * Store a {@link KeyPain} to the first index of a key store array\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @param keyPair The key pair to store in local storage\n     */\n    async setKey(networkId, accountId, keyPair) {\n        await this.keyStores[this.options.writeKeyStoreIndex].setKey(networkId, accountId, keyPair);\n    }\n    /**\n     * Gets a {@link KeyPair} from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     * @returns {Promise<KeyPair>}\n     */\n    async getKey(networkId, accountId) {\n        for (const keyStore of this.keyStores) {\n            const keyPair = await keyStore.getKey(networkId, accountId);\n            if (keyPair) {\n                return keyPair;\n            }\n        }\n        return null;\n    }\n    /**\n     * Removes a {@link KeyPair} from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @param accountId The NEAR account tied to the key pair\n     */\n    async removeKey(networkId, accountId) {\n        for (const keyStore of this.keyStores) {\n            await keyStore.removeKey(networkId, accountId);\n        }\n    }\n    /**\n     * Removes all items from each key store\n     */\n    async clear() {\n        for (const keyStore of this.keyStores) {\n            await keyStore.clear();\n        }\n    }\n    /**\n     * Get the network(s) from the array of key stores\n     * @returns {Promise<string[]>}\n     */\n    async getNetworks() {\n        const result = new Set();\n        for (const keyStore of this.keyStores) {\n            for (const network of await keyStore.getNetworks()) {\n                result.add(network);\n            }\n        }\n        return Array.from(result);\n    }\n    /**\n     * Gets the account(s) from the array of key stores\n     * @param networkId The targeted network. (ex. default, betanet, etc…)\n     * @returns{Promise<string[]>}\n     */\n    async getAccounts(networkId) {\n        const result = new Set();\n        for (const keyStore of this.keyStores) {\n            for (const account of await keyStore.getAccounts(networkId)) {\n                result.add(account);\n            }\n        }\n        return Array.from(result);\n    }\n    /** @hidden */\n    toString() {\n        return `MergeKeyStore(${this.keyStores.join(', ')})`;\n    }\n}\nexports.MergeKeyStore = MergeKeyStore;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAC9B,MAAMC,UAAU,GAAGC,OAAO,CAAC,YAAY,CAAC;AACxC,MAAMF,aAAa,SAASC,UAAU,CAACE,QAAQ,CAAC;EAC5C;AACJ;AACA;AACA;EACIC,WAAWA,CAACC,SAAS,EAAEC,OAAO,GAAG;IAAEC,kBAAkB,EAAE;EAAE,CAAC,EAAE;IACxD,KAAK,CAAC,CAAC;IACP,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACD,SAAS,GAAGA,SAAS;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMG,MAAMA,CAACC,SAAS,EAAEC,SAAS,EAAEC,OAAO,EAAE;IACxC,MAAM,IAAI,CAACN,SAAS,CAAC,IAAI,CAACC,OAAO,CAACC,kBAAkB,CAAC,CAACC,MAAM,CAACC,SAAS,EAAEC,SAAS,EAAEC,OAAO,CAAC;EAC/F;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMC,MAAMA,CAACH,SAAS,EAAEC,SAAS,EAAE;IAC/B,KAAK,MAAMG,QAAQ,IAAI,IAAI,CAACR,SAAS,EAAE;MACnC,MAAMM,OAAO,GAAG,MAAME,QAAQ,CAACD,MAAM,CAACH,SAAS,EAAEC,SAAS,CAAC;MAC3D,IAAIC,OAAO,EAAE;QACT,OAAOA,OAAO;MAClB;IACJ;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMG,SAASA,CAACL,SAAS,EAAEC,SAAS,EAAE;IAClC,KAAK,MAAMG,QAAQ,IAAI,IAAI,CAACR,SAAS,EAAE;MACnC,MAAMQ,QAAQ,CAACC,SAAS,CAACL,SAAS,EAAEC,SAAS,CAAC;IAClD;EACJ;EACA;AACJ;AACA;EACI,MAAMK,KAAKA,CAAA,EAAG;IACV,KAAK,MAAMF,QAAQ,IAAI,IAAI,CAACR,SAAS,EAAE;MACnC,MAAMQ,QAAQ,CAACE,KAAK,CAAC,CAAC;IAC1B;EACJ;EACA;AACJ;AACA;AACA;EACI,MAAMC,WAAWA,CAAA,EAAG;IAChB,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC;IACxB,KAAK,MAAML,QAAQ,IAAI,IAAI,CAACR,SAAS,EAAE;MACnC,KAAK,MAAMc,OAAO,IAAI,MAAMN,QAAQ,CAACG,WAAW,CAAC,CAAC,EAAE;QAChDC,MAAM,CAACG,GAAG,CAACD,OAAO,CAAC;MACvB;IACJ;IACA,OAAOE,KAAK,CAACC,IAAI,CAACL,MAAM,CAAC;EAC7B;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMM,WAAWA,CAACd,SAAS,EAAE;IACzB,MAAMQ,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC;IACxB,KAAK,MAAML,QAAQ,IAAI,IAAI,CAACR,SAAS,EAAE;MACnC,KAAK,MAAMmB,OAAO,IAAI,MAAMX,QAAQ,CAACU,WAAW,CAACd,SAAS,CAAC,EAAE;QACzDQ,MAAM,CAACG,GAAG,CAACI,OAAO,CAAC;MACvB;IACJ;IACA,OAAOH,KAAK,CAACC,IAAI,CAACL,MAAM,CAAC;EAC7B;EACA;EACAQ,QAAQA,CAAA,EAAG;IACP,OAAQ,iBAAgB,IAAI,CAACpB,SAAS,CAACqB,IAAI,CAAC,IAAI,CAAE,GAAE;EACxD;AACJ;AACA5B,OAAO,CAACE,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}