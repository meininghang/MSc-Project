{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst buffer_1 = require(\"buffer\");\nconst keccak_1 = __importDefault(require(\"keccak\"));\nfunction keccak256(value) {\n  value = toBuffer(value);\n  return keccak_1.default(\"keccak256\").update(value).digest();\n}\nfunction toBuffer(value) {\n  if (!buffer_1.Buffer.isBuffer(value)) {\n    if (Array.isArray(value)) {\n      value = buffer_1.Buffer.from(value);\n    } else if (typeof value === \"string\") {\n      if (isHexString(value)) {\n        value = buffer_1.Buffer.from(padToEven(stripHexPrefix(value)), \"hex\");\n      } else {\n        value = buffer_1.Buffer.from(value);\n      }\n    } else if (typeof value === \"number\") {\n      value = intToBuffer(value);\n    } else if (value === null || value === undefined) {\n      value = buffer_1.Buffer.allocUnsafe(0);\n    } else if (bn_js_1.default.isBN(value)) {\n      value = value.toArrayLike(buffer_1.Buffer);\n    } else if (value.toArray) {\n      // converts a BN to a Buffer\n      value = buffer_1.Buffer.from(value.toArray());\n    } else {\n      throw new Error(\"invalid type\");\n    }\n  }\n  return value;\n}\nfunction isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n  return true;\n}\nfunction padToEven(value) {\n  if (typeof value !== \"string\") {\n    throw new Error(`while padding to even, value must be string, is currently ${typeof value}, while padToEven.`);\n  }\n  if (value.length % 2) {\n    value = `0${value}`;\n  }\n  return value;\n}\nfunction stripHexPrefix(value) {\n  if (typeof value !== \"string\") {\n    return value;\n  }\n  return isHexPrefixed(value) ? value.slice(2) : value;\n}\nfunction isHexPrefixed(value) {\n  if (typeof value !== \"string\") {\n    throw new Error(\"value must be type 'string', is currently type \" + typeof value + \", while checking isHexPrefixed.\");\n  }\n  return value.slice(0, 2) === \"0x\";\n}\nfunction intToBuffer(i) {\n  const hex = intToHex(i);\n  return buffer_1.Buffer.from(padToEven(hex.slice(2)), \"hex\");\n}\nfunction intToHex(i) {\n  const hex = i.toString(16);\n  return `0x${hex}`;\n}\nif (typeof window !== \"undefined\") {\n  window.keccak256 = keccak256;\n}\nmodule.exports = keccak256;","map":{"version":3,"names":["bn_js_1","__importDefault","require","buffer_1","keccak_1","keccak256","value","toBuffer","default","update","digest","Buffer","isBuffer","Array","isArray","from","isHexString","padToEven","stripHexPrefix","intToBuffer","undefined","allocUnsafe","isBN","toArrayLike","toArray","Error","length","match","isHexPrefixed","slice","i","hex","intToHex","toString","window","module","exports"],"sources":["keccak256.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}