{"ast":null,"code":"import ethereumLib from './ethereum';\nimport arweaveLib from './arweave';\nimport { ChainType } from '../types';\nimport { checkSignConfig } from '../utils/check';\nimport { ERRORS } from '../utils/errors';\nimport hashPersonalMessage from './hashPersonalMessage';\nconst getDepositAddr = (info, accountChainType) => {\n  if (accountChainType === ChainType.ethereum) {\n    return info === null || info === void 0 ? void 0 : info.lockers.ethereum;\n  } else if (accountChainType === ChainType.arweave) {\n    // AR 大小写敏感\n    return info === null || info === void 0 ? void 0 : info.lockers.arweave;\n  } else if (accountChainType === ChainType.moon) {\n    return info === null || info === void 0 ? void 0 : info.lockers.moon;\n  }\n  throw new Error(ERRORS.INVALID_ACCOUNT_TYPE);\n};\nexport const getEverpayTxMessage = everpayTxWithoutSig => {\n  const keys = ['tokenSymbol', 'action', 'from', 'to', 'amount', 'fee', 'feeRecipient', 'nonce', 'tokenID', 'chainType', 'chainID', 'data', 'version'];\n  return keys.map(key => `${key}:${everpayTxWithoutSig[key]}`).join('\\n');\n};\nexport const signMessageAsync = async (config, messageData) => {\n  const from = config.account;\n  const accountChainType = config.chainType;\n  const personalMsgHashBuffer = hashPersonalMessage(Buffer.from(messageData));\n  const personalMsgHex = `0x${personalMsgHashBuffer.toString('hex')}`;\n  let sig = '';\n  checkSignConfig(accountChainType, config);\n  if ([ChainType.ethereum, ChainType.moon].includes(accountChainType)) {\n    sig = await ethereumLib.signMessageAsync(config.ethConnectedSigner, from, messageData);\n  } else if (accountChainType === ChainType.arweave) {\n    sig = await arweaveLib.signMessageAsync(config.arJWK, from, personalMsgHex);\n  } else {\n    throw new Error(ERRORS.INVALID_ACCOUNT_TYPE);\n  }\n  return {\n    everHash: personalMsgHex,\n    sig\n  };\n};\nexport const transferAsync = async (config, info, params) => {\n  checkSignConfig(config.chainType, config);\n  const to = getDepositAddr(info, config.chainType);\n  const paramsMergedTo = {\n    ...params,\n    to\n  };\n  if ([ChainType.ethereum, ChainType.moon].includes(config.chainType)) {\n    return await ethereumLib.transferAsync(config.ethConnectedSigner, config.chainType, paramsMergedTo);\n  } else if (config.chainType === ChainType.arweave) {\n    return await arweaveLib.transferAsync(config.arJWK, config.chainType, paramsMergedTo);\n  }\n  throw new Error(ERRORS.INVALID_ACCOUNT_TYPE);\n};","map":{"version":3,"names":["ethereumLib","arweaveLib","ChainType","checkSignConfig","ERRORS","hashPersonalMessage","getDepositAddr","info","accountChainType","ethereum","lockers","arweave","moon","Error","INVALID_ACCOUNT_TYPE","getEverpayTxMessage","everpayTxWithoutSig","keys","map","key","join","signMessageAsync","config","messageData","from","account","chainType","personalMsgHashBuffer","Buffer","personalMsgHex","toString","sig","includes","ethConnectedSigner","arJWK","everHash","transferAsync","params","to","paramsMergedTo"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/arseeding-js/node_modules/everpay/esm/lib/sign.js"],"sourcesContent":["import ethereumLib from './ethereum';\nimport arweaveLib from './arweave';\nimport { ChainType } from '../types';\nimport { checkSignConfig } from '../utils/check';\nimport { ERRORS } from '../utils/errors';\nimport hashPersonalMessage from './hashPersonalMessage';\nconst getDepositAddr = (info, accountChainType) => {\n    if (accountChainType === ChainType.ethereum) {\n        return info === null || info === void 0 ? void 0 : info.lockers.ethereum;\n    }\n    else if (accountChainType === ChainType.arweave) {\n        // AR 大小写敏感\n        return info === null || info === void 0 ? void 0 : info.lockers.arweave;\n    }\n    else if (accountChainType === ChainType.moon) {\n        return info === null || info === void 0 ? void 0 : info.lockers.moon;\n    }\n    throw new Error(ERRORS.INVALID_ACCOUNT_TYPE);\n};\nexport const getEverpayTxMessage = (everpayTxWithoutSig) => {\n    const keys = [\n        'tokenSymbol',\n        'action',\n        'from',\n        'to',\n        'amount',\n        'fee',\n        'feeRecipient',\n        'nonce',\n        'tokenID',\n        'chainType',\n        'chainID',\n        'data',\n        'version'\n    ];\n    return keys.map(key => `${key}:${everpayTxWithoutSig[key]}`).join('\\n');\n};\nexport const signMessageAsync = async (config, messageData) => {\n    const from = config.account;\n    const accountChainType = config.chainType;\n    const personalMsgHashBuffer = hashPersonalMessage(Buffer.from(messageData));\n    const personalMsgHex = `0x${personalMsgHashBuffer.toString('hex')}`;\n    let sig = '';\n    checkSignConfig(accountChainType, config);\n    if ([ChainType.ethereum, ChainType.moon].includes(accountChainType)) {\n        sig = await ethereumLib.signMessageAsync(config.ethConnectedSigner, from, messageData);\n    }\n    else if (accountChainType === ChainType.arweave) {\n        sig = await arweaveLib.signMessageAsync(config.arJWK, from, personalMsgHex);\n    }\n    else {\n        throw new Error(ERRORS.INVALID_ACCOUNT_TYPE);\n    }\n    return { everHash: personalMsgHex, sig };\n};\nexport const transferAsync = async (config, info, params) => {\n    checkSignConfig(config.chainType, config);\n    const to = getDepositAddr(info, config.chainType);\n    const paramsMergedTo = { ...params, to };\n    if ([ChainType.ethereum, ChainType.moon].includes(config.chainType)) {\n        return await ethereumLib.transferAsync(config.ethConnectedSigner, config.chainType, paramsMergedTo);\n    }\n    else if (config.chainType === ChainType.arweave) {\n        return await arweaveLib.transferAsync(config.arJWK, config.chainType, paramsMergedTo);\n    }\n    throw new Error(ERRORS.INVALID_ACCOUNT_TYPE);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}