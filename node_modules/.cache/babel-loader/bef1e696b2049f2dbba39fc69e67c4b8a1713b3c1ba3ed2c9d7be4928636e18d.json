{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/util/bcl.ts\nvar bcl_exports = {};\n__export(bcl_exports, {\n  Bcl: () => Bcl\n});\nmodule.exports = __toCommonJS(bcl_exports);\nvar import_dayjs = __toESM(require(\"dayjs\"));\nvar import_uuid = require(\"uuid\");\nvar import_cipher = require(\"./cipher\");\nvar Bcl = class {\n  constructor(service) {\n    this.bclBody = {\n      version: 1,\n      serial_num: \"\",\n      issuer_pukid: \"\",\n      subject_pukid: \"\",\n      validity: {\n        not_after: \"\",\n        not_before: \"\"\n      },\n      policies: {\n        issuer_dek_group: new Array(),\n        subject_dek_group: new Array(),\n        result_dek: \"\",\n        operation: \"\",\n        postproc: \"\",\n        preproc: \"\"\n      }\n    };\n    this.service = service;\n  }\n  /**\n   *\n   * @param issuerPukid\n   * @param subjectPukid\n   * @param serialNum\n   * @param resultDek\n   * @param operation\n   * @param postProc\n   * @param preProc\n   * @param version\n   * @param notBefore\n   * @param notAfter\n   */\n  async createBclBody(issuerPukid, subjectPukid, serialNum, version = 1, resultDek = \"SUBJECT\", operation = [\"*\"], postProc = \"NULL\", preProc = \"NULL\", notBefore, notAfter) {\n    if (issuerPukid && subjectPukid) {\n      await this.loadBclBodyByPukId(issuerPukid, subjectPukid);\n    } else if (serialNum) {\n      await this.loadBclBodyBySN(serialNum);\n    }\n    if (this.bclBody.serial_num) {\n      return this;\n    }\n    if (!serialNum) {\n      serialNum = (0, import_uuid.v4)();\n    }\n    this.bclBody.version = version;\n    this.bclBody[\"serial_num\"] = serialNum;\n    this.bclBody[\"issuer_pukid\"] = issuerPukid;\n    this.bclBody[\"subject_pukid\"] = subjectPukid;\n    const nowDate = (0, import_dayjs.default)();\n    if (!notBefore) {\n      notBefore = nowDate.valueOf();\n    }\n    if (!notAfter) {\n      notAfter = nowDate.add(365, \"day\").valueOf();\n    }\n    this.bclBody[\"validity\"][\"not_after\"] = (0, import_dayjs.default)(notAfter).format(\"YYYYMMDDHHmmssZZ\");\n    this.bclBody[\"validity\"][\"not_before\"] = (0, import_dayjs.default)(notBefore).format(\"YYYYMMDDHHmmssZZ\");\n    this.bclBody[\"policies\"] = this._initBlankBclPolicies(resultDek, operation, postProc, preProc);\n    return this;\n  }\n  /**\n   * get bcl body by serialNum\n   * @param serialNum\n   */\n  async loadBclBodyBySN(serialNum) {\n    const bclBodyJson = await this.service.execute({\n      bizType: 116,\n      serialNum\n    });\n    if (bclBodyJson) {\n      this.bclBody = JSON.parse(bclBodyJson);\n    }\n    return this;\n  }\n  async loadBclBodyByPukId(issuePukId, subjectPukId) {\n    const bclBodyJson = await this.service.execute({\n      bizType: 118,\n      issuePukId,\n      subjectPukId\n    });\n    if (bclBodyJson) {\n      this.bclBody = JSON.parse(bclBodyJson);\n    }\n    return this;\n  }\n  /**\n   *\n   * @param issuerDekGroup\n   * @param subjectDekGroup\n   */\n  addDekGroup(issuerDekGroup, subjectDekGroup) {\n    const preIssueDekGroup = this.bclBody[\"policies\"][\"issuer_dek_group\"].filter(p => p.groupid !== issuerDekGroup.groupid);\n    preIssueDekGroup.push(issuerDekGroup);\n    this.bclBody[\"policies\"][\"issuer_dek_group\"] = preIssueDekGroup;\n    if (subjectDekGroup) {\n      const preSubjectDekGroup = this.bclBody[\"policies\"][\"subject_dek_group\"].filter(p => p.groupid !== subjectDekGroup.groupid);\n      preSubjectDekGroup.push(subjectDekGroup);\n      this.bclBody[\"policies\"][\"subject_dek_group\"] = preSubjectDekGroup;\n    }\n    return this;\n  }\n  removeDekGroup(issueGroupId, subjectDekGroupId) {\n    const newIssueDekGroup = this.bclBody[\"policies\"][\"issuer_dek_group\"].filter(d => !issueGroupId.includes(d.groupid));\n    this.bclBody[\"policies\"][\"issuer_dek_group\"] = newIssueDekGroup;\n    if (subjectDekGroupId && subjectDekGroupId.length) {\n      const newSubjectDekGroup = this.bclBody[\"policies\"][\"subject_dek_group\"].filter(d => !subjectDekGroupId.includes(d.groupid));\n      this.bclBody[\"policies\"][\"subject_dek_group\"] = newSubjectDekGroup;\n    }\n    return this;\n  }\n  removeDekGroupAll() {\n    this.bclBody[\"policies\"][\"issuer_dek_group\"] = [];\n    this.bclBody[\"policies\"][\"subject_dek_group\"] = [];\n    return this;\n  }\n  /**\n   *\n   * @param privateKeyPem\n   */\n  _signBclBody(privateKeyPem) {\n    const toBeSignedBytes = Buffer.from(JSON.stringify(this.bclBody), \"utf8\");\n    const buffer = Buffer.concat([Buffer.from(\"01\", \"hex\"), import_cipher.CipherHelper.rsaSign(privateKeyPem, toBeSignedBytes)]);\n    return buffer;\n  }\n  /**\n   *\n   * @param privateKeyPem\n   */\n  async issueBcl(privateKeyPem, bizType = 106) {\n    if (!this.bclBody.serial_num) {\n      throw new Error(\"Bcl is not init\");\n    }\n    const bclRequestJson = JSON.stringify(this.bclBody);\n    const bclSignBuffer = this._signBclBody(privateKeyPem);\n    return await this.service.execute({\n      bizType,\n      bclBody: bclRequestJson,\n      privateSig: bclSignBuffer.toString(\"base64\")\n    });\n  }\n  /**\n   *\n   * @param result_dek\n   * @param operation\n   * @param postproc\n   * @param preproc\n   * @private\n   */\n  _initBlankBclPolicies(result_dek, operation, postproc, preproc) {\n    const policies = {\n      issuer_dek_group: [],\n      subject_dek_group: [],\n      result_dek,\n      operation,\n      post_proc: postproc,\n      pre_proc: preproc\n    };\n    return policies;\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Bcl\n});","map":{"version":3,"names":["__create","Object","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getProtoOf","getPrototypeOf","__hasOwnProp","prototype","hasOwnProperty","__export","target","all","name","get","enumerable","__copyProps","to","from","except","desc","key","call","__toESM","mod","isNodeMode","__esModule","value","__toCommonJS","bcl_exports","Bcl","module","exports","import_dayjs","require","import_uuid","import_cipher","constructor","service","bclBody","version","serial_num","issuer_pukid","subject_pukid","validity","not_after","not_before","policies","issuer_dek_group","Array","subject_dek_group","result_dek","operation","postproc","preproc","createBclBody","issuerPukid","subjectPukid","serialNum","resultDek","postProc","preProc","notBefore","notAfter","loadBclBodyByPukId","loadBclBodyBySN","v4","nowDate","default","valueOf","add","format","_initBlankBclPolicies","bclBodyJson","execute","bizType","JSON","parse","issuePukId","subjectPukId","addDekGroup","issuerDekGroup","subjectDekGroup","preIssueDekGroup","filter","p","groupid","push","preSubjectDekGroup","removeDekGroup","issueGroupId","subjectDekGroupId","newIssueDekGroup","d","includes","length","newSubjectDekGroup","removeDekGroupAll","_signBclBody","privateKeyPem","toBeSignedBytes","Buffer","stringify","buffer","concat","CipherHelper","rsaSign","issueBcl","Error","bclRequestJson","bclSignBuffer","privateSig","toString","post_proc","pre_proc"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/mind-lake-sdk/dist/util/bcl.js"],"sourcesContent":["var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/util/bcl.ts\nvar bcl_exports = {};\n__export(bcl_exports, {\n  Bcl: () => Bcl\n});\nmodule.exports = __toCommonJS(bcl_exports);\nvar import_dayjs = __toESM(require(\"dayjs\"));\nvar import_uuid = require(\"uuid\");\nvar import_cipher = require(\"./cipher\");\nvar Bcl = class {\n  constructor(service) {\n    this.bclBody = {\n      version: 1,\n      serial_num: \"\",\n      issuer_pukid: \"\",\n      subject_pukid: \"\",\n      validity: {\n        not_after: \"\",\n        not_before: \"\"\n      },\n      policies: {\n        issuer_dek_group: new Array(),\n        subject_dek_group: new Array(),\n        result_dek: \"\",\n        operation: \"\",\n        postproc: \"\",\n        preproc: \"\"\n      }\n    };\n    this.service = service;\n  }\n  /**\n   *\n   * @param issuerPukid\n   * @param subjectPukid\n   * @param serialNum\n   * @param resultDek\n   * @param operation\n   * @param postProc\n   * @param preProc\n   * @param version\n   * @param notBefore\n   * @param notAfter\n   */\n  async createBclBody(issuerPukid, subjectPukid, serialNum, version = 1, resultDek = \"SUBJECT\", operation = [\"*\"], postProc = \"NULL\", preProc = \"NULL\", notBefore, notAfter) {\n    if (issuerPukid && subjectPukid) {\n      await this.loadBclBodyByPukId(issuerPukid, subjectPukid);\n    } else if (serialNum) {\n      await this.loadBclBodyBySN(serialNum);\n    }\n    if (this.bclBody.serial_num) {\n      return this;\n    }\n    if (!serialNum) {\n      serialNum = (0, import_uuid.v4)();\n    }\n    this.bclBody.version = version;\n    this.bclBody[\"serial_num\"] = serialNum;\n    this.bclBody[\"issuer_pukid\"] = issuerPukid;\n    this.bclBody[\"subject_pukid\"] = subjectPukid;\n    const nowDate = (0, import_dayjs.default)();\n    if (!notBefore) {\n      notBefore = nowDate.valueOf();\n    }\n    if (!notAfter) {\n      notAfter = nowDate.add(365, \"day\").valueOf();\n    }\n    this.bclBody[\"validity\"][\"not_after\"] = (0, import_dayjs.default)(notAfter).format(\"YYYYMMDDHHmmssZZ\");\n    this.bclBody[\"validity\"][\"not_before\"] = (0, import_dayjs.default)(notBefore).format(\"YYYYMMDDHHmmssZZ\");\n    this.bclBody[\"policies\"] = this._initBlankBclPolicies(\n      resultDek,\n      operation,\n      postProc,\n      preProc\n    );\n    return this;\n  }\n  /**\n   * get bcl body by serialNum\n   * @param serialNum\n   */\n  async loadBclBodyBySN(serialNum) {\n    const bclBodyJson = await this.service.execute({\n      bizType: 116,\n      serialNum\n    });\n    if (bclBodyJson) {\n      this.bclBody = JSON.parse(bclBodyJson);\n    }\n    return this;\n  }\n  async loadBclBodyByPukId(issuePukId, subjectPukId) {\n    const bclBodyJson = await this.service.execute({\n      bizType: 118,\n      issuePukId,\n      subjectPukId\n    });\n    if (bclBodyJson) {\n      this.bclBody = JSON.parse(bclBodyJson);\n    }\n    return this;\n  }\n  /**\n   *\n   * @param issuerDekGroup\n   * @param subjectDekGroup\n   */\n  addDekGroup(issuerDekGroup, subjectDekGroup) {\n    const preIssueDekGroup = this.bclBody[\"policies\"][\"issuer_dek_group\"].filter((p) => p.groupid !== issuerDekGroup.groupid);\n    preIssueDekGroup.push(issuerDekGroup);\n    this.bclBody[\"policies\"][\"issuer_dek_group\"] = preIssueDekGroup;\n    if (subjectDekGroup) {\n      const preSubjectDekGroup = this.bclBody[\"policies\"][\"subject_dek_group\"].filter((p) => p.groupid !== subjectDekGroup.groupid);\n      preSubjectDekGroup.push(subjectDekGroup);\n      this.bclBody[\"policies\"][\"subject_dek_group\"] = preSubjectDekGroup;\n    }\n    return this;\n  }\n  removeDekGroup(issueGroupId, subjectDekGroupId) {\n    const newIssueDekGroup = this.bclBody[\"policies\"][\"issuer_dek_group\"].filter((d) => !issueGroupId.includes(d.groupid));\n    this.bclBody[\"policies\"][\"issuer_dek_group\"] = newIssueDekGroup;\n    if (subjectDekGroupId && subjectDekGroupId.length) {\n      const newSubjectDekGroup = this.bclBody[\"policies\"][\"subject_dek_group\"].filter((d) => !subjectDekGroupId.includes(d.groupid));\n      this.bclBody[\"policies\"][\"subject_dek_group\"] = newSubjectDekGroup;\n    }\n    return this;\n  }\n  removeDekGroupAll() {\n    this.bclBody[\"policies\"][\"issuer_dek_group\"] = [];\n    this.bclBody[\"policies\"][\"subject_dek_group\"] = [];\n    return this;\n  }\n  /**\n   *\n   * @param privateKeyPem\n   */\n  _signBclBody(privateKeyPem) {\n    const toBeSignedBytes = Buffer.from(JSON.stringify(this.bclBody), \"utf8\");\n    const buffer = Buffer.concat([\n      Buffer.from(\"01\", \"hex\"),\n      import_cipher.CipherHelper.rsaSign(privateKeyPem, toBeSignedBytes)\n    ]);\n    return buffer;\n  }\n  /**\n   *\n   * @param privateKeyPem\n   */\n  async issueBcl(privateKeyPem, bizType = 106) {\n    if (!this.bclBody.serial_num) {\n      throw new Error(\"Bcl is not init\");\n    }\n    const bclRequestJson = JSON.stringify(this.bclBody);\n    const bclSignBuffer = this._signBclBody(privateKeyPem);\n    return await this.service.execute({\n      bizType,\n      bclBody: bclRequestJson,\n      privateSig: bclSignBuffer.toString(\"base64\")\n    });\n  }\n  /**\n   *\n   * @param result_dek\n   * @param operation\n   * @param postproc\n   * @param preproc\n   * @private\n   */\n  _initBlankBclPolicies(result_dek, operation, postproc, preproc) {\n    const policies = {\n      issuer_dek_group: [],\n      subject_dek_group: [],\n      result_dek,\n      operation,\n      post_proc: postproc,\n      pre_proc: preproc\n    };\n    return policies;\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Bcl\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}