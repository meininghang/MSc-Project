{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KeyPairEd25519 = exports.KeyPair = exports.PublicKey = exports.KeyType = void 0;\nconst tweetnacl_1 = __importDefault(require(\"tweetnacl\"));\nconst serialize_1 = require(\"./serialize\");\nconst enums_1 = require(\"./enums\");\n/** All supported key types */\nvar KeyType;\n(function (KeyType) {\n  KeyType[KeyType[\"ED25519\"] = 0] = \"ED25519\";\n})(KeyType = exports.KeyType || (exports.KeyType = {}));\nfunction key_type_to_str(keyType) {\n  switch (keyType) {\n    case KeyType.ED25519:\n      return 'ed25519';\n    default:\n      throw new Error(`Unknown key type ${keyType}`);\n  }\n}\nfunction str_to_key_type(keyType) {\n  switch (keyType.toLowerCase()) {\n    case 'ed25519':\n      return KeyType.ED25519;\n    default:\n      throw new Error(`Unknown key type ${keyType}`);\n  }\n}\n/**\n * PublicKey representation that has type and bytes of the key.\n */\nclass PublicKey extends enums_1.Assignable {\n  static from(value) {\n    if (typeof value === 'string') {\n      return PublicKey.fromString(value);\n    }\n    return value;\n  }\n  static fromString(encodedKey) {\n    const parts = encodedKey.split(':');\n    if (parts.length === 1) {\n      return new PublicKey({\n        keyType: KeyType.ED25519,\n        data: serialize_1.base_decode(parts[0])\n      });\n    } else if (parts.length === 2) {\n      return new PublicKey({\n        keyType: str_to_key_type(parts[0]),\n        data: serialize_1.base_decode(parts[1])\n      });\n    } else {\n      throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');\n    }\n  }\n  toString() {\n    return `${key_type_to_str(this.keyType)}:${serialize_1.base_encode(this.data)}`;\n  }\n  verify(message, signature) {\n    switch (this.keyType) {\n      case KeyType.ED25519:\n        return tweetnacl_1.default.sign.detached.verify(message, signature, this.data);\n      default:\n        throw new Error(`Unknown key type ${this.keyType}`);\n    }\n  }\n}\nexports.PublicKey = PublicKey;\nclass KeyPair {\n  /**\n   * @param curve Name of elliptical curve, case-insensitive\n   * @returns Random KeyPair based on the curve\n   */\n  static fromRandom(curve) {\n    switch (curve.toUpperCase()) {\n      case 'ED25519':\n        return KeyPairEd25519.fromRandom();\n      default:\n        throw new Error(`Unknown curve ${curve}`);\n    }\n  }\n  static fromString(encodedKey) {\n    const parts = encodedKey.split(':');\n    if (parts.length === 1) {\n      return new KeyPairEd25519(parts[0]);\n    } else if (parts.length === 2) {\n      switch (parts[0].toUpperCase()) {\n        case 'ED25519':\n          return new KeyPairEd25519(parts[1]);\n        default:\n          throw new Error(`Unknown curve: ${parts[0]}`);\n      }\n    } else {\n      throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');\n    }\n  }\n}\nexports.KeyPair = KeyPair;\n/**\n * This class provides key pair functionality for Ed25519 curve:\n * generating key pairs, encoding key pairs, signing and verifying.\n */\nclass KeyPairEd25519 extends KeyPair {\n  /**\n   * Construct an instance of key pair given a secret key.\n   * It's generally assumed that these are encoded in base58.\n   * @param {string} secretKey\n   */\n  constructor(secretKey) {\n    super();\n    const keyPair = tweetnacl_1.default.sign.keyPair.fromSecretKey(serialize_1.base_decode(secretKey));\n    this.publicKey = new PublicKey({\n      keyType: KeyType.ED25519,\n      data: keyPair.publicKey\n    });\n    this.secretKey = secretKey;\n  }\n  /**\n   * Generate a new random keypair.\n   * @example\n   * const keyRandom = KeyPair.fromRandom();\n   * keyRandom.publicKey\n   * // returns [PUBLIC_KEY]\n   *\n   * keyRandom.secretKey\n   * // returns [SECRET_KEY]\n   */\n  static fromRandom() {\n    const newKeyPair = tweetnacl_1.default.sign.keyPair();\n    return new KeyPairEd25519(serialize_1.base_encode(newKeyPair.secretKey));\n  }\n  sign(message) {\n    const signature = tweetnacl_1.default.sign.detached(message, serialize_1.base_decode(this.secretKey));\n    return {\n      signature,\n      publicKey: this.publicKey\n    };\n  }\n  verify(message, signature) {\n    return this.publicKey.verify(message, signature);\n  }\n  toString() {\n    return `ed25519:${this.secretKey}`;\n  }\n  getPublicKey() {\n    return this.publicKey;\n  }\n}\nexports.KeyPairEd25519 = KeyPairEd25519;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","KeyPairEd25519","KeyPair","PublicKey","KeyType","tweetnacl_1","require","serialize_1","enums_1","key_type_to_str","keyType","ED25519","Error","str_to_key_type","toLowerCase","Assignable","from","fromString","encodedKey","parts","split","length","data","base_decode","toString","base_encode","verify","message","signature","default","sign","detached","fromRandom","curve","toUpperCase","constructor","secretKey","keyPair","fromSecretKey","publicKey","newKeyPair","getPublicKey"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/near-api-js/lib/utils/key_pair.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyPairEd25519 = exports.KeyPair = exports.PublicKey = exports.KeyType = void 0;\nconst tweetnacl_1 = __importDefault(require(\"tweetnacl\"));\nconst serialize_1 = require(\"./serialize\");\nconst enums_1 = require(\"./enums\");\n/** All supported key types */\nvar KeyType;\n(function (KeyType) {\n    KeyType[KeyType[\"ED25519\"] = 0] = \"ED25519\";\n})(KeyType = exports.KeyType || (exports.KeyType = {}));\nfunction key_type_to_str(keyType) {\n    switch (keyType) {\n        case KeyType.ED25519: return 'ed25519';\n        default: throw new Error(`Unknown key type ${keyType}`);\n    }\n}\nfunction str_to_key_type(keyType) {\n    switch (keyType.toLowerCase()) {\n        case 'ed25519': return KeyType.ED25519;\n        default: throw new Error(`Unknown key type ${keyType}`);\n    }\n}\n/**\n * PublicKey representation that has type and bytes of the key.\n */\nclass PublicKey extends enums_1.Assignable {\n    static from(value) {\n        if (typeof value === 'string') {\n            return PublicKey.fromString(value);\n        }\n        return value;\n    }\n    static fromString(encodedKey) {\n        const parts = encodedKey.split(':');\n        if (parts.length === 1) {\n            return new PublicKey({ keyType: KeyType.ED25519, data: serialize_1.base_decode(parts[0]) });\n        }\n        else if (parts.length === 2) {\n            return new PublicKey({ keyType: str_to_key_type(parts[0]), data: serialize_1.base_decode(parts[1]) });\n        }\n        else {\n            throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');\n        }\n    }\n    toString() {\n        return `${key_type_to_str(this.keyType)}:${serialize_1.base_encode(this.data)}`;\n    }\n    verify(message, signature) {\n        switch (this.keyType) {\n            case KeyType.ED25519: return tweetnacl_1.default.sign.detached.verify(message, signature, this.data);\n            default: throw new Error(`Unknown key type ${this.keyType}`);\n        }\n    }\n}\nexports.PublicKey = PublicKey;\nclass KeyPair {\n    /**\n     * @param curve Name of elliptical curve, case-insensitive\n     * @returns Random KeyPair based on the curve\n     */\n    static fromRandom(curve) {\n        switch (curve.toUpperCase()) {\n            case 'ED25519': return KeyPairEd25519.fromRandom();\n            default: throw new Error(`Unknown curve ${curve}`);\n        }\n    }\n    static fromString(encodedKey) {\n        const parts = encodedKey.split(':');\n        if (parts.length === 1) {\n            return new KeyPairEd25519(parts[0]);\n        }\n        else if (parts.length === 2) {\n            switch (parts[0].toUpperCase()) {\n                case 'ED25519': return new KeyPairEd25519(parts[1]);\n                default: throw new Error(`Unknown curve: ${parts[0]}`);\n            }\n        }\n        else {\n            throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');\n        }\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n * This class provides key pair functionality for Ed25519 curve:\n * generating key pairs, encoding key pairs, signing and verifying.\n */\nclass KeyPairEd25519 extends KeyPair {\n    /**\n     * Construct an instance of key pair given a secret key.\n     * It's generally assumed that these are encoded in base58.\n     * @param {string} secretKey\n     */\n    constructor(secretKey) {\n        super();\n        const keyPair = tweetnacl_1.default.sign.keyPair.fromSecretKey(serialize_1.base_decode(secretKey));\n        this.publicKey = new PublicKey({ keyType: KeyType.ED25519, data: keyPair.publicKey });\n        this.secretKey = secretKey;\n    }\n    /**\n     * Generate a new random keypair.\n     * @example\n     * const keyRandom = KeyPair.fromRandom();\n     * keyRandom.publicKey\n     * // returns [PUBLIC_KEY]\n     *\n     * keyRandom.secretKey\n     * // returns [SECRET_KEY]\n     */\n    static fromRandom() {\n        const newKeyPair = tweetnacl_1.default.sign.keyPair();\n        return new KeyPairEd25519(serialize_1.base_encode(newKeyPair.secretKey));\n    }\n    sign(message) {\n        const signature = tweetnacl_1.default.sign.detached(message, serialize_1.base_decode(this.secretKey));\n        return { signature, publicKey: this.publicKey };\n    }\n    verify(message, signature) {\n        return this.publicKey.verify(message, signature);\n    }\n    toString() {\n        return `ed25519:${this.secretKey}`;\n    }\n    getPublicKey() {\n        return this.publicKey;\n    }\n}\nexports.KeyPairEd25519 = KeyPairEd25519;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}