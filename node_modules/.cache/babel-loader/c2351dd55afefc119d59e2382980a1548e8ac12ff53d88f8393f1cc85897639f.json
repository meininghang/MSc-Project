{"ast":null,"code":"import _classPrivateFieldInitSpec from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\n/**\n *  A **Network** encapsulates the various properties required to\n *  interact with a specific chain.\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\nimport { accessListify } from \"../transaction/index.js\";\nimport { getBigInt, assertArgument } from \"../utils/index.js\";\nimport { EnsPlugin, GasCostPlugin } from \"./plugins-network.js\";\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\n/* * * *\nexport class PriceOraclePlugin extends NetworkPlugin {\n    readonly address!: string;\n\n    constructor(address: string) {\n        super(\"org.ethers.plugins.price-oracle\");\n        defineProperties<PriceOraclePlugin>(this, { address });\n    }\n\n    clone(): PriceOraclePlugin {\n        return new PriceOraclePlugin(this.address);\n    }\n}\n*/\n// Networks or clients with a higher need for security (such as clients\n// that may automatically make CCIP requests without user interaction)\n// can use this plugin to anonymize requests or intercept CCIP requests\n// to notify and/or receive authorization from the user\n/* * * *\nexport type FetchDataFunc = (req: Frozen<FetchRequest>) => Promise<FetchRequest>;\nexport class CcipPreflightPlugin extends NetworkPlugin {\n    readonly fetchData!: FetchDataFunc;\n\n    constructor(fetchData: FetchDataFunc) {\n        super(\"org.ethers.plugins.ccip-preflight\");\n        defineProperties<CcipPreflightPlugin>(this, { fetchData });\n    }\n\n    clone(): CcipPreflightPlugin {\n        return new CcipPreflightPlugin(this.fetchData);\n    }\n}\n*/\nconst Networks = new Map();\n// @TODO: Add a _ethersNetworkObj variable to better detect network ovjects\n/**\n *  A **Network** provides access to a chain's properties and allows\n *  for plug-ins to extend functionality.\n */\nvar _name = /*#__PURE__*/new WeakMap();\nvar _chainId = /*#__PURE__*/new WeakMap();\nvar _plugins = /*#__PURE__*/new WeakMap();\nexport class Network {\n  /**\n   *  Creates a new **Network** for %%name%% and %%chainId%%.\n   */\n  constructor(name, chainId) {\n    _classPrivateFieldInitSpec(this, _name, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _chainId, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _plugins, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _name, name);\n    _classPrivateFieldSet(this, _chainId, getBigInt(chainId));\n    _classPrivateFieldSet(this, _plugins, new Map());\n  }\n  /**\n   *  Returns a JSON-compatible representation of a Network.\n   */\n  toJSON() {\n    return {\n      name: this.name,\n      chainId: String(this.chainId)\n    };\n  }\n  /**\n   *  The network common name.\n   *\n   *  This is the canonical name, as networks migh have multiple\n   *  names.\n   */\n  get name() {\n    return _classPrivateFieldGet(this, _name);\n  }\n  set name(value) {\n    _classPrivateFieldSet(this, _name, value);\n  }\n  /**\n   *  The network chain ID.\n   */\n  get chainId() {\n    return _classPrivateFieldGet(this, _chainId);\n  }\n  set chainId(value) {\n    _classPrivateFieldSet(this, _chainId, getBigInt(value, \"chainId\"));\n  }\n  /**\n   *  Returns true if %%other%% matches this network. Any chain ID\n   *  must match, and if no chain ID is present, the name must match.\n   *\n   *  This method does not currently check for additional properties,\n   *  such as ENS address or plug-in compatibility.\n   */\n  matches(other) {\n    if (other == null) {\n      return false;\n    }\n    if (typeof other === \"string\") {\n      try {\n        return this.chainId === getBigInt(other);\n      } catch (error) {}\n      return this.name === other;\n    }\n    if (typeof other === \"number\" || typeof other === \"bigint\") {\n      try {\n        return this.chainId === getBigInt(other);\n      } catch (error) {}\n      return false;\n    }\n    if (typeof other === \"object\") {\n      if (other.chainId != null) {\n        try {\n          return this.chainId === getBigInt(other.chainId);\n        } catch (error) {}\n        return false;\n      }\n      if (other.name != null) {\n        return this.name === other.name;\n      }\n      return false;\n    }\n    return false;\n  }\n  /**\n   *  Returns the list of plugins currently attached to this Network.\n   */\n  get plugins() {\n    return Array.from(_classPrivateFieldGet(this, _plugins).values());\n  }\n  /**\n   *  Attach a new %%plugin%% to this Network. The network name\n   *  must be unique, excluding any fragment.\n   */\n  attachPlugin(plugin) {\n    if (_classPrivateFieldGet(this, _plugins).get(plugin.name)) {\n      throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n    }\n    _classPrivateFieldGet(this, _plugins).set(plugin.name, plugin.clone());\n    return this;\n  }\n  /**\n   *  Return the plugin, if any, matching %%name%% exactly. Plugins\n   *  with fragments will not be returned unless %%name%% includes\n   *  a fragment.\n   */\n  getPlugin(name) {\n    return _classPrivateFieldGet(this, _plugins).get(name) || null;\n  }\n  /**\n   *  Gets a list of all plugins that match %%name%%, with otr without\n   *  a fragment.\n   */\n  getPlugins(basename) {\n    return this.plugins.filter(p => p.name.split(\"#\")[0] === basename);\n  }\n  /**\n   *  Create a copy of this Network.\n   */\n  clone() {\n    const clone = new Network(this.name, this.chainId);\n    this.plugins.forEach(plugin => {\n      clone.attachPlugin(plugin.clone());\n    });\n    return clone;\n  }\n  /**\n   *  Compute the intrinsic gas required for a transaction.\n   *\n   *  A GasCostPlugin can be attached to override the default\n   *  values.\n   */\n  computeIntrinsicGas(tx) {\n    const costs = this.getPlugin(\"org.ethers.plugins.network.GasCost\") || new GasCostPlugin();\n    let gas = costs.txBase;\n    if (tx.to == null) {\n      gas += costs.txCreate;\n    }\n    if (tx.data) {\n      for (let i = 2; i < tx.data.length; i += 2) {\n        if (tx.data.substring(i, i + 2) === \"00\") {\n          gas += costs.txDataZero;\n        } else {\n          gas += costs.txDataNonzero;\n        }\n      }\n    }\n    if (tx.accessList) {\n      const accessList = accessListify(tx.accessList);\n      for (const addr in accessList) {\n        gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n      }\n    }\n    return gas;\n  }\n  /**\n   *  Returns a new Network for the %%network%% name or chainId.\n   */\n  static from(network) {\n    injectCommonNetworks();\n    // Default network\n    if (network == null) {\n      return Network.from(\"mainnet\");\n    }\n    // Canonical name or chain ID\n    if (typeof network === \"number\") {\n      network = BigInt(network);\n    }\n    if (typeof network === \"string\" || typeof network === \"bigint\") {\n      const networkFunc = Networks.get(network);\n      if (networkFunc) {\n        return networkFunc();\n      }\n      if (typeof network === \"bigint\") {\n        return new Network(\"unknown\", network);\n      }\n      assertArgument(false, \"unknown network\", \"network\", network);\n    }\n    // Clonable with network-like abilities\n    if (typeof network.clone === \"function\") {\n      const clone = network.clone();\n      //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n      //}\n      return clone;\n    }\n    // Networkish\n    if (typeof network === \"object\") {\n      assertArgument(typeof network.name === \"string\" && typeof network.chainId === \"number\", \"invalid network object name or chainId\", \"network\", network);\n      const custom = new Network(network.name, network.chainId);\n      if (network.ensAddress || network.ensNetwork != null) {\n        custom.attachPlugin(new EnsPlugin(network.ensAddress, network.ensNetwork));\n      }\n      //if ((<any>network).layerOneConnection) {\n      //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n      //}\n      return custom;\n    }\n    assertArgument(false, \"invalid network\", \"network\", network);\n  }\n  /**\n   *  Register %%nameOrChainId%% with a function which returns\n   *  an instance of a Network representing that chain.\n   */\n  static register(nameOrChainId, networkFunc) {\n    if (typeof nameOrChainId === \"number\") {\n      nameOrChainId = BigInt(nameOrChainId);\n    }\n    const existing = Networks.get(nameOrChainId);\n    if (existing) {\n      assertArgument(false, `conflicting network for ${JSON.stringify(existing.name)}`, \"nameOrChainId\", nameOrChainId);\n    }\n    Networks.set(nameOrChainId, networkFunc);\n  }\n}\n// See: https://chainlist.org\nlet injected = false;\nfunction injectCommonNetworks() {\n  if (injected) {\n    return;\n  }\n  injected = true;\n  /// Register popular Ethereum networks\n  function registerEth(name, chainId, options) {\n    const func = function () {\n      const network = new Network(name, chainId);\n      // We use 0 to disable ENS\n      if (options.ensNetwork != null) {\n        network.attachPlugin(new EnsPlugin(null, options.ensNetwork));\n      }\n      if (options.priorityFee) {\n        //                network.attachPlugin(new MaxPriorityFeePlugin(options.priorityFee));\n      }\n      /*\n                  if (options.etherscan) {\n                      const { url, apiKey } = options.etherscan;\n                      network.attachPlugin(new EtherscanPlugin(url, apiKey));\n                  }\n      */\n      network.attachPlugin(new GasCostPlugin());\n      return network;\n    };\n    // Register the network by name and chain ID\n    Network.register(name, func);\n    Network.register(chainId, func);\n    if (options.altNames) {\n      options.altNames.forEach(name => {\n        Network.register(name, func);\n      });\n    }\n  }\n  registerEth(\"mainnet\", 1, {\n    ensNetwork: 1,\n    altNames: [\"homestead\"]\n  });\n  registerEth(\"ropsten\", 3, {\n    ensNetwork: 3\n  });\n  registerEth(\"rinkeby\", 4, {\n    ensNetwork: 4\n  });\n  registerEth(\"goerli\", 5, {\n    ensNetwork: 5\n  });\n  registerEth(\"kovan\", 42, {\n    ensNetwork: 42\n  });\n  registerEth(\"sepolia\", 11155111, {});\n  registerEth(\"classic\", 61, {});\n  registerEth(\"classicKotti\", 6, {});\n  registerEth(\"xdai\", 100, {\n    ensNetwork: 1\n  });\n  registerEth(\"optimism\", 10, {\n    ensNetwork: 1,\n    etherscan: {\n      url: \"https:/\\/api-optimistic.etherscan.io/\"\n    }\n  });\n  registerEth(\"optimism-goerli\", 420, {\n    etherscan: {\n      url: \"https:/\\/api-goerli-optimistic.etherscan.io/\"\n    }\n  });\n  registerEth(\"arbitrum\", 42161, {\n    ensNetwork: 1,\n    etherscan: {\n      url: \"https:/\\/api.arbiscan.io/\"\n    }\n  });\n  registerEth(\"arbitrum-goerli\", 421613, {\n    etherscan: {\n      url: \"https:/\\/api-goerli.arbiscan.io/\"\n    }\n  });\n  // Polygon has a 35 gwei maxPriorityFee requirement\n  registerEth(\"matic\", 137, {\n    ensNetwork: 1,\n    //        priorityFee: 35000000000,\n    etherscan: {\n      //            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n      url: \"https:/\\/api.polygonscan.com/\"\n    }\n  });\n  registerEth(\"matic-mumbai\", 80001, {\n    altNames: [\"maticMumbai\", \"maticmum\"],\n    //        priorityFee: 35000000000,\n    etherscan: {\n      //            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n      url: \"https:/\\/api-testnet.polygonscan.com/\"\n    }\n  });\n  registerEth(\"bnb\", 56, {\n    ensNetwork: 1,\n    etherscan: {\n      //            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n      url: \"http:/\\/api.bscscan.com\"\n    }\n  });\n  registerEth(\"bnbt\", 97, {\n    etherscan: {\n      //            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n      url: \"http:/\\/api-testnet.bscscan.com\"\n    }\n  });\n}","map":{"version":3,"names":["accessListify","getBigInt","assertArgument","EnsPlugin","GasCostPlugin","Networks","Map","_name","WeakMap","_chainId","_plugins","Network","constructor","name","chainId","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","toJSON","String","_classPrivateFieldGet","matches","other","error","plugins","Array","from","values","attachPlugin","plugin","get","Error","set","clone","getPlugin","getPlugins","basename","filter","p","split","forEach","computeIntrinsicGas","tx","costs","gas","txBase","to","txCreate","data","i","length","substring","txDataZero","txDataNonzero","accessList","addr","txAccessListAddress","txAccessListStorageKey","storageKeys","network","injectCommonNetworks","BigInt","networkFunc","custom","ensAddress","ensNetwork","register","nameOrChainId","existing","JSON","stringify","injected","registerEth","options","func","priorityFee","altNames","etherscan","url"],"sources":["../../src.ts/providers/network.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}