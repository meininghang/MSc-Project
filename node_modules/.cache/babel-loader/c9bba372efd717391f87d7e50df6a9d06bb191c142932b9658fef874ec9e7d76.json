{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport Arweave from 'arweave';\nimport isString from 'lodash/isString';\nimport { ChainType } from '../types';\nimport { getTokenAddrByChainType, isArweaveL2PSTTokenSymbol } from '../utils/util';\nimport hashPersonalMessage from './hashPersonalMessage';\nimport { sendRequest } from '../api';\nconst options = {\n  host: 'arweave.net',\n  port: 443,\n  protocol: 'https',\n  timeout: 20000,\n  logging: false // Enable network request logging\n};\n// TODO: to fix arConnect return result and interface\nvar ERRORS;\n(function (ERRORS) {\n  ERRORS[\"PLEASE_INSTALL_ARCONNECT\"] = \"PLEASE_INSTALL_ARCONNECT\";\n  ERRORS[\"ACCESS_ADDRESS_PERMISSION_NEEDED\"] = \"ACCESS_ADDRESS_PERMISSION_NEEDED\";\n  ERRORS[\"ACCESS_PUBLIC_KEY_PERMISSION_NEEDED\"] = \"ACCESS_PUBLIC_KEY_PERMISSION_NEEDED\";\n  ERRORS[\"SIGNATURE_PERMISSION_NEEDED\"] = \"NEED_SIGNATURE_PERMISSION\";\n  ERRORS[\"SIGN_TRANSACTION_PERMISSION_NEEDED\"] = \"SIGN_TRANSACTION_PERMISSION_NEEDED\";\n  ERRORS[\"SIGNATURE_FAILED\"] = \"SIGNATURE_FAILED\";\n  ERRORS[\"TRANSACTION_POST_ERROR\"] = \"TRANSACTION_POST_ERROR\";\n  ERRORS[\"ACCESS_PUBLIC_KEY_FAILED\"] = \"ACCESS_PUBLIC_KEY_FAILED\";\n})(ERRORS || (ERRORS = {}));\nexport const checkArPermissions = async permissions => {\n  let existingPermissions = [];\n  permissions = isString(permissions) ? [permissions] : permissions;\n  try {\n    existingPermissions = await window.arweaveWallet.getPermissions();\n  } catch {\n    throw new Error(ERRORS.PLEASE_INSTALL_ARCONNECT);\n  }\n  if (permissions.length === 0) {\n    return;\n  }\n  if (permissions.some(permission => {\n    return !existingPermissions.includes(permission);\n  })) {\n    await window.arweaveWallet.connect(permissions);\n  }\n};\nconst toArrayBuffer = buffer => {\n  const arrayBuffer = new ArrayBuffer(buffer.length);\n  const view = new Uint8Array(arrayBuffer);\n  for (let i = 0; i < buffer.length; ++i) {\n    view[i] = buffer[i];\n  }\n  return view;\n};\nconst signMessageAsync = async (arJWK, address, everHash) => {\n  const arweave = Arweave.init(options);\n  const everHashUnit8Array = toArrayBuffer(Buffer.from(everHash.slice(2), 'hex'));\n  let arOwner = '';\n  let signatureB64url = '';\n  // web\n  if (arJWK === 'use_wallet') {\n    try {\n      await checkArPermissions('ACCESS_PUBLIC_KEY');\n    } catch {\n      throw new Error(ERRORS.ACCESS_PUBLIC_KEY_PERMISSION_NEEDED);\n    }\n    try {\n      // TODO: wait arweave-js update arconnect.d.ts\n      arOwner = await window.arweaveWallet.getActivePublicKey();\n    } catch {\n      throw new Error(ERRORS.ACCESS_PUBLIC_KEY_FAILED);\n    }\n    try {\n      await checkArPermissions('SIGNATURE');\n    } catch {\n      throw new Error(ERRORS.SIGNATURE_PERMISSION_NEEDED);\n    }\n    const algorithm = {\n      name: 'RSA-PSS',\n      saltLength: 32\n    };\n    try {\n      const signature = await window.arweaveWallet.signature(everHashUnit8Array, algorithm);\n      const buf = new Uint8Array(Object.values(signature));\n      signatureB64url = Arweave.utils.bufferTob64Url(buf);\n    } catch {\n      throw new Error(ERRORS.SIGNATURE_FAILED);\n    }\n    // node\n  } else {\n    const buf = await arweave.crypto.sign(arJWK, everHashUnit8Array, {\n      saltLength: 32\n    });\n    arOwner = arJWK.n;\n    signatureB64url = Arweave.utils.bufferTob64Url(buf);\n  }\n  return `${signatureB64url},${arOwner}`;\n};\nconst verifySigAsync = async (address, messageData, sig) => {\n  const options = {\n    host: 'arweave.net',\n    port: 443,\n    protocol: 'https',\n    timeout: 20000,\n    logging: false\n  };\n  const [signature, owner] = sig.split(',');\n  const arweave = Arweave.init(options);\n  const ownerAddr = await arweave.wallets.ownerToAddress(owner);\n  const personalMsgHashBuffer = hashPersonalMessage(Buffer.from(messageData));\n  const isCorrectOwner = ownerAddr === address;\n  if (!isCorrectOwner) {\n    return false;\n  }\n  const verified = await arweave.crypto.verify(owner, personalMsgHashBuffer, arweave.utils.b64UrlToBuffer(signature));\n  return verified;\n};\nconst transferAsync = async (arJWK, chainType, {\n  symbol,\n  token,\n  from,\n  to,\n  value\n}) => {\n  const arweave = Arweave.init(options);\n  let transactionTransfer;\n  if (symbol.toUpperCase() === 'AR') {\n    transactionTransfer = await arweave.createTransaction({\n      target: to,\n      quantity: value.toString()\n    }, arJWK);\n    // PST Token\n  } else {\n    const tokenID = getTokenAddrByChainType(token, ChainType.arweave);\n    transactionTransfer = await arweave.createTransaction({\n      data: (Math.random() * 10000).toFixed(),\n      last_tx: isArweaveL2PSTTokenSymbol(token.symbol) ? 'p7vc1iSP6bvH_fCeUFa9LqoV5qiyW-jdEKouAT0XMoSwrNraB9mgpi29Q10waEpO' : undefined,\n      reward: isArweaveL2PSTTokenSymbol(token.symbol) ? '0' : undefined\n    }, arJWK);\n    transactionTransfer.addTag('App-Name', 'SmartWeaveAction');\n    transactionTransfer.addTag('App-Version', '0.3.0');\n    transactionTransfer.addTag('Contract', tokenID);\n    transactionTransfer.addTag('Input', JSON.stringify({\n      function: 'transfer',\n      qty: value.toNumber(),\n      target: to\n    }));\n  }\n  if (arJWK === 'use_wallet') {\n    try {\n      const existingPermissions = await window.arweaveWallet.getPermissions();\n      if (!existingPermissions.includes('SIGN_TRANSACTION')) {\n        await window.arweaveWallet.connect(['SIGN_TRANSACTION']);\n      }\n    } catch (_a) {\n      // Permission is already granted\n    }\n    const signedTransaction = await window.arweaveWallet.sign(transactionTransfer);\n    // TODO: Temp fix arConnect modify reward\n    transactionTransfer.reward = signedTransaction.reward;\n    transactionTransfer.setSignature({\n      id: signedTransaction.id,\n      owner: signedTransaction.owner,\n      tags: signedTransaction.tags,\n      signature: signedTransaction.signature\n    });\n  } else {\n    // 直接给原来 transaction 赋值了 signature 值\n    await arweave.transactions.sign(transactionTransfer, arJWK);\n  }\n  let responseTransfer = null;\n  if (isArweaveL2PSTTokenSymbol(token.symbol)) {\n    await sendRequest({\n      url: 'https://gateway.warp.cc/gateway/sequencer/register',\n      data: transactionTransfer,\n      headers: {\n        // 'Accept-Encoding': 'gzip, deflate, br',\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      method: 'POST'\n    });\n    responseTransfer = {\n      status: 200,\n      data: {}\n    };\n    // responseTransfer = await fetch('https://gateway.warp.cc/gateway/sequencer/register', {\n    //   method: 'POST',\n    //   body: JSON.stringify(transactionTransfer),\n    //   headers: {\n    //     'Accept-Encoding': 'gzip, deflate, br',\n    //     'Content-Type': 'application/json',\n    //     Accept: 'application/json'\n    //   }\n    // })\n  } else {\n    responseTransfer = await arweave.transactions.post(transactionTransfer);\n  }\n  if (responseTransfer.status === 200) {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (responseTransfer.data.error) {\n      throw new Error(responseTransfer.data.error);\n    }\n    return transactionTransfer;\n  }\n  throw new Error(ERRORS.TRANSACTION_POST_ERROR);\n};\nexport default {\n  signMessageAsync,\n  verifySigAsync,\n  transferAsync\n};","map":{"version":3,"names":["Arweave","isString","ChainType","getTokenAddrByChainType","isArweaveL2PSTTokenSymbol","hashPersonalMessage","sendRequest","options","host","port","protocol","timeout","logging","ERRORS","checkArPermissions","permissions","existingPermissions","window","arweaveWallet","getPermissions","Error","PLEASE_INSTALL_ARCONNECT","length","some","permission","includes","connect","toArrayBuffer","buffer","arrayBuffer","ArrayBuffer","view","Uint8Array","i","signMessageAsync","arJWK","address","everHash","arweave","init","everHashUnit8Array","Buffer","from","slice","arOwner","signatureB64url","ACCESS_PUBLIC_KEY_PERMISSION_NEEDED","getActivePublicKey","ACCESS_PUBLIC_KEY_FAILED","SIGNATURE_PERMISSION_NEEDED","algorithm","name","saltLength","signature","buf","Object","values","utils","bufferTob64Url","SIGNATURE_FAILED","crypto","sign","n","verifySigAsync","messageData","sig","owner","split","ownerAddr","wallets","ownerToAddress","personalMsgHashBuffer","isCorrectOwner","verified","verify","b64UrlToBuffer","transferAsync","chainType","symbol","token","to","value","transactionTransfer","toUpperCase","createTransaction","target","quantity","toString","tokenID","data","Math","random","toFixed","last_tx","undefined","reward","addTag","JSON","stringify","function","qty","toNumber","_a","signedTransaction","setSignature","id","tags","transactions","responseTransfer","url","headers","Accept","method","status","post","error","TRANSACTION_POST_ERROR"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/everpay/esm/lib/arweave.js"],"sourcesContent":["import Arweave from 'arweave';\nimport isString from 'lodash/isString';\nimport { ChainType } from '../types';\nimport { getTokenAddrByChainType, isArweaveL2PSTTokenSymbol } from '../utils/util';\nimport hashPersonalMessage from './hashPersonalMessage';\nimport { sendRequest } from '../api';\nconst options = {\n    host: 'arweave.net',\n    port: 443,\n    protocol: 'https',\n    timeout: 20000,\n    logging: false // Enable network request logging\n};\n// TODO: to fix arConnect return result and interface\nvar ERRORS;\n(function (ERRORS) {\n    ERRORS[\"PLEASE_INSTALL_ARCONNECT\"] = \"PLEASE_INSTALL_ARCONNECT\";\n    ERRORS[\"ACCESS_ADDRESS_PERMISSION_NEEDED\"] = \"ACCESS_ADDRESS_PERMISSION_NEEDED\";\n    ERRORS[\"ACCESS_PUBLIC_KEY_PERMISSION_NEEDED\"] = \"ACCESS_PUBLIC_KEY_PERMISSION_NEEDED\";\n    ERRORS[\"SIGNATURE_PERMISSION_NEEDED\"] = \"NEED_SIGNATURE_PERMISSION\";\n    ERRORS[\"SIGN_TRANSACTION_PERMISSION_NEEDED\"] = \"SIGN_TRANSACTION_PERMISSION_NEEDED\";\n    ERRORS[\"SIGNATURE_FAILED\"] = \"SIGNATURE_FAILED\";\n    ERRORS[\"TRANSACTION_POST_ERROR\"] = \"TRANSACTION_POST_ERROR\";\n    ERRORS[\"ACCESS_PUBLIC_KEY_FAILED\"] = \"ACCESS_PUBLIC_KEY_FAILED\";\n})(ERRORS || (ERRORS = {}));\nexport const checkArPermissions = async (permissions) => {\n    let existingPermissions = [];\n    permissions = isString(permissions) ? [permissions] : permissions;\n    try {\n        existingPermissions = await window.arweaveWallet.getPermissions();\n    }\n    catch {\n        throw new Error(ERRORS.PLEASE_INSTALL_ARCONNECT);\n    }\n    if (permissions.length === 0) {\n        return;\n    }\n    if (permissions.some(permission => {\n        return !existingPermissions.includes(permission);\n    })) {\n        await window.arweaveWallet.connect(permissions);\n    }\n};\nconst toArrayBuffer = (buffer) => {\n    const arrayBuffer = new ArrayBuffer(buffer.length);\n    const view = new Uint8Array(arrayBuffer);\n    for (let i = 0; i < buffer.length; ++i) {\n        view[i] = buffer[i];\n    }\n    return view;\n};\nconst signMessageAsync = async (arJWK, address, everHash) => {\n    const arweave = Arweave.init(options);\n    const everHashUnit8Array = toArrayBuffer(Buffer.from(everHash.slice(2), 'hex'));\n    let arOwner = '';\n    let signatureB64url = '';\n    // web\n    if (arJWK === 'use_wallet') {\n        try {\n            await checkArPermissions('ACCESS_PUBLIC_KEY');\n        }\n        catch {\n            throw new Error(ERRORS.ACCESS_PUBLIC_KEY_PERMISSION_NEEDED);\n        }\n        try {\n            // TODO: wait arweave-js update arconnect.d.ts\n            arOwner = await window.arweaveWallet.getActivePublicKey();\n        }\n        catch {\n            throw new Error(ERRORS.ACCESS_PUBLIC_KEY_FAILED);\n        }\n        try {\n            await checkArPermissions('SIGNATURE');\n        }\n        catch {\n            throw new Error(ERRORS.SIGNATURE_PERMISSION_NEEDED);\n        }\n        const algorithm = {\n            name: 'RSA-PSS',\n            saltLength: 32\n        };\n        try {\n            const signature = await window.arweaveWallet.signature(everHashUnit8Array, algorithm);\n            const buf = new Uint8Array(Object.values(signature));\n            signatureB64url = Arweave.utils.bufferTob64Url(buf);\n        }\n        catch {\n            throw new Error(ERRORS.SIGNATURE_FAILED);\n        }\n        // node\n    }\n    else {\n        const buf = await arweave.crypto.sign(arJWK, everHashUnit8Array, {\n            saltLength: 32\n        });\n        arOwner = arJWK.n;\n        signatureB64url = Arweave.utils.bufferTob64Url(buf);\n    }\n    return `${signatureB64url},${arOwner}`;\n};\nconst verifySigAsync = async (address, messageData, sig) => {\n    const options = {\n        host: 'arweave.net',\n        port: 443,\n        protocol: 'https',\n        timeout: 20000,\n        logging: false\n    };\n    const [signature, owner] = sig.split(',');\n    const arweave = Arweave.init(options);\n    const ownerAddr = await arweave.wallets.ownerToAddress(owner);\n    const personalMsgHashBuffer = hashPersonalMessage(Buffer.from(messageData));\n    const isCorrectOwner = ownerAddr === address;\n    if (!isCorrectOwner) {\n        return false;\n    }\n    const verified = await arweave.crypto.verify(owner, personalMsgHashBuffer, arweave.utils.b64UrlToBuffer(signature));\n    return verified;\n};\nconst transferAsync = async (arJWK, chainType, { symbol, token, from, to, value }) => {\n    const arweave = Arweave.init(options);\n    let transactionTransfer;\n    if (symbol.toUpperCase() === 'AR') {\n        transactionTransfer = await arweave.createTransaction({\n            target: to,\n            quantity: value.toString()\n        }, arJWK);\n        // PST Token\n    }\n    else {\n        const tokenID = getTokenAddrByChainType(token, ChainType.arweave);\n        transactionTransfer = await arweave.createTransaction({\n            data: (Math.random() * 10000).toFixed(),\n            last_tx: isArweaveL2PSTTokenSymbol(token.symbol) ? 'p7vc1iSP6bvH_fCeUFa9LqoV5qiyW-jdEKouAT0XMoSwrNraB9mgpi29Q10waEpO' : undefined,\n            reward: isArweaveL2PSTTokenSymbol(token.symbol) ? '0' : undefined\n        }, arJWK);\n        transactionTransfer.addTag('App-Name', 'SmartWeaveAction');\n        transactionTransfer.addTag('App-Version', '0.3.0');\n        transactionTransfer.addTag('Contract', tokenID);\n        transactionTransfer.addTag('Input', JSON.stringify({\n            function: 'transfer',\n            qty: value.toNumber(),\n            target: to\n        }));\n    }\n    if (arJWK === 'use_wallet') {\n        try {\n            const existingPermissions = await window.arweaveWallet.getPermissions();\n            if (!existingPermissions.includes('SIGN_TRANSACTION')) {\n                await window.arweaveWallet.connect(['SIGN_TRANSACTION']);\n            }\n        }\n        catch (_a) {\n            // Permission is already granted\n        }\n        const signedTransaction = await window.arweaveWallet.sign(transactionTransfer);\n        // TODO: Temp fix arConnect modify reward\n        transactionTransfer.reward = signedTransaction.reward;\n        transactionTransfer.setSignature({\n            id: signedTransaction.id,\n            owner: signedTransaction.owner,\n            tags: signedTransaction.tags,\n            signature: signedTransaction.signature\n        });\n    }\n    else {\n        // 直接给原来 transaction 赋值了 signature 值\n        await arweave.transactions.sign(transactionTransfer, arJWK);\n    }\n    let responseTransfer = null;\n    if (isArweaveL2PSTTokenSymbol(token.symbol)) {\n        await sendRequest({\n            url: 'https://gateway.warp.cc/gateway/sequencer/register',\n            data: transactionTransfer,\n            headers: {\n                // 'Accept-Encoding': 'gzip, deflate, br',\n                'Content-Type': 'application/json',\n                Accept: 'application/json'\n            },\n            method: 'POST'\n        });\n        responseTransfer = {\n            status: 200,\n            data: {}\n        };\n        // responseTransfer = await fetch('https://gateway.warp.cc/gateway/sequencer/register', {\n        //   method: 'POST',\n        //   body: JSON.stringify(transactionTransfer),\n        //   headers: {\n        //     'Accept-Encoding': 'gzip, deflate, br',\n        //     'Content-Type': 'application/json',\n        //     Accept: 'application/json'\n        //   }\n        // })\n    }\n    else {\n        responseTransfer = await arweave.transactions.post(transactionTransfer);\n    }\n    if (responseTransfer.status === 200) {\n        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n        if (responseTransfer.data.error) {\n            throw new Error(responseTransfer.data.error);\n        }\n        return transactionTransfer;\n    }\n    throw new Error(ERRORS.TRANSACTION_POST_ERROR);\n};\nexport default {\n    signMessageAsync,\n    verifySigAsync,\n    transferAsync\n};\n"],"mappings":";;;AAAA,OAAOA,OAAO,MAAM,SAAS;AAC7B,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,SAASC,SAAS,QAAQ,UAAU;AACpC,SAASC,uBAAuB,EAAEC,yBAAyB,QAAQ,eAAe;AAClF,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,SAASC,WAAW,QAAQ,QAAQ;AACpC,MAAMC,OAAO,GAAG;EACZC,IAAI,EAAE,aAAa;EACnBC,IAAI,EAAE,GAAG;EACTC,QAAQ,EAAE,OAAO;EACjBC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE,KAAK,CAAC;AACnB,CAAC;AACD;AACA,IAAIC,MAAM;AACV,CAAC,UAAUA,MAAM,EAAE;EACfA,MAAM,CAAC,0BAA0B,CAAC,GAAG,0BAA0B;EAC/DA,MAAM,CAAC,kCAAkC,CAAC,GAAG,kCAAkC;EAC/EA,MAAM,CAAC,qCAAqC,CAAC,GAAG,qCAAqC;EACrFA,MAAM,CAAC,6BAA6B,CAAC,GAAG,2BAA2B;EACnEA,MAAM,CAAC,oCAAoC,CAAC,GAAG,oCAAoC;EACnFA,MAAM,CAAC,kBAAkB,CAAC,GAAG,kBAAkB;EAC/CA,MAAM,CAAC,wBAAwB,CAAC,GAAG,wBAAwB;EAC3DA,MAAM,CAAC,0BAA0B,CAAC,GAAG,0BAA0B;AACnE,CAAC,EAAEA,MAAM,KAAKA,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3B,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,WAAW,IAAK;EACrD,IAAIC,mBAAmB,GAAG,EAAE;EAC5BD,WAAW,GAAGd,QAAQ,CAACc,WAAW,CAAC,GAAG,CAACA,WAAW,CAAC,GAAGA,WAAW;EACjE,IAAI;IACAC,mBAAmB,GAAG,MAAMC,MAAM,CAACC,aAAa,CAACC,cAAc,CAAC,CAAC;EACrE,CAAC,CACD,MAAM;IACF,MAAM,IAAIC,KAAK,CAACP,MAAM,CAACQ,wBAAwB,CAAC;EACpD;EACA,IAAIN,WAAW,CAACO,MAAM,KAAK,CAAC,EAAE;IAC1B;EACJ;EACA,IAAIP,WAAW,CAACQ,IAAI,CAACC,UAAU,IAAI;IAC/B,OAAO,CAACR,mBAAmB,CAACS,QAAQ,CAACD,UAAU,CAAC;EACpD,CAAC,CAAC,EAAE;IACA,MAAMP,MAAM,CAACC,aAAa,CAACQ,OAAO,CAACX,WAAW,CAAC;EACnD;AACJ,CAAC;AACD,MAAMY,aAAa,GAAIC,MAAM,IAAK;EAC9B,MAAMC,WAAW,GAAG,IAAIC,WAAW,CAACF,MAAM,CAACN,MAAM,CAAC;EAClD,MAAMS,IAAI,GAAG,IAAIC,UAAU,CAACH,WAAW,CAAC;EACxC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,CAACN,MAAM,EAAE,EAAEW,CAAC,EAAE;IACpCF,IAAI,CAACE,CAAC,CAAC,GAAGL,MAAM,CAACK,CAAC,CAAC;EACvB;EACA,OAAOF,IAAI;AACf,CAAC;AACD,MAAMG,gBAAgB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,OAAO,EAAEC,QAAQ,KAAK;EACzD,MAAMC,OAAO,GAAGtC,OAAO,CAACuC,IAAI,CAAChC,OAAO,CAAC;EACrC,MAAMiC,kBAAkB,GAAGb,aAAa,CAACc,MAAM,CAACC,IAAI,CAACL,QAAQ,CAACM,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;EAC/E,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIC,eAAe,GAAG,EAAE;EACxB;EACA,IAAIV,KAAK,KAAK,YAAY,EAAE;IACxB,IAAI;MACA,MAAMrB,kBAAkB,CAAC,mBAAmB,CAAC;IACjD,CAAC,CACD,MAAM;MACF,MAAM,IAAIM,KAAK,CAACP,MAAM,CAACiC,mCAAmC,CAAC;IAC/D;IACA,IAAI;MACA;MACAF,OAAO,GAAG,MAAM3B,MAAM,CAACC,aAAa,CAAC6B,kBAAkB,CAAC,CAAC;IAC7D,CAAC,CACD,MAAM;MACF,MAAM,IAAI3B,KAAK,CAACP,MAAM,CAACmC,wBAAwB,CAAC;IACpD;IACA,IAAI;MACA,MAAMlC,kBAAkB,CAAC,WAAW,CAAC;IACzC,CAAC,CACD,MAAM;MACF,MAAM,IAAIM,KAAK,CAACP,MAAM,CAACoC,2BAA2B,CAAC;IACvD;IACA,MAAMC,SAAS,GAAG;MACdC,IAAI,EAAE,SAAS;MACfC,UAAU,EAAE;IAChB,CAAC;IACD,IAAI;MACA,MAAMC,SAAS,GAAG,MAAMpC,MAAM,CAACC,aAAa,CAACmC,SAAS,CAACb,kBAAkB,EAAEU,SAAS,CAAC;MACrF,MAAMI,GAAG,GAAG,IAAItB,UAAU,CAACuB,MAAM,CAACC,MAAM,CAACH,SAAS,CAAC,CAAC;MACpDR,eAAe,GAAG7C,OAAO,CAACyD,KAAK,CAACC,cAAc,CAACJ,GAAG,CAAC;IACvD,CAAC,CACD,MAAM;MACF,MAAM,IAAIlC,KAAK,CAACP,MAAM,CAAC8C,gBAAgB,CAAC;IAC5C;IACA;EACJ,CAAC,MACI;IACD,MAAML,GAAG,GAAG,MAAMhB,OAAO,CAACsB,MAAM,CAACC,IAAI,CAAC1B,KAAK,EAAEK,kBAAkB,EAAE;MAC7DY,UAAU,EAAE;IAChB,CAAC,CAAC;IACFR,OAAO,GAAGT,KAAK,CAAC2B,CAAC;IACjBjB,eAAe,GAAG7C,OAAO,CAACyD,KAAK,CAACC,cAAc,CAACJ,GAAG,CAAC;EACvD;EACA,OAAQ,GAAET,eAAgB,IAAGD,OAAQ,EAAC;AAC1C,CAAC;AACD,MAAMmB,cAAc,GAAG,MAAAA,CAAO3B,OAAO,EAAE4B,WAAW,EAAEC,GAAG,KAAK;EACxD,MAAM1D,OAAO,GAAG;IACZC,IAAI,EAAE,aAAa;IACnBC,IAAI,EAAE,GAAG;IACTC,QAAQ,EAAE,OAAO;IACjBC,OAAO,EAAE,KAAK;IACdC,OAAO,EAAE;EACb,CAAC;EACD,MAAM,CAACyC,SAAS,EAAEa,KAAK,CAAC,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;EACzC,MAAM7B,OAAO,GAAGtC,OAAO,CAACuC,IAAI,CAAChC,OAAO,CAAC;EACrC,MAAM6D,SAAS,GAAG,MAAM9B,OAAO,CAAC+B,OAAO,CAACC,cAAc,CAACJ,KAAK,CAAC;EAC7D,MAAMK,qBAAqB,GAAGlE,mBAAmB,CAACoC,MAAM,CAACC,IAAI,CAACsB,WAAW,CAAC,CAAC;EAC3E,MAAMQ,cAAc,GAAGJ,SAAS,KAAKhC,OAAO;EAC5C,IAAI,CAACoC,cAAc,EAAE;IACjB,OAAO,KAAK;EAChB;EACA,MAAMC,QAAQ,GAAG,MAAMnC,OAAO,CAACsB,MAAM,CAACc,MAAM,CAACR,KAAK,EAAEK,qBAAqB,EAAEjC,OAAO,CAACmB,KAAK,CAACkB,cAAc,CAACtB,SAAS,CAAC,CAAC;EACnH,OAAOoB,QAAQ;AACnB,CAAC;AACD,MAAMG,aAAa,GAAG,MAAAA,CAAOzC,KAAK,EAAE0C,SAAS,EAAE;EAAEC,MAAM;EAAEC,KAAK;EAAErC,IAAI;EAAEsC,EAAE;EAAEC;AAAM,CAAC,KAAK;EAClF,MAAM3C,OAAO,GAAGtC,OAAO,CAACuC,IAAI,CAAChC,OAAO,CAAC;EACrC,IAAI2E,mBAAmB;EACvB,IAAIJ,MAAM,CAACK,WAAW,CAAC,CAAC,KAAK,IAAI,EAAE;IAC/BD,mBAAmB,GAAG,MAAM5C,OAAO,CAAC8C,iBAAiB,CAAC;MAClDC,MAAM,EAAEL,EAAE;MACVM,QAAQ,EAAEL,KAAK,CAACM,QAAQ,CAAC;IAC7B,CAAC,EAAEpD,KAAK,CAAC;IACT;EACJ,CAAC,MACI;IACD,MAAMqD,OAAO,GAAGrF,uBAAuB,CAAC4E,KAAK,EAAE7E,SAAS,CAACoC,OAAO,CAAC;IACjE4C,mBAAmB,GAAG,MAAM5C,OAAO,CAAC8C,iBAAiB,CAAC;MAClDK,IAAI,EAAE,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,KAAK,EAAEC,OAAO,CAAC,CAAC;MACvCC,OAAO,EAAEzF,yBAAyB,CAAC2E,KAAK,CAACD,MAAM,CAAC,GAAG,kEAAkE,GAAGgB,SAAS;MACjIC,MAAM,EAAE3F,yBAAyB,CAAC2E,KAAK,CAACD,MAAM,CAAC,GAAG,GAAG,GAAGgB;IAC5D,CAAC,EAAE3D,KAAK,CAAC;IACT+C,mBAAmB,CAACc,MAAM,CAAC,UAAU,EAAE,kBAAkB,CAAC;IAC1Dd,mBAAmB,CAACc,MAAM,CAAC,aAAa,EAAE,OAAO,CAAC;IAClDd,mBAAmB,CAACc,MAAM,CAAC,UAAU,EAAER,OAAO,CAAC;IAC/CN,mBAAmB,CAACc,MAAM,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAAC;MAC/CC,QAAQ,EAAE,UAAU;MACpBC,GAAG,EAAEnB,KAAK,CAACoB,QAAQ,CAAC,CAAC;MACrBhB,MAAM,EAAEL;IACZ,CAAC,CAAC,CAAC;EACP;EACA,IAAI7C,KAAK,KAAK,YAAY,EAAE;IACxB,IAAI;MACA,MAAMnB,mBAAmB,GAAG,MAAMC,MAAM,CAACC,aAAa,CAACC,cAAc,CAAC,CAAC;MACvE,IAAI,CAACH,mBAAmB,CAACS,QAAQ,CAAC,kBAAkB,CAAC,EAAE;QACnD,MAAMR,MAAM,CAACC,aAAa,CAACQ,OAAO,CAAC,CAAC,kBAAkB,CAAC,CAAC;MAC5D;IACJ,CAAC,CACD,OAAO4E,EAAE,EAAE;MACP;IAAA;IAEJ,MAAMC,iBAAiB,GAAG,MAAMtF,MAAM,CAACC,aAAa,CAAC2C,IAAI,CAACqB,mBAAmB,CAAC;IAC9E;IACAA,mBAAmB,CAACa,MAAM,GAAGQ,iBAAiB,CAACR,MAAM;IACrDb,mBAAmB,CAACsB,YAAY,CAAC;MAC7BC,EAAE,EAAEF,iBAAiB,CAACE,EAAE;MACxBvC,KAAK,EAAEqC,iBAAiB,CAACrC,KAAK;MAC9BwC,IAAI,EAAEH,iBAAiB,CAACG,IAAI;MAC5BrD,SAAS,EAAEkD,iBAAiB,CAAClD;IACjC,CAAC,CAAC;EACN,CAAC,MACI;IACD;IACA,MAAMf,OAAO,CAACqE,YAAY,CAAC9C,IAAI,CAACqB,mBAAmB,EAAE/C,KAAK,CAAC;EAC/D;EACA,IAAIyE,gBAAgB,GAAG,IAAI;EAC3B,IAAIxG,yBAAyB,CAAC2E,KAAK,CAACD,MAAM,CAAC,EAAE;IACzC,MAAMxE,WAAW,CAAC;MACduG,GAAG,EAAE,oDAAoD;MACzDpB,IAAI,EAAEP,mBAAmB;MACzB4B,OAAO,EAAE;QACL;QACA,cAAc,EAAE,kBAAkB;QAClCC,MAAM,EAAE;MACZ,CAAC;MACDC,MAAM,EAAE;IACZ,CAAC,CAAC;IACFJ,gBAAgB,GAAG;MACfK,MAAM,EAAE,GAAG;MACXxB,IAAI,EAAE,CAAC;IACX,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC,MACI;IACDmB,gBAAgB,GAAG,MAAMtE,OAAO,CAACqE,YAAY,CAACO,IAAI,CAAChC,mBAAmB,CAAC;EAC3E;EACA,IAAI0B,gBAAgB,CAACK,MAAM,KAAK,GAAG,EAAE;IACjC;IACA,IAAIL,gBAAgB,CAACnB,IAAI,CAAC0B,KAAK,EAAE;MAC7B,MAAM,IAAI/F,KAAK,CAACwF,gBAAgB,CAACnB,IAAI,CAAC0B,KAAK,CAAC;IAChD;IACA,OAAOjC,mBAAmB;EAC9B;EACA,MAAM,IAAI9D,KAAK,CAACP,MAAM,CAACuG,sBAAsB,CAAC;AAClD,CAAC;AACD,eAAe;EACXlF,gBAAgB;EAChB6B,cAAc;EACda;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}