{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/util/web3.ts\nvar web3_exports = {};\n__export(web3_exports, {\n  Web3Interact: () => Web3Interact\n});\nmodule.exports = __toCommonJS(web3_exports);\nvar import_abi = __toESM(require(\"./abi\"));\nvar import_web3 = __toESM(require(\"web3\"));\nvar import_cipher = require(\"./cipher\");\nvar import_eth_sig_util = require(\"@metamask/eth-sig-util\");\nvar import_constant = require(\"./constant\");\nvar import_MindLake = require(\"../MindLake\");\nvar _Web3Interact = class {\n  constructor() {\n    if (!window.ethereum) {\n      throw new Error(\"Please install a wallet\");\n    }\n    let currentProvider;\n    if (window.ethereum.providers) {\n      currentProvider = window.ethereum.providers.find(p => p.isMetaMask);\n    } else {\n      currentProvider = window.ethereum;\n    }\n    if (!currentProvider.isMetaMask) {\n      throw new Error(\"Only MetamMask wallet is supported currently. Please install or replace\");\n    }\n    this.provider = currentProvider;\n    this.web3 = new import_web3.default(currentProvider);\n    this.contract = new this.web3.eth.Contract(\n    // @ts-ignore\n    import_abi.default, _Web3Interact.CONTRACT_ADDRESS);\n    this._onListen();\n  }\n  _onListen() {\n    this.provider.on(\"accountsChanged\", this._onAccountsChanged.bind(this));\n    this.provider.on(\"chainChanged\", this._onChainChanged.bind(this));\n    this.provider.on(\"disconnect\", this._onDisconnect.bind(this));\n  }\n  /**\n   * connected wallet account change event\n   * @param accounts\n   * @private\n   */\n  _onAccountsChanged(accounts) {\n    console.log(\"Wallet address changed:\", accounts && accounts[0]);\n    localStorage.setItem(import_constant.WALLET_key, accounts && accounts[0]);\n    this.account = accounts && accounts[0];\n    this._walletChange();\n  }\n  /**\n   * chain change event\n   * @param chainId\n   * @private\n   */\n  _onChainChanged(chainId) {\n    console.log(\"Chain changed:  \", chainId, this.account);\n  }\n  _walletChange() {\n    if (this.account) {\n      this.mkCipherBuffer = void 0;\n      this.mkBuffer = void 0;\n      this.privateKeyCipherBuffer = void 0;\n      this.publicKey = void 0;\n    }\n  }\n  /**\n   * wallet disconnect\n   * @private\n   */\n  _onDisconnect() {\n    console.log(\"Wallet disconnect: \");\n  }\n  /**\n   * get walletAddress\n   */\n  async getWalletAccount() {\n    if (!this.account || !import_MindLake.MindLake.isConnected) {\n      const accounts = await this.provider.request({\n        method: \"eth_requestAccounts\"\n      });\n      if (!accounts.length) {\n        throw new Error(\"No accounts returned\");\n      }\n      this.account = accounts[0];\n    }\n    return this.account;\n  }\n  async checkConnection() {\n    const accounts = await this.provider.request({\n      method: \"eth_accounts\"\n    });\n    if (accounts.length) {\n      this.account = accounts[0];\n      localStorage.setItem(import_constant.WALLET_key, accounts[0]);\n    }\n  }\n  /**\n   * wallet signature\n   * @param signData\n   */\n  async personalSignature(signData) {\n    const signature = await this.provider.request({\n      method: \"personal_sign\",\n      params: [import_web3.default.utils.fromUtf8(signData), this.account]\n    });\n    return signature;\n  }\n  /**\n   * get wallet publicKey\n   * @private\n   */\n  async _getEncryptionPublicKey() {\n    if (this.provider) {\n      if (this.publicKey) {\n        return this.publicKey;\n      }\n      const keyB64 = await this.provider.request({\n        method: \"eth_getEncryptionPublicKey\",\n        params: [this.account]\n      });\n      this.publicKey = keyB64;\n      return this.publicKey;\n    }\n  }\n  /**\n   * get mk\n   */\n  async getMekBytes() {\n    await this._loadKeysCipherFromChain();\n    if (!this.mkCipherBuffer) {\n      await this._generateKeysCipherToChain();\n    }\n    if (!this.mkBuffer) {\n      this.mkBuffer = await this._decryptMk(this.mkCipherBuffer);\n    }\n    return this.mkBuffer;\n  }\n  /**\n   * get pk\n   */\n  async getPkPem() {\n    const mk = await this.getMekBytes();\n    const iv = this.privateKeyCipherBuffer.slice(0, 16);\n    const cipher = this.privateKeyCipherBuffer.slice(16);\n    const decrypt = import_cipher.CipherHelper.aesDecrypt(mk, iv, cipher);\n    const {\n      publicKeyPem,\n      privateKeyPem\n    } = import_cipher.CipherHelper.getPublicKeyPemFromPrivate(decrypt);\n    return {\n      privateKeyPem,\n      publicKeyPem\n    };\n  }\n  /**\n   *load keys form chain\n   */\n  async _loadKeysCipherFromChain() {\n    if (this.mkCipherBuffer && this.privateKeyCipherBuffer) {\n      return;\n    }\n    const account = await this.getWalletAccount();\n    const keys = await this.contract.methods.getKeys(account).call();\n    if (keys && keys.MK && keys.SK) {\n      this.mkCipherBuffer = Buffer.from(keys.MK.slice(2), \"hex\");\n      this.privateKeyCipherBuffer = Buffer.from(keys.SK.slice(2), \"hex\");\n    }\n  }\n  /**\n   * generateKeys form local to chain\n   * @private\n   */\n  async _generateKeysCipherToChain() {\n    if (this.mkCipherBuffer && this.privateKeyCipherBuffer) {\n      return;\n    }\n    const account = await this.getWalletAccount();\n    const checkAccount = await this.web3.utils.toChecksumAddress(account);\n    const mk = import_cipher.CipherHelper.generateMk();\n    const mekBuffer = Buffer.from(mk, \"hex\");\n    const keys = import_cipher.CipherHelper.createKeyPemString();\n    const iv = import_cipher.CipherHelper.randomBytes();\n    const privateKeyCipherBuffer = Buffer.concat([iv, import_cipher.CipherHelper.aesEncrypt(mekBuffer, iv, keys.privateKeyPem)]);\n    const mkCipherBuffer = await this._encryptMk(mk);\n    if (!mkCipherBuffer) {\n      throw new Error(\"mk encrypt error\");\n    }\n    const txHash = await this.contract.methods.setKeys(mkCipherBuffer, privateKeyCipherBuffer).send({\n      from: checkAccount\n    });\n    if (txHash && txHash.blockHash) {\n      this.mkCipherBuffer = mkCipherBuffer;\n      this.privateKeyCipherBuffer = privateKeyCipherBuffer;\n    }\n  }\n  /**\n   * encrypt mk\n   * @param mk\n   * @private\n   */\n  async _encryptMk(mk) {\n    const pubKey = await this._getEncryptionPublicKey();\n    if (pubKey) {\n      const enc = (0, import_eth_sig_util.encrypt)({\n        publicKey: pubKey,\n        data: Buffer.from(mk, \"hex\").toString(\"base64\"),\n        version: \"x25519-xsalsa20-poly1305\"\n      });\n      const buf = Buffer.concat([Buffer.from(enc.ephemPublicKey, \"base64\"), Buffer.from(enc.nonce, \"base64\"), Buffer.from(enc.ciphertext, \"base64\")]);\n      return buf;\n    }\n  }\n  /**\n   * decrypt mk\n   * @param data\n   * @private\n   */\n  async _decryptMk(data) {\n    const structuredData = {\n      version: \"x25519-xsalsa20-poly1305\",\n      ephemPublicKey: data.slice(0, 32).toString(\"base64\"),\n      nonce: data.slice(32, 56).toString(\"base64\"),\n      ciphertext: data.slice(56).toString(\"base64\")\n    };\n    const ct = `0x${Buffer.from(JSON.stringify(structuredData), \"utf8\").toString(\"hex\")}`;\n    const decrypt = await this.provider.request({\n      method: \"eth_decrypt\",\n      params: [ct, this.account]\n    });\n    return Buffer.from(decrypt, \"base64\");\n  }\n};\nvar Web3Interact = _Web3Interact;\n/**\n * contract address\n */\nWeb3Interact.CONTRACT_ADDRESS = \"0xF5932e67e84F08965DC6D62C2B67f47a6826E5a7\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Web3Interact\n});","map":{"version":3,"names":["__create","Object","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getProtoOf","getPrototypeOf","__hasOwnProp","prototype","hasOwnProperty","__export","target","all","name","get","enumerable","__copyProps","to","from","except","desc","key","call","__toESM","mod","isNodeMode","__esModule","value","__toCommonJS","web3_exports","Web3Interact","module","exports","import_abi","require","import_web3","import_cipher","import_eth_sig_util","import_constant","import_MindLake","_Web3Interact","constructor","window","ethereum","Error","currentProvider","providers","find","p","isMetaMask","provider","web3","default","contract","eth","Contract","CONTRACT_ADDRESS","_onListen","on","_onAccountsChanged","bind","_onChainChanged","_onDisconnect","accounts","console","log","localStorage","setItem","WALLET_key","account","_walletChange","chainId","mkCipherBuffer","mkBuffer","privateKeyCipherBuffer","publicKey","getWalletAccount","MindLake","isConnected","request","method","length","checkConnection","personalSignature","signData","signature","params","utils","fromUtf8","_getEncryptionPublicKey","keyB64","getMekBytes","_loadKeysCipherFromChain","_generateKeysCipherToChain","_decryptMk","getPkPem","mk","iv","slice","cipher","decrypt","CipherHelper","aesDecrypt","publicKeyPem","privateKeyPem","getPublicKeyPemFromPrivate","keys","methods","getKeys","MK","SK","Buffer","checkAccount","toChecksumAddress","generateMk","mekBuffer","createKeyPemString","randomBytes","concat","aesEncrypt","_encryptMk","txHash","setKeys","send","blockHash","pubKey","enc","encrypt","data","toString","version","buf","ephemPublicKey","nonce","ciphertext","structuredData","ct","JSON","stringify"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/mind-lake-sdk/dist/util/web3.js"],"sourcesContent":["var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/util/web3.ts\nvar web3_exports = {};\n__export(web3_exports, {\n  Web3Interact: () => Web3Interact\n});\nmodule.exports = __toCommonJS(web3_exports);\nvar import_abi = __toESM(require(\"./abi\"));\nvar import_web3 = __toESM(require(\"web3\"));\nvar import_cipher = require(\"./cipher\");\nvar import_eth_sig_util = require(\"@metamask/eth-sig-util\");\nvar import_constant = require(\"./constant\");\nvar import_MindLake = require(\"../MindLake\");\nvar _Web3Interact = class {\n  constructor() {\n    if (!window.ethereum) {\n      throw new Error(\"Please install a wallet\");\n    }\n    let currentProvider;\n    if (window.ethereum.providers) {\n      currentProvider = window.ethereum.providers.find((p) => p.isMetaMask);\n    } else {\n      currentProvider = window.ethereum;\n    }\n    if (!currentProvider.isMetaMask) {\n      throw new Error(\"Only MetamMask wallet is supported currently. Please install or replace\");\n    }\n    this.provider = currentProvider;\n    this.web3 = new import_web3.default(currentProvider);\n    this.contract = new this.web3.eth.Contract(\n      // @ts-ignore\n      import_abi.default,\n      _Web3Interact.CONTRACT_ADDRESS\n    );\n    this._onListen();\n  }\n  _onListen() {\n    this.provider.on(\"accountsChanged\", this._onAccountsChanged.bind(this));\n    this.provider.on(\"chainChanged\", this._onChainChanged.bind(this));\n    this.provider.on(\"disconnect\", this._onDisconnect.bind(this));\n  }\n  /**\n   * connected wallet account change event\n   * @param accounts\n   * @private\n   */\n  _onAccountsChanged(accounts) {\n    console.log(\"Wallet address changed:\", accounts && accounts[0]);\n    localStorage.setItem(import_constant.WALLET_key, accounts && accounts[0]);\n    this.account = accounts && accounts[0];\n    this._walletChange();\n  }\n  /**\n   * chain change event\n   * @param chainId\n   * @private\n   */\n  _onChainChanged(chainId) {\n    console.log(\"Chain changed:  \", chainId, this.account);\n  }\n  _walletChange() {\n    if (this.account) {\n      this.mkCipherBuffer = void 0;\n      this.mkBuffer = void 0;\n      this.privateKeyCipherBuffer = void 0;\n      this.publicKey = void 0;\n    }\n  }\n  /**\n   * wallet disconnect\n   * @private\n   */\n  _onDisconnect() {\n    console.log(\"Wallet disconnect: \");\n  }\n  /**\n   * get walletAddress\n   */\n  async getWalletAccount() {\n    if (!this.account || !import_MindLake.MindLake.isConnected) {\n      const accounts = await this.provider.request({\n        method: \"eth_requestAccounts\"\n      });\n      if (!accounts.length) {\n        throw new Error(\"No accounts returned\");\n      }\n      this.account = accounts[0];\n    }\n    return this.account;\n  }\n  async checkConnection() {\n    const accounts = await this.provider.request({\n      method: \"eth_accounts\"\n    });\n    if (accounts.length) {\n      this.account = accounts[0];\n      localStorage.setItem(import_constant.WALLET_key, accounts[0]);\n    }\n  }\n  /**\n   * wallet signature\n   * @param signData\n   */\n  async personalSignature(signData) {\n    const signature = await this.provider.request({\n      method: \"personal_sign\",\n      params: [import_web3.default.utils.fromUtf8(signData), this.account]\n    });\n    return signature;\n  }\n  /**\n   * get wallet publicKey\n   * @private\n   */\n  async _getEncryptionPublicKey() {\n    if (this.provider) {\n      if (this.publicKey) {\n        return this.publicKey;\n      }\n      const keyB64 = await this.provider.request({\n        method: \"eth_getEncryptionPublicKey\",\n        params: [this.account]\n      });\n      this.publicKey = keyB64;\n      return this.publicKey;\n    }\n  }\n  /**\n   * get mk\n   */\n  async getMekBytes() {\n    await this._loadKeysCipherFromChain();\n    if (!this.mkCipherBuffer) {\n      await this._generateKeysCipherToChain();\n    }\n    if (!this.mkBuffer) {\n      this.mkBuffer = await this._decryptMk(this.mkCipherBuffer);\n    }\n    return this.mkBuffer;\n  }\n  /**\n   * get pk\n   */\n  async getPkPem() {\n    const mk = await this.getMekBytes();\n    const iv = this.privateKeyCipherBuffer.slice(0, 16);\n    const cipher = this.privateKeyCipherBuffer.slice(16);\n    const decrypt = import_cipher.CipherHelper.aesDecrypt(mk, iv, cipher);\n    const { publicKeyPem, privateKeyPem } = import_cipher.CipherHelper.getPublicKeyPemFromPrivate(decrypt);\n    return { privateKeyPem, publicKeyPem };\n  }\n  /**\n   *load keys form chain\n   */\n  async _loadKeysCipherFromChain() {\n    if (this.mkCipherBuffer && this.privateKeyCipherBuffer) {\n      return;\n    }\n    const account = await this.getWalletAccount();\n    const keys = await this.contract.methods.getKeys(account).call();\n    if (keys && keys.MK && keys.SK) {\n      this.mkCipherBuffer = Buffer.from(keys.MK.slice(2), \"hex\");\n      this.privateKeyCipherBuffer = Buffer.from(keys.SK.slice(2), \"hex\");\n    }\n  }\n  /**\n   * generateKeys form local to chain\n   * @private\n   */\n  async _generateKeysCipherToChain() {\n    if (this.mkCipherBuffer && this.privateKeyCipherBuffer) {\n      return;\n    }\n    const account = await this.getWalletAccount();\n    const checkAccount = await this.web3.utils.toChecksumAddress(account);\n    const mk = import_cipher.CipherHelper.generateMk();\n    const mekBuffer = Buffer.from(mk, \"hex\");\n    const keys = import_cipher.CipherHelper.createKeyPemString();\n    const iv = import_cipher.CipherHelper.randomBytes();\n    const privateKeyCipherBuffer = Buffer.concat([\n      iv,\n      import_cipher.CipherHelper.aesEncrypt(mekBuffer, iv, keys.privateKeyPem)\n    ]);\n    const mkCipherBuffer = await this._encryptMk(mk);\n    if (!mkCipherBuffer) {\n      throw new Error(\"mk encrypt error\");\n    }\n    const txHash = await this.contract.methods.setKeys(mkCipherBuffer, privateKeyCipherBuffer).send({ from: checkAccount });\n    if (txHash && txHash.blockHash) {\n      this.mkCipherBuffer = mkCipherBuffer;\n      this.privateKeyCipherBuffer = privateKeyCipherBuffer;\n    }\n  }\n  /**\n   * encrypt mk\n   * @param mk\n   * @private\n   */\n  async _encryptMk(mk) {\n    const pubKey = await this._getEncryptionPublicKey();\n    if (pubKey) {\n      const enc = (0, import_eth_sig_util.encrypt)({\n        publicKey: pubKey,\n        data: Buffer.from(mk, \"hex\").toString(\"base64\"),\n        version: \"x25519-xsalsa20-poly1305\"\n      });\n      const buf = Buffer.concat([\n        Buffer.from(enc.ephemPublicKey, \"base64\"),\n        Buffer.from(enc.nonce, \"base64\"),\n        Buffer.from(enc.ciphertext, \"base64\")\n      ]);\n      return buf;\n    }\n  }\n  /**\n   * decrypt mk\n   * @param data\n   * @private\n   */\n  async _decryptMk(data) {\n    const structuredData = {\n      version: \"x25519-xsalsa20-poly1305\",\n      ephemPublicKey: data.slice(0, 32).toString(\"base64\"),\n      nonce: data.slice(32, 56).toString(\"base64\"),\n      ciphertext: data.slice(56).toString(\"base64\")\n    };\n    const ct = `0x${Buffer.from(\n      JSON.stringify(structuredData),\n      \"utf8\"\n    ).toString(\"hex\")}`;\n    const decrypt = await this.provider.request({\n      method: \"eth_decrypt\",\n      params: [ct, this.account]\n    });\n    return Buffer.from(decrypt, \"base64\");\n  }\n};\nvar Web3Interact = _Web3Interact;\n/**\n * contract address\n */\nWeb3Interact.CONTRACT_ADDRESS = \"0xF5932e67e84F08965DC6D62C2B67f47a6826E5a7\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Web3Interact\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}