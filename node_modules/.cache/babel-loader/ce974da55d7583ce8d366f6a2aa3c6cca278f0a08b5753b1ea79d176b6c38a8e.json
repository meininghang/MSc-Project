{"ast":null,"code":"import { ChainType, EverpayActionWithDeposit } from '../types';\nimport { ERRORS } from './errors';\nconst cases = {\n  symbol: ERRORS.SYMBOL_NOT_FOUND,\n  token: ERRORS.TOKEN_NOT_FOUND,\n  account: ERRORS.ACCOUNT_NOT_FOUND,\n  everHash: ERRORS.EVERHASH_NOT_FOUND,\n  chainTxHash: ERRORS.CHAIN_TX_HASH_NOT_FOUND,\n  action: ERRORS.INVALID_ACTION,\n  to: ERRORS.TO_NOT_FOUND,\n  ethConnectedSigner: ERRORS.ETH_SIGENER_NOT_FOUND\n};\nexport const checkItem = (itemName, param) => {\n  if (param === null || param === undefined || param === '' || param === 0) {\n    throw new Error(cases[itemName]);\n  }\n  if (itemName === 'amount' && !(param >= 0)) {\n    throw new Error(ERRORS.INVALID_AMOUNT);\n  }\n  const actions = [EverpayActionWithDeposit.deposit, EverpayActionWithDeposit.withdraw, EverpayActionWithDeposit.transfer, EverpayActionWithDeposit.bundle];\n  if (itemName === 'action' && !actions.includes(param)) {\n    throw new Error(cases.action);\n  }\n};\nexport const checkParams = params => {\n  Object.keys(params).forEach(key => checkItem(key, params[key]));\n};\nexport const checkSignConfig = (accountType, config) => {\n  if (accountType === ChainType.ethereum) {\n    checkItem('ethConnectedSigner', config.ethConnectedSigner);\n  } else if (accountType === ChainType.arweave) {\n    checkItem('arJWK', config.arJWK);\n  }\n};","map":{"version":3,"names":["ChainType","EverpayActionWithDeposit","ERRORS","cases","symbol","SYMBOL_NOT_FOUND","token","TOKEN_NOT_FOUND","account","ACCOUNT_NOT_FOUND","everHash","EVERHASH_NOT_FOUND","chainTxHash","CHAIN_TX_HASH_NOT_FOUND","action","INVALID_ACTION","to","TO_NOT_FOUND","ethConnectedSigner","ETH_SIGENER_NOT_FOUND","checkItem","itemName","param","undefined","Error","INVALID_AMOUNT","actions","deposit","withdraw","transfer","bundle","includes","checkParams","params","Object","keys","forEach","key","checkSignConfig","accountType","config","ethereum","arweave","arJWK"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/arseeding-js/node_modules/everpay/esm/utils/check.js"],"sourcesContent":["import { ChainType, EverpayActionWithDeposit } from '../types';\nimport { ERRORS } from './errors';\nconst cases = {\n    symbol: ERRORS.SYMBOL_NOT_FOUND,\n    token: ERRORS.TOKEN_NOT_FOUND,\n    account: ERRORS.ACCOUNT_NOT_FOUND,\n    everHash: ERRORS.EVERHASH_NOT_FOUND,\n    chainTxHash: ERRORS.CHAIN_TX_HASH_NOT_FOUND,\n    action: ERRORS.INVALID_ACTION,\n    to: ERRORS.TO_NOT_FOUND,\n    ethConnectedSigner: ERRORS.ETH_SIGENER_NOT_FOUND\n};\nexport const checkItem = (itemName, param) => {\n    if (param === null || param === undefined || param === '' || param === 0) {\n        throw new Error(cases[itemName]);\n    }\n    if (itemName === 'amount' && !(param >= 0)) {\n        throw new Error(ERRORS.INVALID_AMOUNT);\n    }\n    const actions = [\n        EverpayActionWithDeposit.deposit,\n        EverpayActionWithDeposit.withdraw,\n        EverpayActionWithDeposit.transfer,\n        EverpayActionWithDeposit.bundle\n    ];\n    if (itemName === 'action' && !actions.includes(param)) {\n        throw new Error(cases.action);\n    }\n};\nexport const checkParams = (params) => {\n    Object.keys(params).forEach(key => checkItem(key, params[key]));\n};\nexport const checkSignConfig = (accountType, config) => {\n    if (accountType === ChainType.ethereum) {\n        checkItem('ethConnectedSigner', config.ethConnectedSigner);\n    }\n    else if (accountType === ChainType.arweave) {\n        checkItem('arJWK', config.arJWK);\n    }\n};\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,wBAAwB,QAAQ,UAAU;AAC9D,SAASC,MAAM,QAAQ,UAAU;AACjC,MAAMC,KAAK,GAAG;EACVC,MAAM,EAAEF,MAAM,CAACG,gBAAgB;EAC/BC,KAAK,EAAEJ,MAAM,CAACK,eAAe;EAC7BC,OAAO,EAAEN,MAAM,CAACO,iBAAiB;EACjCC,QAAQ,EAAER,MAAM,CAACS,kBAAkB;EACnCC,WAAW,EAAEV,MAAM,CAACW,uBAAuB;EAC3CC,MAAM,EAAEZ,MAAM,CAACa,cAAc;EAC7BC,EAAE,EAAEd,MAAM,CAACe,YAAY;EACvBC,kBAAkB,EAAEhB,MAAM,CAACiB;AAC/B,CAAC;AACD,OAAO,MAAMC,SAAS,GAAGA,CAACC,QAAQ,EAAEC,KAAK,KAAK;EAC1C,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKC,SAAS,IAAID,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,CAAC,EAAE;IACtE,MAAM,IAAIE,KAAK,CAACrB,KAAK,CAACkB,QAAQ,CAAC,CAAC;EACpC;EACA,IAAIA,QAAQ,KAAK,QAAQ,IAAI,EAAEC,KAAK,IAAI,CAAC,CAAC,EAAE;IACxC,MAAM,IAAIE,KAAK,CAACtB,MAAM,CAACuB,cAAc,CAAC;EAC1C;EACA,MAAMC,OAAO,GAAG,CACZzB,wBAAwB,CAAC0B,OAAO,EAChC1B,wBAAwB,CAAC2B,QAAQ,EACjC3B,wBAAwB,CAAC4B,QAAQ,EACjC5B,wBAAwB,CAAC6B,MAAM,CAClC;EACD,IAAIT,QAAQ,KAAK,QAAQ,IAAI,CAACK,OAAO,CAACK,QAAQ,CAACT,KAAK,CAAC,EAAE;IACnD,MAAM,IAAIE,KAAK,CAACrB,KAAK,CAACW,MAAM,CAAC;EACjC;AACJ,CAAC;AACD,OAAO,MAAMkB,WAAW,GAAIC,MAAM,IAAK;EACnCC,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAACG,OAAO,CAACC,GAAG,IAAIjB,SAAS,CAACiB,GAAG,EAAEJ,MAAM,CAACI,GAAG,CAAC,CAAC,CAAC;AACnE,CAAC;AACD,OAAO,MAAMC,eAAe,GAAGA,CAACC,WAAW,EAAEC,MAAM,KAAK;EACpD,IAAID,WAAW,KAAKvC,SAAS,CAACyC,QAAQ,EAAE;IACpCrB,SAAS,CAAC,oBAAoB,EAAEoB,MAAM,CAACtB,kBAAkB,CAAC;EAC9D,CAAC,MACI,IAAIqB,WAAW,KAAKvC,SAAS,CAAC0C,OAAO,EAAE;IACxCtB,SAAS,CAAC,OAAO,EAAEoB,MAAM,CAACG,KAAK,CAAC;EACpC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}