{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.submitByApikey = exports.getDataByGW = exports.getOrders = exports.getBundleFee = exports.getItemMeta = exports.genNodeAPI = exports.genArweaveAPI = exports.genAPI = void 0;\nconst ethers_1 = require(\"ethers\");\nconst everpay_1 = __importDefault(require(\"everpay\"));\nconst arseeding_arbundles_1 = require(\"arseeding-arbundles\");\nconst ethereumSigner_1 = __importDefault(require(\"arseeding-arbundles/src/signing/chains/ethereumSigner\"));\nconst axios_1 = __importDefault(require(\"axios\"));\nconst payOrder_1 = require(\"./payOrder\");\nconst signing_1 = require(\"arseeding-arbundles/src/signing\");\nconst genAPI = async windowEthereum => {\n  await windowEthereum.enable();\n  const provider = new ethers_1.providers.Web3Provider(windowEthereum);\n  await provider._ready();\n  const signer = new signing_1.InjectedEthereumSigner(provider);\n  await signer.setPublicKey();\n  return {\n    signer,\n    async sendAndPay(arseedingUrl, data, tokenSymbol, opts, needSeq, debug) {\n      var _a;\n      const dataItem = (0, arseeding_arbundles_1.createData)(data, signer, opts);\n      await dataItem.sign(signer);\n      const api = axios_1.default.create({\n        baseURL: arseedingUrl\n      });\n      let header = {\n        'Content-Type': 'application/octet-stream'\n      };\n      if (needSeq) {\n        header['Sort'] = 'true';\n      }\n      const res = await api.post(`/bundle/tx/${tokenSymbol}`, dataItem.getRaw(), {\n        headers: header,\n        maxBodyLength: Infinity\n      });\n      const order = res.data;\n      const {\n        fee\n      } = order;\n      if (+fee > 0) {\n        const accounts = await provider.listAccounts();\n        const account = (_a = accounts[0]) !== null && _a !== void 0 ? _a : '';\n        const everpay = new everpay_1.default({\n          debug: debug,\n          account: account,\n          ethConnectedSigner: provider.getSigner(),\n          chainType: 'ethereum'\n        });\n        const everHash = await (0, payOrder_1.payOrder)(everpay, order);\n        return {\n          everHash,\n          order\n        };\n      } else {\n        return {\n          order\n        };\n      }\n    }\n  };\n};\nexports.genAPI = genAPI;\nconst isString = obj => {\n  return Object.prototype.toString.call(obj) === '[object String]';\n};\nconst checkArPermissions = async (windowArweaveWallet, permissions) => {\n  let existingPermissions = [];\n  const checkPermissions = isString(permissions) ? [permissions] : permissions;\n  try {\n    existingPermissions = await windowArweaveWallet.getPermissions();\n  } catch {\n    throw new Error('PLEASE_INSTALL_ARCONNECT');\n  }\n  if (checkPermissions.length === 0) {\n    return;\n  }\n  const checkFunc = permission => {\n    return !existingPermissions.includes(permission);\n  };\n  if (checkPermissions.some(checkFunc)) {\n    await windowArweaveWallet.connect(checkPermissions);\n  }\n};\nconst genArweaveAPI = async windowArweaveWallet => {\n  await checkArPermissions(windowArweaveWallet, ['ACCESS_ADDRESS', 'ACCESS_ALL_ADDRESSES', 'ACCESS_PUBLIC_KEY', 'SIGN_TRANSACTION', 'SIGNATURE']);\n  const signer = new signing_1.InjectedArweaveSigner(windowArweaveWallet);\n  await signer.setPublicKey();\n  return {\n    signer,\n    async sendAndPay(arseedingUrl, data, tokenSymbol, opts, needSeq, debug) {\n      const dataItem = (0, arseeding_arbundles_1.createData)(data, signer, opts);\n      await dataItem.sign(signer);\n      const api = axios_1.default.create({\n        baseURL: arseedingUrl\n      });\n      let header = {\n        'Content-Type': 'application/octet-stream'\n      };\n      if (needSeq) {\n        header['Sort'] = 'true';\n      }\n      const res = await api.post(`/bundle/tx/${tokenSymbol}`, dataItem.getRaw(), {\n        headers: header,\n        maxBodyLength: Infinity\n      });\n      const order = res.data;\n      const {\n        fee\n      } = order;\n      if (+fee > 0) {\n        const account = await windowArweaveWallet.getActiveAddress();\n        const everpay = new everpay_1.default({\n          debug: debug,\n          account: account,\n          arJWK: 'use_wallet',\n          chainType: 'arweave'\n        });\n        const everHash = await (0, payOrder_1.payOrder)(everpay, order);\n        return {\n          everHash,\n          order\n        };\n      } else {\n        return {\n          order\n        };\n      }\n    }\n  };\n};\nexports.genArweaveAPI = genArweaveAPI;\nconst genNodeAPI = pk => {\n  const signer = new ethereumSigner_1.default(pk);\n  const ethConnectedSigner = new ethers_1.Wallet(pk);\n  return {\n    signer,\n    async sendAndPay(arseedingUrl, data, tokenSymbol, opts, debug) {\n      const dataItem = (0, arseeding_arbundles_1.createData)(data, signer, opts);\n      await dataItem.sign(signer);\n      const api = axios_1.default.create({\n        baseURL: arseedingUrl\n      });\n      const res = await api.post(`/bundle/tx/${tokenSymbol}`, dataItem.getRaw(), {\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        maxBodyLength: Infinity\n      });\n      const order = res.data;\n      const {\n        fee\n      } = order;\n      if (+fee > 0) {\n        const account = ethConnectedSigner.address;\n        const everpay = new everpay_1.default({\n          debug: debug,\n          account: account,\n          ethConnectedSigner: ethConnectedSigner,\n          chainType: 'ethereum'\n        });\n        const everHash = await (0, payOrder_1.payOrder)(everpay, order);\n        return {\n          everHash,\n          order\n        };\n      } else {\n        return {\n          order\n        };\n      }\n    }\n  };\n};\nexports.genNodeAPI = genNodeAPI;\nconst getItemMeta = async (arseedingUrl, itemId) => {\n  const api = axios_1.default.create({\n    baseURL: arseedingUrl\n  });\n  const res = await api.get(`bundle/tx/${itemId}`);\n  return res.data;\n};\nexports.getItemMeta = getItemMeta;\nconst getBundleFee = async (arseedingUrl, size, currency) => {\n  const api = axios_1.default.create({\n    baseURL: arseedingUrl\n  });\n  const res = await api.get(`bundle/fee/${size}/${currency}`);\n  return res.data;\n};\nexports.getBundleFee = getBundleFee;\nconst getOrders = async (arseedingUrl, signerAddr) => {\n  const api = axios_1.default.create({\n    baseURL: arseedingUrl\n  });\n  const res = await api.get(`bundle/orders/${signerAddr}`);\n  return res.data;\n};\nexports.getOrders = getOrders;\nconst getDataByGW = async (arseedingUrl, itemId) => {\n  const api = axios_1.default.create({\n    baseURL: arseedingUrl\n  });\n  const res = await api.get(`/${itemId}`);\n  return res.data;\n};\nexports.getDataByGW = getDataByGW;\nconst submitByApikey = async (arseedingUrl, apiKey, currency, data, contentType, tags) => {\n  tags['Content-Type'] = contentType;\n  const api = axios_1.default.create({\n    baseURL: arseedingUrl\n  });\n  const res = await api.post(`/bundle/data/${currency}`, data, {\n    headers: {\n      'X-API-KEY': apiKey\n    },\n    maxBodyLength: Infinity,\n    params: tags\n  });\n  return res.data;\n};\nexports.submitByApikey = submitByApikey;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","submitByApikey","getDataByGW","getOrders","getBundleFee","getItemMeta","genNodeAPI","genArweaveAPI","genAPI","ethers_1","require","everpay_1","arseeding_arbundles_1","ethereumSigner_1","axios_1","payOrder_1","signing_1","windowEthereum","enable","provider","providers","Web3Provider","_ready","signer","InjectedEthereumSigner","setPublicKey","sendAndPay","arseedingUrl","data","tokenSymbol","opts","needSeq","debug","_a","dataItem","createData","sign","api","default","create","baseURL","header","res","post","getRaw","headers","maxBodyLength","Infinity","order","fee","accounts","listAccounts","account","everpay","ethConnectedSigner","getSigner","chainType","everHash","payOrder","isString","obj","prototype","toString","call","checkArPermissions","windowArweaveWallet","permissions","existingPermissions","checkPermissions","getPermissions","Error","length","checkFunc","permission","includes","some","connect","InjectedArweaveSigner","getActiveAddress","arJWK","pk","Wallet","address","itemId","get","size","currency","signerAddr","apiKey","contentType","tags","params"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/arseeding-js/esm/index.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.submitByApikey = exports.getDataByGW = exports.getOrders = exports.getBundleFee = exports.getItemMeta = exports.genNodeAPI = exports.genArweaveAPI = exports.genAPI = void 0;\nconst ethers_1 = require(\"ethers\");\nconst everpay_1 = __importDefault(require(\"everpay\"));\nconst arseeding_arbundles_1 = require(\"arseeding-arbundles\");\nconst ethereumSigner_1 = __importDefault(require(\"arseeding-arbundles/src/signing/chains/ethereumSigner\"));\nconst axios_1 = __importDefault(require(\"axios\"));\nconst payOrder_1 = require(\"./payOrder\");\nconst signing_1 = require(\"arseeding-arbundles/src/signing\");\nconst genAPI = async (windowEthereum) => {\n    await windowEthereum.enable();\n    const provider = new ethers_1.providers.Web3Provider(windowEthereum);\n    await provider._ready();\n    const signer = new signing_1.InjectedEthereumSigner(provider);\n    await signer.setPublicKey();\n    return {\n        signer,\n        async sendAndPay(arseedingUrl, data, tokenSymbol, opts, needSeq, debug) {\n            var _a;\n            const dataItem = (0, arseeding_arbundles_1.createData)(data, signer, opts);\n            await dataItem.sign(signer);\n            const api = axios_1.default.create({ baseURL: arseedingUrl });\n            let header = {\n                'Content-Type': 'application/octet-stream'\n            };\n            if (needSeq) {\n                header['Sort'] = 'true';\n            }\n            const res = await api.post(`/bundle/tx/${tokenSymbol}`, dataItem.getRaw(), {\n                headers: header,\n                maxBodyLength: Infinity\n            });\n            const order = res.data;\n            const { fee } = order;\n            if (+fee > 0) {\n                const accounts = await provider.listAccounts();\n                const account = (_a = accounts[0]) !== null && _a !== void 0 ? _a : '';\n                const everpay = new everpay_1.default({\n                    debug: debug,\n                    account: account,\n                    ethConnectedSigner: provider.getSigner(),\n                    chainType: 'ethereum'\n                });\n                const everHash = await (0, payOrder_1.payOrder)(everpay, order);\n                return {\n                    everHash,\n                    order\n                };\n            }\n            else {\n                return {\n                    order\n                };\n            }\n        }\n    };\n};\nexports.genAPI = genAPI;\nconst isString = (obj) => {\n    return Object.prototype.toString.call(obj) === '[object String]';\n};\nconst checkArPermissions = async (windowArweaveWallet, permissions) => {\n    let existingPermissions = [];\n    const checkPermissions = isString(permissions) ? [permissions] : permissions;\n    try {\n        existingPermissions = await windowArweaveWallet.getPermissions();\n    }\n    catch {\n        throw new Error('PLEASE_INSTALL_ARCONNECT');\n    }\n    if (checkPermissions.length === 0) {\n        return;\n    }\n    const checkFunc = (permission) => {\n        return !existingPermissions.includes(permission);\n    };\n    if (checkPermissions.some(checkFunc)) {\n        await windowArweaveWallet.connect(checkPermissions);\n    }\n};\nconst genArweaveAPI = async (windowArweaveWallet) => {\n    await checkArPermissions(windowArweaveWallet, [\n        'ACCESS_ADDRESS',\n        'ACCESS_ALL_ADDRESSES',\n        'ACCESS_PUBLIC_KEY',\n        'SIGN_TRANSACTION',\n        'SIGNATURE'\n    ]);\n    const signer = new signing_1.InjectedArweaveSigner(windowArweaveWallet);\n    await signer.setPublicKey();\n    return {\n        signer,\n        async sendAndPay(arseedingUrl, data, tokenSymbol, opts, needSeq, debug) {\n            const dataItem = (0, arseeding_arbundles_1.createData)(data, signer, opts);\n            await dataItem.sign(signer);\n            const api = axios_1.default.create({ baseURL: arseedingUrl });\n            let header = {\n                'Content-Type': 'application/octet-stream'\n            };\n            if (needSeq) {\n                header['Sort'] = 'true';\n            }\n            const res = await api.post(`/bundle/tx/${tokenSymbol}`, dataItem.getRaw(), {\n                headers: header,\n                maxBodyLength: Infinity\n            });\n            const order = res.data;\n            const { fee } = order;\n            if (+fee > 0) {\n                const account = await windowArweaveWallet.getActiveAddress();\n                const everpay = new everpay_1.default({\n                    debug: debug,\n                    account: account,\n                    arJWK: 'use_wallet',\n                    chainType: 'arweave'\n                });\n                const everHash = await (0, payOrder_1.payOrder)(everpay, order);\n                return {\n                    everHash,\n                    order\n                };\n            }\n            else {\n                return {\n                    order\n                };\n            }\n        }\n    };\n};\nexports.genArweaveAPI = genArweaveAPI;\nconst genNodeAPI = (pk) => {\n    const signer = new ethereumSigner_1.default(pk);\n    const ethConnectedSigner = new ethers_1.Wallet(pk);\n    return {\n        signer,\n        async sendAndPay(arseedingUrl, data, tokenSymbol, opts, debug) {\n            const dataItem = (0, arseeding_arbundles_1.createData)(data, signer, opts);\n            await dataItem.sign(signer);\n            const api = axios_1.default.create({ baseURL: arseedingUrl });\n            const res = await api.post(`/bundle/tx/${tokenSymbol}`, dataItem.getRaw(), {\n                headers: { 'Content-Type': 'application/octet-stream' },\n                maxBodyLength: Infinity\n            });\n            const order = res.data;\n            const { fee } = order;\n            if (+fee > 0) {\n                const account = ethConnectedSigner.address;\n                const everpay = new everpay_1.default({\n                    debug: debug,\n                    account: account,\n                    ethConnectedSigner: ethConnectedSigner,\n                    chainType: 'ethereum'\n                });\n                const everHash = await (0, payOrder_1.payOrder)(everpay, order);\n                return {\n                    everHash,\n                    order\n                };\n            }\n            else {\n                return {\n                    order\n                };\n            }\n        }\n    };\n};\nexports.genNodeAPI = genNodeAPI;\nconst getItemMeta = async (arseedingUrl, itemId) => {\n    const api = axios_1.default.create({ baseURL: arseedingUrl });\n    const res = await api.get(`bundle/tx/${itemId}`);\n    return res.data;\n};\nexports.getItemMeta = getItemMeta;\nconst getBundleFee = async (arseedingUrl, size, currency) => {\n    const api = axios_1.default.create({ baseURL: arseedingUrl });\n    const res = await api.get(`bundle/fee/${size}/${currency}`);\n    return res.data;\n};\nexports.getBundleFee = getBundleFee;\nconst getOrders = async (arseedingUrl, signerAddr) => {\n    const api = axios_1.default.create({ baseURL: arseedingUrl });\n    const res = await api.get(`bundle/orders/${signerAddr}`);\n    return res.data;\n};\nexports.getOrders = getOrders;\nconst getDataByGW = async (arseedingUrl, itemId) => {\n    const api = axios_1.default.create({ baseURL: arseedingUrl });\n    const res = await api.get(`/${itemId}`);\n    return res.data;\n};\nexports.getDataByGW = getDataByGW;\nconst submitByApikey = async (arseedingUrl, apiKey, currency, data, contentType, tags) => {\n    tags['Content-Type'] = contentType;\n    const api = axios_1.default.create({ baseURL: arseedingUrl });\n    const res = await api.post(`/bundle/data/${currency}`, data, {\n        headers: { 'X-API-KEY': apiKey },\n        maxBodyLength: Infinity,\n        params: tags\n    });\n    return res.data;\n};\nexports.submitByApikey = submitByApikey;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}