{"ast":null,"code":"import _classPrivateFieldInitSpec from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldSet from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport _classPrivateFieldGet from \"E:/Amanda-project/vue2-project/project-vue2/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nlet _Symbol$for;\nimport { ZeroHash } from \"../constants/index.js\";\nimport { concat, dataLength, getBigInt, getBytes, getNumber, hexlify, toBeArray, isHexString, zeroPadValue, assertArgument, assertPrivate } from \"../utils/index.js\";\n// Constants\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst _guard = {};\nfunction toUint256(value) {\n  return zeroPadValue(toBeArray(value), 32);\n}\n/**\n *  A Signature  @TODO\n *\n *\n *  @_docloc: api/crypto:Signing\n */\nvar _r2 = /*#__PURE__*/new WeakMap();\nvar _s = /*#__PURE__*/new WeakMap();\nvar _v2 = /*#__PURE__*/new WeakMap();\nvar _networkV = /*#__PURE__*/new WeakMap();\n_Symbol$for = Symbol.for('nodejs.util.inspect.custom');\nexport class Signature {\n  /**\n   *  The ``r`` value for a signautre.\n   *\n   *  This represents the ``x`` coordinate of a \"reference\" or\n   *  challenge point, from which the ``y`` can be computed.\n   */\n  get r() {\n    return _classPrivateFieldGet(this, _r2);\n  }\n  set r(value) {\n    assertArgument(dataLength(value) === 32, \"invalid r\", \"value\", value);\n    _classPrivateFieldSet(this, _r2, hexlify(value));\n  }\n  /**\n   *  The ``s`` value for a signature.\n   */\n  get s() {\n    return _classPrivateFieldGet(this, _s);\n  }\n  set s(_value) {\n    assertArgument(dataLength(_value) === 32, \"invalid s\", \"value\", _value);\n    const value = hexlify(_value);\n    assertArgument(parseInt(value.substring(0, 3)) < 8, \"non-canonical s\", \"value\", value);\n    _classPrivateFieldSet(this, _s, value);\n  }\n  /**\n   *  The ``v`` value for a signature.\n   *\n   *  Since a given ``x`` value for ``r`` has two possible values for\n   *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\n   *  values to use.\n   *\n   *  It is normalized to the values ``27`` or ``28`` for legacy\n   *  purposes.\n   */\n  get v() {\n    return _classPrivateFieldGet(this, _v2);\n  }\n  set v(value) {\n    const v = getNumber(value, \"value\");\n    assertArgument(v === 27 || v === 28, \"invalid v\", \"v\", value);\n    _classPrivateFieldSet(this, _v2, v);\n  }\n  /**\n   *  The EIP-155 ``v`` for legacy transactions. For non-legacy\n   *  transactions, this value is ``null``.\n   */\n  get networkV() {\n    return _classPrivateFieldGet(this, _networkV);\n  }\n  /**\n   *  The chain ID for EIP-155 legacy transactions. For non-legacy\n   *  transactions, this value is ``null``.\n   */\n  get legacyChainId() {\n    const v = this.networkV;\n    if (v == null) {\n      return null;\n    }\n    return Signature.getChainId(v);\n  }\n  /**\n   *  The ``yParity`` for the signature.\n   *\n   *  See ``v`` for more details on how this value is used.\n   */\n  get yParity() {\n    return this.v === 27 ? 0 : 1;\n  }\n  /**\n   *  The [[link-eip-2098]] compact representation of the ``yParity``\n   *  and ``s`` compacted into a single ``bytes32``.\n   */\n  get yParityAndS() {\n    // The EIP-2098 compact representation\n    const yParityAndS = getBytes(this.s);\n    if (this.yParity) {\n      yParityAndS[0] |= 0x80;\n    }\n    return hexlify(yParityAndS);\n  }\n  /**\n   *  The [[link-eip-2098]] compact representation.\n   */\n  get compactSerialized() {\n    return concat([this.r, this.yParityAndS]);\n  }\n  /**\n   *  The serialized representation.\n   */\n  get serialized() {\n    return concat([this.r, this.s, this.yParity ? \"0x1c\" : \"0x1b\"]);\n  }\n  /**\n   *  @private\n   */\n  constructor(guard, r, s, v) {\n    _classPrivateFieldInitSpec(this, _r2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _s, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _v2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _networkV, {\n      writable: true,\n      value: void 0\n    });\n    assertPrivate(guard, _guard, \"Signature\");\n    _classPrivateFieldSet(this, _r2, r);\n    _classPrivateFieldSet(this, _s, s);\n    _classPrivateFieldSet(this, _v2, v);\n    _classPrivateFieldSet(this, _networkV, null);\n  }\n  [_Symbol$for]() {\n    return `Signature { r: \"${this.r}\", s: \"${this.s}\", yParity: ${this.yParity}, networkV: ${this.networkV} }`;\n  }\n  /**\n   *  Returns a new identical [[Signature]].\n   */\n  clone() {\n    const clone = new Signature(_guard, this.r, this.s, this.v);\n    if (this.networkV) {\n      _classPrivateFieldSet(clone, _networkV, this.networkV);\n    }\n    return clone;\n  }\n  /**\n   *  Returns a representation that is compatible with ``JSON.stringify``.\n   */\n  toJSON() {\n    const networkV = this.networkV;\n    return {\n      _type: \"signature\",\n      networkV: networkV != null ? networkV.toString() : null,\n      r: this.r,\n      s: this.s,\n      v: this.v\n    };\n  }\n  /**\n   *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\n   *\n   *  @example:\n   *    Signature.getChainId(45)\n   *    //_result:\n   *\n   *    Signature.getChainId(46)\n   *    //_result:\n   */\n  static getChainId(v) {\n    const bv = getBigInt(v, \"v\");\n    // The v is not an EIP-155 v, so it is the unspecified chain ID\n    if (bv == BN_27 || bv == BN_28) {\n      return BN_0;\n    }\n    // Bad value for an EIP-155 v\n    assertArgument(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\n    return (bv - BN_35) / BN_2;\n  }\n  /**\n   *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\n   *\n   *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\n   *  property to include the chain ID.\n   *\n   *  @example:\n   *    Signature.getChainIdV(5, 27)\n   *    //_result:\n   *\n   *    Signature.getChainIdV(5, 28)\n   *    //_result:\n   *\n   */\n  static getChainIdV(chainId, v) {\n    return getBigInt(chainId) * BN_2 + BigInt(35 + v - 27);\n  }\n  /**\n   *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\n   *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\n   *\n   *  @example:\n   *    // The values 0 and 1 imply v is actually yParity\n   *    Signature.getNormalizedV(0)\n   *    //_result:\n   *\n   *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\n   *    Signature.getNormalizedV(27)\n   *    //_result:\n   *\n   *    // Legacy EIP-155 transaction (i.e. >= 35)\n   *    Signature.getNormalizedV(46)\n   *    //_result:\n   *\n   *    // Invalid values throw\n   *    Signature.getNormalizedV(5)\n   *    //_error:\n   */\n  static getNormalizedV(v) {\n    const bv = getBigInt(v);\n    if (bv === BN_0 || bv === BN_27) {\n      return 27;\n    }\n    if (bv === BN_1 || bv === BN_28) {\n      return 28;\n    }\n    assertArgument(bv >= BN_35, \"invalid v\", \"v\", v);\n    // Otherwise, EIP-155 v means odd is 27 and even is 28\n    return bv & BN_1 ? 27 : 28;\n  }\n  /**\n   *  Creates a new [[Signature]].\n   *\n   *  If no %%sig%% is provided, a new [[Signature]] is created\n   *  with default values.\n   *\n   *  If %%sig%% is a string, it is parsed.\n   */\n  static from(sig) {\n    function assertError(check, message) {\n      assertArgument(check, message, \"signature\", sig);\n    }\n    ;\n    if (sig == null) {\n      return new Signature(_guard, ZeroHash, ZeroHash, 27);\n    }\n    if (typeof sig === \"string\") {\n      const bytes = getBytes(sig, \"signature\");\n      if (bytes.length === 64) {\n        const r = hexlify(bytes.slice(0, 32));\n        const s = bytes.slice(32, 64);\n        const v = s[0] & 0x80 ? 28 : 27;\n        s[0] &= 0x7f;\n        return new Signature(_guard, r, hexlify(s), v);\n      }\n      if (bytes.length === 65) {\n        const r = hexlify(bytes.slice(0, 32));\n        const s = bytes.slice(32, 64);\n        assertError((s[0] & 0x80) === 0, \"non-canonical s\");\n        const v = Signature.getNormalizedV(bytes[64]);\n        return new Signature(_guard, r, hexlify(s), v);\n      }\n      assertError(false, \"invalid raw signature length\");\n    }\n    if (sig instanceof Signature) {\n      return sig.clone();\n    }\n    // Get r\n    const _r = sig.r;\n    assertError(_r != null, \"missing r\");\n    const r = toUint256(_r);\n    // Get s; by any means necessary (we check consistency below)\n    const s = function (s, yParityAndS) {\n      if (s != null) {\n        return toUint256(s);\n      }\n      if (yParityAndS != null) {\n        assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n        const bytes = getBytes(yParityAndS);\n        bytes[0] &= 0x7f;\n        return hexlify(bytes);\n      }\n      assertError(false, \"missing s\");\n    }(sig.s, sig.yParityAndS);\n    assertError((getBytes(s)[0] & 0x80) == 0, \"non-canonical s\");\n    // Get v; by any means necessary (we check consistency below)\n    const {\n      networkV,\n      v\n    } = function (_v, yParityAndS, yParity) {\n      if (_v != null) {\n        const v = getBigInt(_v);\n        return {\n          networkV: v >= BN_35 ? v : undefined,\n          v: Signature.getNormalizedV(v)\n        };\n      }\n      if (yParityAndS != null) {\n        assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n        return {\n          v: getBytes(yParityAndS)[0] & 0x80 ? 28 : 27\n        };\n      }\n      if (yParity != null) {\n        switch (getNumber(yParity, \"sig.yParity\")) {\n          case 0:\n            return {\n              v: 27\n            };\n          case 1:\n            return {\n              v: 28\n            };\n        }\n        assertError(false, \"invalid yParity\");\n      }\n      assertError(false, \"missing v\");\n    }(sig.v, sig.yParityAndS, sig.yParity);\n    const result = new Signature(_guard, r, s, v);\n    if (networkV) {\n      _classPrivateFieldSet(result, _networkV, networkV);\n    }\n    // If multiple of v, yParity, yParityAndS we given, check they match\n    assertError(sig.yParity == null || getNumber(sig.yParity, \"sig.yParity\") === result.yParity, \"yParity mismatch\");\n    assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, \"yParityAndS mismatch\");\n    return result;\n  }\n}","map":{"version":3,"names":["ZeroHash","concat","dataLength","getBigInt","getBytes","getNumber","hexlify","toBeArray","isHexString","zeroPadValue","assertArgument","assertPrivate","BN_0","BigInt","BN_1","BN_2","BN_27","BN_28","BN_35","_guard","toUint256","value","_r2","WeakMap","_s","_v2","_networkV","_Symbol$for","Symbol","for","Signature","r","_classPrivateFieldGet","_classPrivateFieldSet","s","_value","parseInt","substring","v","networkV","legacyChainId","getChainId","yParity","yParityAndS","compactSerialized","serialized","constructor","guard","_classPrivateFieldInitSpec","writable","clone","toJSON","_type","toString","bv","getChainIdV","chainId","getNormalizedV","from","sig","assertError","check","message","bytes","length","slice","_r","_v","undefined","result"],"sources":["../../src.ts/crypto/signature.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}