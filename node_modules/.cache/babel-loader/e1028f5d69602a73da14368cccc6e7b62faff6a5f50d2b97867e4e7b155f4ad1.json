{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account2FA = exports.AccountMultisig = exports.MULTISIG_CONFIRM_METHODS = exports.MULTISIG_CHANGE_METHODS = exports.MULTISIG_DEPOSIT = exports.MULTISIG_GAS = exports.MULTISIG_ALLOWANCE = exports.MULTISIG_STORAGE_KEY = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst depd_1 = __importDefault(require(\"depd\"));\nconst account_1 = require(\"./account\");\nconst format_1 = require(\"./utils/format\");\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst transaction_1 = require(\"./transaction\");\nconst web_1 = require(\"./utils/web\");\nexports.MULTISIG_STORAGE_KEY = '__multisigRequest';\nexports.MULTISIG_ALLOWANCE = new bn_js_1.default(format_1.parseNearAmount('1'));\n// TODO: Different gas value for different requests (can reduce gas usage dramatically)\nexports.MULTISIG_GAS = new bn_js_1.default('100000000000000');\nexports.MULTISIG_DEPOSIT = new bn_js_1.default('0');\nexports.MULTISIG_CHANGE_METHODS = ['add_request', 'add_request_and_confirm', 'delete_request', 'confirm'];\nexports.MULTISIG_CONFIRM_METHODS = ['confirm'];\n// in memory request cache for node w/o localStorage\nconst storageFallback = {\n  [exports.MULTISIG_STORAGE_KEY]: null\n};\nclass AccountMultisig extends account_1.Account {\n  constructor(connection, accountId, options) {\n    super(connection, accountId);\n    this.storage = options.storage;\n    this.onAddRequestResult = options.onAddRequestResult;\n  }\n  async signAndSendTransactionWithAccount(receiverId, actions) {\n    return super.signAndSendTransaction({\n      receiverId,\n      actions\n    });\n  }\n  signAndSendTransaction(...args) {\n    if (typeof args[0] === 'string') {\n      return this._signAndSendTransaction({\n        receiverId: args[0],\n        actions: args[1]\n      });\n    }\n    return this._signAndSendTransaction(args[0]);\n  }\n  async _signAndSendTransaction({\n    receiverId,\n    actions\n  }) {\n    const {\n      accountId\n    } = this;\n    const args = Buffer.from(JSON.stringify({\n      request: {\n        receiver_id: receiverId,\n        actions: convertActions(actions, accountId, receiverId)\n      }\n    }));\n    let result;\n    try {\n      result = await super.signAndSendTransaction({\n        receiverId: accountId,\n        actions: [transaction_1.functionCall('add_request_and_confirm', args, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n      });\n    } catch (e) {\n      if (e.toString().includes('Account has too many active requests. Confirm or delete some')) {\n        await this.deleteUnconfirmedRequests();\n        return await this.signAndSendTransaction(receiverId, actions);\n      }\n      throw e;\n    }\n    // TODO: Are following even needed? Seems like it throws on error already\n    if (!result.status) {\n      throw new Error('Request failed');\n    }\n    const status = {\n      ...result.status\n    };\n    if (!status.SuccessValue || typeof status.SuccessValue !== 'string') {\n      throw new Error('Request failed');\n    }\n    this.setRequest({\n      accountId,\n      actions,\n      requestId: parseInt(Buffer.from(status.SuccessValue, 'base64').toString('ascii'), 10)\n    });\n    if (this.onAddRequestResult) {\n      await this.onAddRequestResult(result);\n    }\n    // NOTE there is no await on purpose to avoid blocking for 2fa\n    this.deleteUnconfirmedRequests();\n    return result;\n  }\n  async deleteUnconfirmedRequests() {\n    // TODO: Delete in batch, don't delete unexpired\n    // TODO: Delete in batch, don't delete unexpired (can reduce gas usage dramatically)\n    const request_ids = await this.getRequestIds();\n    const {\n      requestId\n    } = this.getRequest();\n    for (const requestIdToDelete of request_ids) {\n      if (requestIdToDelete == requestId) {\n        continue;\n      }\n      try {\n        await super.signAndSendTransaction({\n          receiverId: this.accountId,\n          actions: [transaction_1.functionCall('delete_request', {\n            request_id: requestIdToDelete\n          }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n        });\n      } catch (e) {\n        console.warn('Attempt to delete an earlier request before 15 minutes failed. Will try again.');\n      }\n    }\n  }\n  // helpers\n  async getRequestIds() {\n    // TODO: Read requests from state to allow filtering by expiration time\n    // TODO: https://github.com/near/core-contracts/blob/305d1db4f4f2cf5ce4c1ef3479f7544957381f11/multisig/src/lib.rs#L84\n    return this.viewFunction(this.accountId, 'list_request_ids');\n  }\n  getRequest() {\n    if (this.storage) {\n      return JSON.parse(this.storage.getItem(exports.MULTISIG_STORAGE_KEY) || '{}');\n    }\n    return storageFallback[exports.MULTISIG_STORAGE_KEY];\n  }\n  setRequest(data) {\n    if (this.storage) {\n      return this.storage.setItem(exports.MULTISIG_STORAGE_KEY, JSON.stringify(data));\n    }\n    storageFallback[exports.MULTISIG_STORAGE_KEY] = data;\n  }\n}\nexports.AccountMultisig = AccountMultisig;\nclass Account2FA extends AccountMultisig {\n  constructor(connection, accountId, options) {\n    super(connection, accountId, options);\n    this.helperUrl = 'https://helper.testnet.near.org';\n    this.helperUrl = options.helperUrl || this.helperUrl;\n    this.storage = options.storage;\n    this.sendCode = options.sendCode || this.sendCodeDefault;\n    this.getCode = options.getCode || this.getCodeDefault;\n    this.verifyCode = options.verifyCode || this.verifyCodeDefault;\n    this.onConfirmResult = options.onConfirmResult;\n  }\n  async signAndSendTransaction(...args) {\n    if (typeof args[0] === 'string') {\n      const deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n      deprecate('use `Account2FA.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n      return this.__signAndSendTransaction({\n        receiverId: args[0],\n        actions: args[1]\n      });\n    } else {\n      return this.__signAndSendTransaction(args[0]);\n    }\n  }\n  async __signAndSendTransaction({\n    receiverId,\n    actions\n  }) {\n    await super.signAndSendTransaction({\n      receiverId,\n      actions\n    });\n    // TODO: Should following override onRequestResult in superclass instead of doing custom signAndSendTransaction?\n    await this.sendCode();\n    const result = await this.promptAndVerify();\n    if (this.onConfirmResult) {\n      await this.onConfirmResult(result);\n    }\n    return result;\n  }\n  // default helpers for CH deployments of multisig\n  async deployMultisig(contractBytes) {\n    const {\n      accountId\n    } = this;\n    const seedOrLedgerKey = (await this.getRecoveryMethods()).data.filter(({\n      kind,\n      publicKey\n    }) => (kind === 'phrase' || kind === 'ledger') && publicKey !== null).map(rm => rm.publicKey);\n    const fak2lak = (await this.getAccessKeys()).filter(({\n      public_key,\n      access_key: {\n        permission\n      }\n    }) => permission === 'FullAccess' && !seedOrLedgerKey.includes(public_key)).map(ak => ak.public_key).map(toPK);\n    const confirmOnlyKey = toPK((await this.postSignedJson('/2fa/getAccessKey', {\n      accountId\n    })).publicKey);\n    const newArgs = Buffer.from(JSON.stringify({\n      'num_confirmations': 2\n    }));\n    const actions = [...fak2lak.map(pk => transaction_1.deleteKey(pk)), ...fak2lak.map(pk => transaction_1.addKey(pk, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CHANGE_METHODS, null))), transaction_1.addKey(confirmOnlyKey, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CONFIRM_METHODS, null)), transaction_1.deployContract(contractBytes)];\n    if ((await this.state()).code_hash === '11111111111111111111111111111111') {\n      actions.push(transaction_1.functionCall('new', newArgs, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT));\n    }\n    console.log('deploying multisig contract for', accountId);\n    return await super.signAndSendTransactionWithAccount(accountId, actions);\n  }\n  async disable(contractBytes) {\n    const {\n      accountId\n    } = this;\n    const accessKeys = await this.getAccessKeys();\n    const lak2fak = accessKeys.filter(({\n      access_key\n    }) => access_key.permission !== 'FullAccess').filter(({\n      access_key\n    }) => {\n      const perm = access_key.permission.FunctionCall;\n      return perm.receiver_id === accountId && perm.method_names.length === 4 && perm.method_names.includes('add_request_and_confirm');\n    });\n    const confirmOnlyKey = key_pair_1.PublicKey.from((await this.postSignedJson('/2fa/getAccessKey', {\n      accountId\n    })).publicKey);\n    const actions = [transaction_1.deleteKey(confirmOnlyKey), ...lak2fak.map(({\n      public_key\n    }) => transaction_1.deleteKey(key_pair_1.PublicKey.from(public_key))), ...lak2fak.map(({\n      public_key\n    }) => transaction_1.addKey(key_pair_1.PublicKey.from(public_key), null)), transaction_1.deployContract(contractBytes)];\n    console.log('disabling 2fa for', accountId);\n    return await this.signAndSendTransaction({\n      receiverId: accountId,\n      actions\n    });\n  }\n  async sendCodeDefault() {\n    const {\n      accountId\n    } = this;\n    const {\n      requestId\n    } = this.getRequest();\n    const method = await this.get2faMethod();\n    await this.postSignedJson('/2fa/send', {\n      accountId,\n      method,\n      requestId\n    });\n    return requestId;\n  }\n  async getCodeDefault(method) {\n    throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is \"email\" or \"phone\".');\n  }\n  async promptAndVerify() {\n    const method = await this.get2faMethod();\n    const securityCode = await this.getCode(method);\n    try {\n      const result = await this.verifyCode(securityCode);\n      // TODO: Parse error from result for real (like in normal account.signAndSendTransaction)\n      return result;\n    } catch (e) {\n      console.warn('Error validating security code:', e);\n      if (e.toString().includes('invalid 2fa code provided') || e.toString().includes('2fa code not valid')) {\n        return await this.promptAndVerify();\n      }\n      throw e;\n    }\n  }\n  async verifyCodeDefault(securityCode) {\n    const {\n      accountId\n    } = this;\n    const request = this.getRequest();\n    if (!request) {\n      throw new Error('no request pending');\n    }\n    const {\n      requestId\n    } = request;\n    return await this.postSignedJson('/2fa/verify', {\n      accountId,\n      securityCode,\n      requestId\n    });\n  }\n  async getRecoveryMethods() {\n    const {\n      accountId\n    } = this;\n    return {\n      accountId,\n      data: await this.postSignedJson('/account/recoveryMethods', {\n        accountId\n      })\n    };\n  }\n  async get2faMethod() {\n    let {\n      data\n    } = await this.getRecoveryMethods();\n    if (data && data.length) {\n      data = data.find(m => m.kind.indexOf('2fa-') === 0);\n    }\n    if (!data) return null;\n    const {\n      kind,\n      detail\n    } = data;\n    return {\n      kind,\n      detail\n    };\n  }\n  async signatureFor() {\n    const {\n      accountId\n    } = this;\n    const block = await this.connection.provider.block({\n      finality: 'final'\n    });\n    const blockNumber = block.header.height.toString();\n    const signed = await this.connection.signer.signMessage(Buffer.from(blockNumber), accountId, this.connection.networkId);\n    const blockNumberSignature = Buffer.from(signed.signature).toString('base64');\n    return {\n      blockNumber,\n      blockNumberSignature\n    };\n  }\n  async postSignedJson(path, body) {\n    return await web_1.fetchJson(this.helperUrl + path, JSON.stringify({\n      ...body,\n      ...(await this.signatureFor())\n    }));\n  }\n}\nexports.Account2FA = Account2FA;\n// helpers\nconst toPK = pk => key_pair_1.PublicKey.from(pk);\nconst convertPKForContract = pk => pk.toString().replace('ed25519:', '');\nconst convertActions = (actions, accountId, receiverId) => actions.map(a => {\n  const type = a.enum;\n  const {\n    gas,\n    publicKey,\n    methodName,\n    args,\n    deposit,\n    accessKey,\n    code\n  } = a[type];\n  const action = {\n    type: type[0].toUpperCase() + type.substr(1),\n    gas: gas && gas.toString() || undefined,\n    public_key: publicKey && convertPKForContract(publicKey) || undefined,\n    method_name: methodName,\n    args: args && Buffer.from(args).toString('base64') || undefined,\n    code: code && Buffer.from(code).toString('base64') || undefined,\n    amount: deposit && deposit.toString() || undefined,\n    deposit: deposit && deposit.toString() || '0',\n    permission: undefined\n  };\n  if (accessKey) {\n    if (receiverId === accountId && accessKey.permission.enum !== 'fullAccess') {\n      action.permission = {\n        receiver_id: accountId,\n        allowance: exports.MULTISIG_ALLOWANCE.toString(),\n        method_names: exports.MULTISIG_CHANGE_METHODS\n      };\n    }\n    if (accessKey.permission.enum === 'functionCall') {\n      const {\n        receiverId: receiver_id,\n        methodNames: method_names,\n        allowance\n      } = accessKey.permission.functionCall;\n      action.permission = {\n        receiver_id,\n        allowance: allowance && allowance.toString() || undefined,\n        method_names\n      };\n    }\n  }\n  return action;\n});","map":{"version":3,"names":["require","__importDefault","mod","__esModule","Object","defineProperty","exports","value","Account2FA","AccountMultisig","MULTISIG_CONFIRM_METHODS","MULTISIG_CHANGE_METHODS","MULTISIG_DEPOSIT","MULTISIG_GAS","MULTISIG_ALLOWANCE","MULTISIG_STORAGE_KEY","bn_js_1","depd_1","account_1","format_1","key_pair_1","transaction_1","web_1","default","parseNearAmount","storageFallback","Account","constructor","connection","accountId","options","storage","onAddRequestResult","signAndSendTransactionWithAccount","receiverId","actions","signAndSendTransaction","args","_signAndSendTransaction","Buffer","from","JSON","stringify","request","receiver_id","convertActions","result","functionCall","e","toString","includes","deleteUnconfirmedRequests","status","Error","SuccessValue","setRequest","requestId","parseInt","request_ids","getRequestIds","getRequest","requestIdToDelete","request_id","console","warn","viewFunction","parse","getItem","data","setItem","helperUrl","sendCode","sendCodeDefault","getCode","getCodeDefault","verifyCode","verifyCodeDefault","onConfirmResult","deprecate","__signAndSendTransaction","promptAndVerify","deployMultisig","contractBytes","seedOrLedgerKey","getRecoveryMethods","filter","kind","publicKey","map","rm","fak2lak","getAccessKeys","public_key","access_key","permission","ak","toPK","confirmOnlyKey","postSignedJson","newArgs","pk","deleteKey","addKey","functionCallAccessKey","deployContract","state","code_hash","push","log","disable","accessKeys","lak2fak","perm","FunctionCall","method_names","length","PublicKey","method","get2faMethod","securityCode","find","m","indexOf","detail","signatureFor","block","provider","finality","blockNumber","header","height","signed","signer","signMessage","networkId","blockNumberSignature","signature","path","body","fetchJson","convertPKForContract","replace","a","type","enum","gas","methodName","deposit","accessKey","code","action","toUpperCase","substr","undefined","method_name","amount","allowance","methodNames"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/near-api-js/lib/account_multisig.js"],"sourcesContent":["'use strict';\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account2FA = exports.AccountMultisig = exports.MULTISIG_CONFIRM_METHODS = exports.MULTISIG_CHANGE_METHODS = exports.MULTISIG_DEPOSIT = exports.MULTISIG_GAS = exports.MULTISIG_ALLOWANCE = exports.MULTISIG_STORAGE_KEY = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst depd_1 = __importDefault(require(\"depd\"));\nconst account_1 = require(\"./account\");\nconst format_1 = require(\"./utils/format\");\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst transaction_1 = require(\"./transaction\");\nconst web_1 = require(\"./utils/web\");\nexports.MULTISIG_STORAGE_KEY = '__multisigRequest';\nexports.MULTISIG_ALLOWANCE = new bn_js_1.default(format_1.parseNearAmount('1'));\n// TODO: Different gas value for different requests (can reduce gas usage dramatically)\nexports.MULTISIG_GAS = new bn_js_1.default('100000000000000');\nexports.MULTISIG_DEPOSIT = new bn_js_1.default('0');\nexports.MULTISIG_CHANGE_METHODS = ['add_request', 'add_request_and_confirm', 'delete_request', 'confirm'];\nexports.MULTISIG_CONFIRM_METHODS = ['confirm'];\n// in memory request cache for node w/o localStorage\nconst storageFallback = {\n    [exports.MULTISIG_STORAGE_KEY]: null\n};\nclass AccountMultisig extends account_1.Account {\n    constructor(connection, accountId, options) {\n        super(connection, accountId);\n        this.storage = options.storage;\n        this.onAddRequestResult = options.onAddRequestResult;\n    }\n    async signAndSendTransactionWithAccount(receiverId, actions) {\n        return super.signAndSendTransaction({ receiverId, actions });\n    }\n    signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            return this._signAndSendTransaction({ receiverId: args[0], actions: args[1] });\n        }\n        return this._signAndSendTransaction(args[0]);\n    }\n    async _signAndSendTransaction({ receiverId, actions }) {\n        const { accountId } = this;\n        const args = Buffer.from(JSON.stringify({\n            request: {\n                receiver_id: receiverId,\n                actions: convertActions(actions, accountId, receiverId)\n            }\n        }));\n        let result;\n        try {\n            result = await super.signAndSendTransaction({\n                receiverId: accountId,\n                actions: [\n                    transaction_1.functionCall('add_request_and_confirm', args, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)\n                ]\n            });\n        }\n        catch (e) {\n            if (e.toString().includes('Account has too many active requests. Confirm or delete some')) {\n                await this.deleteUnconfirmedRequests();\n                return await this.signAndSendTransaction(receiverId, actions);\n            }\n            throw e;\n        }\n        // TODO: Are following even needed? Seems like it throws on error already\n        if (!result.status) {\n            throw new Error('Request failed');\n        }\n        const status = { ...result.status };\n        if (!status.SuccessValue || typeof status.SuccessValue !== 'string') {\n            throw new Error('Request failed');\n        }\n        this.setRequest({\n            accountId,\n            actions,\n            requestId: parseInt(Buffer.from(status.SuccessValue, 'base64').toString('ascii'), 10)\n        });\n        if (this.onAddRequestResult) {\n            await this.onAddRequestResult(result);\n        }\n        // NOTE there is no await on purpose to avoid blocking for 2fa\n        this.deleteUnconfirmedRequests();\n        return result;\n    }\n    async deleteUnconfirmedRequests() {\n        // TODO: Delete in batch, don't delete unexpired\n        // TODO: Delete in batch, don't delete unexpired (can reduce gas usage dramatically)\n        const request_ids = await this.getRequestIds();\n        const { requestId } = this.getRequest();\n        for (const requestIdToDelete of request_ids) {\n            if (requestIdToDelete == requestId) {\n                continue;\n            }\n            try {\n                await super.signAndSendTransaction({\n                    receiverId: this.accountId,\n                    actions: [transaction_1.functionCall('delete_request', { request_id: requestIdToDelete }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n                });\n            }\n            catch (e) {\n                console.warn('Attempt to delete an earlier request before 15 minutes failed. Will try again.');\n            }\n        }\n    }\n    // helpers\n    async getRequestIds() {\n        // TODO: Read requests from state to allow filtering by expiration time\n        // TODO: https://github.com/near/core-contracts/blob/305d1db4f4f2cf5ce4c1ef3479f7544957381f11/multisig/src/lib.rs#L84\n        return this.viewFunction(this.accountId, 'list_request_ids');\n    }\n    getRequest() {\n        if (this.storage) {\n            return JSON.parse(this.storage.getItem(exports.MULTISIG_STORAGE_KEY) || '{}');\n        }\n        return storageFallback[exports.MULTISIG_STORAGE_KEY];\n    }\n    setRequest(data) {\n        if (this.storage) {\n            return this.storage.setItem(exports.MULTISIG_STORAGE_KEY, JSON.stringify(data));\n        }\n        storageFallback[exports.MULTISIG_STORAGE_KEY] = data;\n    }\n}\nexports.AccountMultisig = AccountMultisig;\nclass Account2FA extends AccountMultisig {\n    constructor(connection, accountId, options) {\n        super(connection, accountId, options);\n        this.helperUrl = 'https://helper.testnet.near.org';\n        this.helperUrl = options.helperUrl || this.helperUrl;\n        this.storage = options.storage;\n        this.sendCode = options.sendCode || this.sendCodeDefault;\n        this.getCode = options.getCode || this.getCodeDefault;\n        this.verifyCode = options.verifyCode || this.verifyCodeDefault;\n        this.onConfirmResult = options.onConfirmResult;\n    }\n    async signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            const deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n            deprecate('use `Account2FA.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n            return this.__signAndSendTransaction({ receiverId: args[0], actions: args[1] });\n        }\n        else {\n            return this.__signAndSendTransaction(args[0]);\n        }\n    }\n    async __signAndSendTransaction({ receiverId, actions }) {\n        await super.signAndSendTransaction({ receiverId, actions });\n        // TODO: Should following override onRequestResult in superclass instead of doing custom signAndSendTransaction?\n        await this.sendCode();\n        const result = await this.promptAndVerify();\n        if (this.onConfirmResult) {\n            await this.onConfirmResult(result);\n        }\n        return result;\n    }\n    // default helpers for CH deployments of multisig\n    async deployMultisig(contractBytes) {\n        const { accountId } = this;\n        const seedOrLedgerKey = (await this.getRecoveryMethods()).data\n            .filter(({ kind, publicKey }) => (kind === 'phrase' || kind === 'ledger') && publicKey !== null)\n            .map((rm) => rm.publicKey);\n        const fak2lak = (await this.getAccessKeys())\n            .filter(({ public_key, access_key: { permission } }) => permission === 'FullAccess' && !seedOrLedgerKey.includes(public_key))\n            .map((ak) => ak.public_key)\n            .map(toPK);\n        const confirmOnlyKey = toPK((await this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);\n        const newArgs = Buffer.from(JSON.stringify({ 'num_confirmations': 2 }));\n        const actions = [\n            ...fak2lak.map((pk) => transaction_1.deleteKey(pk)),\n            ...fak2lak.map((pk) => transaction_1.addKey(pk, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CHANGE_METHODS, null))),\n            transaction_1.addKey(confirmOnlyKey, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CONFIRM_METHODS, null)),\n            transaction_1.deployContract(contractBytes),\n        ];\n        if ((await this.state()).code_hash === '11111111111111111111111111111111') {\n            actions.push(transaction_1.functionCall('new', newArgs, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT));\n        }\n        console.log('deploying multisig contract for', accountId);\n        return await super.signAndSendTransactionWithAccount(accountId, actions);\n    }\n    async disable(contractBytes) {\n        const { accountId } = this;\n        const accessKeys = await this.getAccessKeys();\n        const lak2fak = accessKeys\n            .filter(({ access_key }) => access_key.permission !== 'FullAccess')\n            .filter(({ access_key }) => {\n            const perm = access_key.permission.FunctionCall;\n            return perm.receiver_id === accountId &&\n                perm.method_names.length === 4 &&\n                perm.method_names.includes('add_request_and_confirm');\n        });\n        const confirmOnlyKey = key_pair_1.PublicKey.from((await this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);\n        const actions = [\n            transaction_1.deleteKey(confirmOnlyKey),\n            ...lak2fak.map(({ public_key }) => transaction_1.deleteKey(key_pair_1.PublicKey.from(public_key))),\n            ...lak2fak.map(({ public_key }) => transaction_1.addKey(key_pair_1.PublicKey.from(public_key), null)),\n            transaction_1.deployContract(contractBytes),\n        ];\n        console.log('disabling 2fa for', accountId);\n        return await this.signAndSendTransaction({\n            receiverId: accountId,\n            actions\n        });\n    }\n    async sendCodeDefault() {\n        const { accountId } = this;\n        const { requestId } = this.getRequest();\n        const method = await this.get2faMethod();\n        await this.postSignedJson('/2fa/send', {\n            accountId,\n            method,\n            requestId,\n        });\n        return requestId;\n    }\n    async getCodeDefault(method) {\n        throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is \"email\" or \"phone\".');\n    }\n    async promptAndVerify() {\n        const method = await this.get2faMethod();\n        const securityCode = await this.getCode(method);\n        try {\n            const result = await this.verifyCode(securityCode);\n            // TODO: Parse error from result for real (like in normal account.signAndSendTransaction)\n            return result;\n        }\n        catch (e) {\n            console.warn('Error validating security code:', e);\n            if (e.toString().includes('invalid 2fa code provided') || e.toString().includes('2fa code not valid')) {\n                return await this.promptAndVerify();\n            }\n            throw e;\n        }\n    }\n    async verifyCodeDefault(securityCode) {\n        const { accountId } = this;\n        const request = this.getRequest();\n        if (!request) {\n            throw new Error('no request pending');\n        }\n        const { requestId } = request;\n        return await this.postSignedJson('/2fa/verify', {\n            accountId,\n            securityCode,\n            requestId\n        });\n    }\n    async getRecoveryMethods() {\n        const { accountId } = this;\n        return {\n            accountId,\n            data: await this.postSignedJson('/account/recoveryMethods', { accountId })\n        };\n    }\n    async get2faMethod() {\n        let { data } = await this.getRecoveryMethods();\n        if (data && data.length) {\n            data = data.find((m) => m.kind.indexOf('2fa-') === 0);\n        }\n        if (!data)\n            return null;\n        const { kind, detail } = data;\n        return { kind, detail };\n    }\n    async signatureFor() {\n        const { accountId } = this;\n        const block = await this.connection.provider.block({ finality: 'final' });\n        const blockNumber = block.header.height.toString();\n        const signed = await this.connection.signer.signMessage(Buffer.from(blockNumber), accountId, this.connection.networkId);\n        const blockNumberSignature = Buffer.from(signed.signature).toString('base64');\n        return { blockNumber, blockNumberSignature };\n    }\n    async postSignedJson(path, body) {\n        return await web_1.fetchJson(this.helperUrl + path, JSON.stringify({\n            ...body,\n            ...(await this.signatureFor())\n        }));\n    }\n}\nexports.Account2FA = Account2FA;\n// helpers\nconst toPK = (pk) => key_pair_1.PublicKey.from(pk);\nconst convertPKForContract = (pk) => pk.toString().replace('ed25519:', '');\nconst convertActions = (actions, accountId, receiverId) => actions.map((a) => {\n    const type = a.enum;\n    const { gas, publicKey, methodName, args, deposit, accessKey, code } = a[type];\n    const action = {\n        type: type[0].toUpperCase() + type.substr(1),\n        gas: (gas && gas.toString()) || undefined,\n        public_key: (publicKey && convertPKForContract(publicKey)) || undefined,\n        method_name: methodName,\n        args: (args && Buffer.from(args).toString('base64')) || undefined,\n        code: (code && Buffer.from(code).toString('base64')) || undefined,\n        amount: (deposit && deposit.toString()) || undefined,\n        deposit: (deposit && deposit.toString()) || '0',\n        permission: undefined,\n    };\n    if (accessKey) {\n        if (receiverId === accountId && accessKey.permission.enum !== 'fullAccess') {\n            action.permission = {\n                receiver_id: accountId,\n                allowance: exports.MULTISIG_ALLOWANCE.toString(),\n                method_names: exports.MULTISIG_CHANGE_METHODS,\n            };\n        }\n        if (accessKey.permission.enum === 'functionCall') {\n            const { receiverId: receiver_id, methodNames: method_names, allowance } = accessKey.permission.functionCall;\n            action.permission = {\n                receiver_id,\n                allowance: (allowance && allowance.toString()) || undefined,\n                method_names\n            };\n        }\n    }\n    return action;\n});\n"],"mappings":"AAAA,YAAY;;AAACA,OAAA;AACb,IAAIC,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,UAAU,GAAGF,OAAO,CAACG,eAAe,GAAGH,OAAO,CAACI,wBAAwB,GAAGJ,OAAO,CAACK,uBAAuB,GAAGL,OAAO,CAACM,gBAAgB,GAAGN,OAAO,CAACO,YAAY,GAAGP,OAAO,CAACQ,kBAAkB,GAAGR,OAAO,CAACS,oBAAoB,GAAG,KAAK,CAAC;AACxO,MAAMC,OAAO,GAAGf,eAAe,CAACD,OAAO,CAAC,OAAO,CAAC,CAAC;AACjD,MAAMiB,MAAM,GAAGhB,eAAe,CAACD,OAAO,CAAC,MAAM,CAAC,CAAC;AAC/C,MAAMkB,SAAS,GAAGlB,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMmB,QAAQ,GAAGnB,OAAO,CAAC,gBAAgB,CAAC;AAC1C,MAAMoB,UAAU,GAAGpB,OAAO,CAAC,kBAAkB,CAAC;AAC9C,MAAMqB,aAAa,GAAGrB,OAAO,CAAC,eAAe,CAAC;AAC9C,MAAMsB,KAAK,GAAGtB,OAAO,CAAC,aAAa,CAAC;AACpCM,OAAO,CAACS,oBAAoB,GAAG,mBAAmB;AAClDT,OAAO,CAACQ,kBAAkB,GAAG,IAAIE,OAAO,CAACO,OAAO,CAACJ,QAAQ,CAACK,eAAe,CAAC,GAAG,CAAC,CAAC;AAC/E;AACAlB,OAAO,CAACO,YAAY,GAAG,IAAIG,OAAO,CAACO,OAAO,CAAC,iBAAiB,CAAC;AAC7DjB,OAAO,CAACM,gBAAgB,GAAG,IAAII,OAAO,CAACO,OAAO,CAAC,GAAG,CAAC;AACnDjB,OAAO,CAACK,uBAAuB,GAAG,CAAC,aAAa,EAAE,yBAAyB,EAAE,gBAAgB,EAAE,SAAS,CAAC;AACzGL,OAAO,CAACI,wBAAwB,GAAG,CAAC,SAAS,CAAC;AAC9C;AACA,MAAMe,eAAe,GAAG;EACpB,CAACnB,OAAO,CAACS,oBAAoB,GAAG;AACpC,CAAC;AACD,MAAMN,eAAe,SAASS,SAAS,CAACQ,OAAO,CAAC;EAC5CC,WAAWA,CAACC,UAAU,EAAEC,SAAS,EAAEC,OAAO,EAAE;IACxC,KAAK,CAACF,UAAU,EAAEC,SAAS,CAAC;IAC5B,IAAI,CAACE,OAAO,GAAGD,OAAO,CAACC,OAAO;IAC9B,IAAI,CAACC,kBAAkB,GAAGF,OAAO,CAACE,kBAAkB;EACxD;EACA,MAAMC,iCAAiCA,CAACC,UAAU,EAAEC,OAAO,EAAE;IACzD,OAAO,KAAK,CAACC,sBAAsB,CAAC;MAAEF,UAAU;MAAEC;IAAQ,CAAC,CAAC;EAChE;EACAC,sBAAsBA,CAAC,GAAGC,IAAI,EAAE;IAC5B,IAAI,OAAOA,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MAC7B,OAAO,IAAI,CAACC,uBAAuB,CAAC;QAAEJ,UAAU,EAAEG,IAAI,CAAC,CAAC,CAAC;QAAEF,OAAO,EAAEE,IAAI,CAAC,CAAC;MAAE,CAAC,CAAC;IAClF;IACA,OAAO,IAAI,CAACC,uBAAuB,CAACD,IAAI,CAAC,CAAC,CAAC,CAAC;EAChD;EACA,MAAMC,uBAAuBA,CAAC;IAAEJ,UAAU;IAAEC;EAAQ,CAAC,EAAE;IACnD,MAAM;MAAEN;IAAU,CAAC,GAAG,IAAI;IAC1B,MAAMQ,IAAI,GAAGE,MAAM,CAACC,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;MACpCC,OAAO,EAAE;QACLC,WAAW,EAAEV,UAAU;QACvBC,OAAO,EAAEU,cAAc,CAACV,OAAO,EAAEN,SAAS,EAAEK,UAAU;MAC1D;IACJ,CAAC,CAAC,CAAC;IACH,IAAIY,MAAM;IACV,IAAI;MACAA,MAAM,GAAG,MAAM,KAAK,CAACV,sBAAsB,CAAC;QACxCF,UAAU,EAAEL,SAAS;QACrBM,OAAO,EAAE,CACLd,aAAa,CAAC0B,YAAY,CAAC,yBAAyB,EAAEV,IAAI,EAAE/B,OAAO,CAACO,YAAY,EAAEP,OAAO,CAACM,gBAAgB,CAAC;MAEnH,CAAC,CAAC;IACN,CAAC,CACD,OAAOoC,CAAC,EAAE;MACN,IAAIA,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,8DAA8D,CAAC,EAAE;QACvF,MAAM,IAAI,CAACC,yBAAyB,CAAC,CAAC;QACtC,OAAO,MAAM,IAAI,CAACf,sBAAsB,CAACF,UAAU,EAAEC,OAAO,CAAC;MACjE;MACA,MAAMa,CAAC;IACX;IACA;IACA,IAAI,CAACF,MAAM,CAACM,MAAM,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;IACrC;IACA,MAAMD,MAAM,GAAG;MAAE,GAAGN,MAAM,CAACM;IAAO,CAAC;IACnC,IAAI,CAACA,MAAM,CAACE,YAAY,IAAI,OAAOF,MAAM,CAACE,YAAY,KAAK,QAAQ,EAAE;MACjE,MAAM,IAAID,KAAK,CAAC,gBAAgB,CAAC;IACrC;IACA,IAAI,CAACE,UAAU,CAAC;MACZ1B,SAAS;MACTM,OAAO;MACPqB,SAAS,EAAEC,QAAQ,CAAClB,MAAM,CAACC,IAAI,CAACY,MAAM,CAACE,YAAY,EAAE,QAAQ,CAAC,CAACL,QAAQ,CAAC,OAAO,CAAC,EAAE,EAAE;IACxF,CAAC,CAAC;IACF,IAAI,IAAI,CAACjB,kBAAkB,EAAE;MACzB,MAAM,IAAI,CAACA,kBAAkB,CAACc,MAAM,CAAC;IACzC;IACA;IACA,IAAI,CAACK,yBAAyB,CAAC,CAAC;IAChC,OAAOL,MAAM;EACjB;EACA,MAAMK,yBAAyBA,CAAA,EAAG;IAC9B;IACA;IACA,MAAMO,WAAW,GAAG,MAAM,IAAI,CAACC,aAAa,CAAC,CAAC;IAC9C,MAAM;MAAEH;IAAU,CAAC,GAAG,IAAI,CAACI,UAAU,CAAC,CAAC;IACvC,KAAK,MAAMC,iBAAiB,IAAIH,WAAW,EAAE;MACzC,IAAIG,iBAAiB,IAAIL,SAAS,EAAE;QAChC;MACJ;MACA,IAAI;QACA,MAAM,KAAK,CAACpB,sBAAsB,CAAC;UAC/BF,UAAU,EAAE,IAAI,CAACL,SAAS;UAC1BM,OAAO,EAAE,CAACd,aAAa,CAAC0B,YAAY,CAAC,gBAAgB,EAAE;YAAEe,UAAU,EAAED;UAAkB,CAAC,EAAEvD,OAAO,CAACO,YAAY,EAAEP,OAAO,CAACM,gBAAgB,CAAC;QAC7I,CAAC,CAAC;MACN,CAAC,CACD,OAAOoC,CAAC,EAAE;QACNe,OAAO,CAACC,IAAI,CAAC,gFAAgF,CAAC;MAClG;IACJ;EACJ;EACA;EACA,MAAML,aAAaA,CAAA,EAAG;IAClB;IACA;IACA,OAAO,IAAI,CAACM,YAAY,CAAC,IAAI,CAACpC,SAAS,EAAE,kBAAkB,CAAC;EAChE;EACA+B,UAAUA,CAAA,EAAG;IACT,IAAI,IAAI,CAAC7B,OAAO,EAAE;MACd,OAAOU,IAAI,CAACyB,KAAK,CAAC,IAAI,CAACnC,OAAO,CAACoC,OAAO,CAAC7D,OAAO,CAACS,oBAAoB,CAAC,IAAI,IAAI,CAAC;IACjF;IACA,OAAOU,eAAe,CAACnB,OAAO,CAACS,oBAAoB,CAAC;EACxD;EACAwC,UAAUA,CAACa,IAAI,EAAE;IACb,IAAI,IAAI,CAACrC,OAAO,EAAE;MACd,OAAO,IAAI,CAACA,OAAO,CAACsC,OAAO,CAAC/D,OAAO,CAACS,oBAAoB,EAAE0B,IAAI,CAACC,SAAS,CAAC0B,IAAI,CAAC,CAAC;IACnF;IACA3C,eAAe,CAACnB,OAAO,CAACS,oBAAoB,CAAC,GAAGqD,IAAI;EACxD;AACJ;AACA9D,OAAO,CAACG,eAAe,GAAGA,eAAe;AACzC,MAAMD,UAAU,SAASC,eAAe,CAAC;EACrCkB,WAAWA,CAACC,UAAU,EAAEC,SAAS,EAAEC,OAAO,EAAE;IACxC,KAAK,CAACF,UAAU,EAAEC,SAAS,EAAEC,OAAO,CAAC;IACrC,IAAI,CAACwC,SAAS,GAAG,iCAAiC;IAClD,IAAI,CAACA,SAAS,GAAGxC,OAAO,CAACwC,SAAS,IAAI,IAAI,CAACA,SAAS;IACpD,IAAI,CAACvC,OAAO,GAAGD,OAAO,CAACC,OAAO;IAC9B,IAAI,CAACwC,QAAQ,GAAGzC,OAAO,CAACyC,QAAQ,IAAI,IAAI,CAACC,eAAe;IACxD,IAAI,CAACC,OAAO,GAAG3C,OAAO,CAAC2C,OAAO,IAAI,IAAI,CAACC,cAAc;IACrD,IAAI,CAACC,UAAU,GAAG7C,OAAO,CAAC6C,UAAU,IAAI,IAAI,CAACC,iBAAiB;IAC9D,IAAI,CAACC,eAAe,GAAG/C,OAAO,CAAC+C,eAAe;EAClD;EACA,MAAMzC,sBAAsBA,CAAC,GAAGC,IAAI,EAAE;IAClC,IAAI,OAAOA,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MAC7B,MAAMyC,SAAS,GAAG7D,MAAM,CAACM,OAAO,CAAC,oDAAoD,CAAC;MACtFuD,SAAS,CAAC,gFAAgF,CAAC;MAC3F,OAAO,IAAI,CAACC,wBAAwB,CAAC;QAAE7C,UAAU,EAAEG,IAAI,CAAC,CAAC,CAAC;QAAEF,OAAO,EAAEE,IAAI,CAAC,CAAC;MAAE,CAAC,CAAC;IACnF,CAAC,MACI;MACD,OAAO,IAAI,CAAC0C,wBAAwB,CAAC1C,IAAI,CAAC,CAAC,CAAC,CAAC;IACjD;EACJ;EACA,MAAM0C,wBAAwBA,CAAC;IAAE7C,UAAU;IAAEC;EAAQ,CAAC,EAAE;IACpD,MAAM,KAAK,CAACC,sBAAsB,CAAC;MAAEF,UAAU;MAAEC;IAAQ,CAAC,CAAC;IAC3D;IACA,MAAM,IAAI,CAACoC,QAAQ,CAAC,CAAC;IACrB,MAAMzB,MAAM,GAAG,MAAM,IAAI,CAACkC,eAAe,CAAC,CAAC;IAC3C,IAAI,IAAI,CAACH,eAAe,EAAE;MACtB,MAAM,IAAI,CAACA,eAAe,CAAC/B,MAAM,CAAC;IACtC;IACA,OAAOA,MAAM;EACjB;EACA;EACA,MAAMmC,cAAcA,CAACC,aAAa,EAAE;IAChC,MAAM;MAAErD;IAAU,CAAC,GAAG,IAAI;IAC1B,MAAMsD,eAAe,GAAG,CAAC,MAAM,IAAI,CAACC,kBAAkB,CAAC,CAAC,EAAEhB,IAAI,CACzDiB,MAAM,CAAC,CAAC;MAAEC,IAAI;MAAEC;IAAU,CAAC,KAAK,CAACD,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,QAAQ,KAAKC,SAAS,KAAK,IAAI,CAAC,CAC/FC,GAAG,CAAEC,EAAE,IAAKA,EAAE,CAACF,SAAS,CAAC;IAC9B,MAAMG,OAAO,GAAG,CAAC,MAAM,IAAI,CAACC,aAAa,CAAC,CAAC,EACtCN,MAAM,CAAC,CAAC;MAAEO,UAAU;MAAEC,UAAU,EAAE;QAAEC;MAAW;IAAE,CAAC,KAAKA,UAAU,KAAK,YAAY,IAAI,CAACX,eAAe,CAACjC,QAAQ,CAAC0C,UAAU,CAAC,CAAC,CAC5HJ,GAAG,CAAEO,EAAE,IAAKA,EAAE,CAACH,UAAU,CAAC,CAC1BJ,GAAG,CAACQ,IAAI,CAAC;IACd,MAAMC,cAAc,GAAGD,IAAI,CAAC,CAAC,MAAM,IAAI,CAACE,cAAc,CAAC,mBAAmB,EAAE;MAAErE;IAAU,CAAC,CAAC,EAAE0D,SAAS,CAAC;IACtG,MAAMY,OAAO,GAAG5D,MAAM,CAACC,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;MAAE,mBAAmB,EAAE;IAAE,CAAC,CAAC,CAAC;IACvE,MAAMP,OAAO,GAAG,CACZ,GAAGuD,OAAO,CAACF,GAAG,CAAEY,EAAE,IAAK/E,aAAa,CAACgF,SAAS,CAACD,EAAE,CAAC,CAAC,EACnD,GAAGV,OAAO,CAACF,GAAG,CAAEY,EAAE,IAAK/E,aAAa,CAACiF,MAAM,CAACF,EAAE,EAAE/E,aAAa,CAACkF,qBAAqB,CAAC1E,SAAS,EAAEvB,OAAO,CAACK,uBAAuB,EAAE,IAAI,CAAC,CAAC,CAAC,EACvIU,aAAa,CAACiF,MAAM,CAACL,cAAc,EAAE5E,aAAa,CAACkF,qBAAqB,CAAC1E,SAAS,EAAEvB,OAAO,CAACI,wBAAwB,EAAE,IAAI,CAAC,CAAC,EAC5HW,aAAa,CAACmF,cAAc,CAACtB,aAAa,CAAC,CAC9C;IACD,IAAI,CAAC,MAAM,IAAI,CAACuB,KAAK,CAAC,CAAC,EAAEC,SAAS,KAAK,kCAAkC,EAAE;MACvEvE,OAAO,CAACwE,IAAI,CAACtF,aAAa,CAAC0B,YAAY,CAAC,KAAK,EAAEoD,OAAO,EAAE7F,OAAO,CAACO,YAAY,EAAEP,OAAO,CAACM,gBAAgB,CAAC,CAAC;IAC5G;IACAmD,OAAO,CAAC6C,GAAG,CAAC,iCAAiC,EAAE/E,SAAS,CAAC;IACzD,OAAO,MAAM,KAAK,CAACI,iCAAiC,CAACJ,SAAS,EAAEM,OAAO,CAAC;EAC5E;EACA,MAAM0E,OAAOA,CAAC3B,aAAa,EAAE;IACzB,MAAM;MAAErD;IAAU,CAAC,GAAG,IAAI;IAC1B,MAAMiF,UAAU,GAAG,MAAM,IAAI,CAACnB,aAAa,CAAC,CAAC;IAC7C,MAAMoB,OAAO,GAAGD,UAAU,CACrBzB,MAAM,CAAC,CAAC;MAAEQ;IAAW,CAAC,KAAKA,UAAU,CAACC,UAAU,KAAK,YAAY,CAAC,CAClET,MAAM,CAAC,CAAC;MAAEQ;IAAW,CAAC,KAAK;MAC5B,MAAMmB,IAAI,GAAGnB,UAAU,CAACC,UAAU,CAACmB,YAAY;MAC/C,OAAOD,IAAI,CAACpE,WAAW,KAAKf,SAAS,IACjCmF,IAAI,CAACE,YAAY,CAACC,MAAM,KAAK,CAAC,IAC9BH,IAAI,CAACE,YAAY,CAAChE,QAAQ,CAAC,yBAAyB,CAAC;IAC7D,CAAC,CAAC;IACF,MAAM+C,cAAc,GAAG7E,UAAU,CAACgG,SAAS,CAAC5E,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC0D,cAAc,CAAC,mBAAmB,EAAE;MAAErE;IAAU,CAAC,CAAC,EAAE0D,SAAS,CAAC;IAC3H,MAAMpD,OAAO,GAAG,CACZd,aAAa,CAACgF,SAAS,CAACJ,cAAc,CAAC,EACvC,GAAGc,OAAO,CAACvB,GAAG,CAAC,CAAC;MAAEI;IAAW,CAAC,KAAKvE,aAAa,CAACgF,SAAS,CAACjF,UAAU,CAACgG,SAAS,CAAC5E,IAAI,CAACoD,UAAU,CAAC,CAAC,CAAC,EAClG,GAAGmB,OAAO,CAACvB,GAAG,CAAC,CAAC;MAAEI;IAAW,CAAC,KAAKvE,aAAa,CAACiF,MAAM,CAAClF,UAAU,CAACgG,SAAS,CAAC5E,IAAI,CAACoD,UAAU,CAAC,EAAE,IAAI,CAAC,CAAC,EACrGvE,aAAa,CAACmF,cAAc,CAACtB,aAAa,CAAC,CAC9C;IACDnB,OAAO,CAAC6C,GAAG,CAAC,mBAAmB,EAAE/E,SAAS,CAAC;IAC3C,OAAO,MAAM,IAAI,CAACO,sBAAsB,CAAC;MACrCF,UAAU,EAAEL,SAAS;MACrBM;IACJ,CAAC,CAAC;EACN;EACA,MAAMqC,eAAeA,CAAA,EAAG;IACpB,MAAM;MAAE3C;IAAU,CAAC,GAAG,IAAI;IAC1B,MAAM;MAAE2B;IAAU,CAAC,GAAG,IAAI,CAACI,UAAU,CAAC,CAAC;IACvC,MAAMyD,MAAM,GAAG,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC;IACxC,MAAM,IAAI,CAACpB,cAAc,CAAC,WAAW,EAAE;MACnCrE,SAAS;MACTwF,MAAM;MACN7D;IACJ,CAAC,CAAC;IACF,OAAOA,SAAS;EACpB;EACA,MAAMkB,cAAcA,CAAC2C,MAAM,EAAE;IACzB,MAAM,IAAIhE,KAAK,CAAC,2KAA2K,CAAC;EAChM;EACA,MAAM2B,eAAeA,CAAA,EAAG;IACpB,MAAMqC,MAAM,GAAG,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC;IACxC,MAAMC,YAAY,GAAG,MAAM,IAAI,CAAC9C,OAAO,CAAC4C,MAAM,CAAC;IAC/C,IAAI;MACA,MAAMvE,MAAM,GAAG,MAAM,IAAI,CAAC6B,UAAU,CAAC4C,YAAY,CAAC;MAClD;MACA,OAAOzE,MAAM;IACjB,CAAC,CACD,OAAOE,CAAC,EAAE;MACNe,OAAO,CAACC,IAAI,CAAC,iCAAiC,EAAEhB,CAAC,CAAC;MAClD,IAAIA,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,2BAA2B,CAAC,IAAIF,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,oBAAoB,CAAC,EAAE;QACnG,OAAO,MAAM,IAAI,CAAC8B,eAAe,CAAC,CAAC;MACvC;MACA,MAAMhC,CAAC;IACX;EACJ;EACA,MAAM4B,iBAAiBA,CAAC2C,YAAY,EAAE;IAClC,MAAM;MAAE1F;IAAU,CAAC,GAAG,IAAI;IAC1B,MAAMc,OAAO,GAAG,IAAI,CAACiB,UAAU,CAAC,CAAC;IACjC,IAAI,CAACjB,OAAO,EAAE;MACV,MAAM,IAAIU,KAAK,CAAC,oBAAoB,CAAC;IACzC;IACA,MAAM;MAAEG;IAAU,CAAC,GAAGb,OAAO;IAC7B,OAAO,MAAM,IAAI,CAACuD,cAAc,CAAC,aAAa,EAAE;MAC5CrE,SAAS;MACT0F,YAAY;MACZ/D;IACJ,CAAC,CAAC;EACN;EACA,MAAM4B,kBAAkBA,CAAA,EAAG;IACvB,MAAM;MAAEvD;IAAU,CAAC,GAAG,IAAI;IAC1B,OAAO;MACHA,SAAS;MACTuC,IAAI,EAAE,MAAM,IAAI,CAAC8B,cAAc,CAAC,0BAA0B,EAAE;QAAErE;MAAU,CAAC;IAC7E,CAAC;EACL;EACA,MAAMyF,YAAYA,CAAA,EAAG;IACjB,IAAI;MAAElD;IAAK,CAAC,GAAG,MAAM,IAAI,CAACgB,kBAAkB,CAAC,CAAC;IAC9C,IAAIhB,IAAI,IAAIA,IAAI,CAAC+C,MAAM,EAAE;MACrB/C,IAAI,GAAGA,IAAI,CAACoD,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACnC,IAAI,CAACoC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACzD;IACA,IAAI,CAACtD,IAAI,EACL,OAAO,IAAI;IACf,MAAM;MAAEkB,IAAI;MAAEqC;IAAO,CAAC,GAAGvD,IAAI;IAC7B,OAAO;MAAEkB,IAAI;MAAEqC;IAAO,CAAC;EAC3B;EACA,MAAMC,YAAYA,CAAA,EAAG;IACjB,MAAM;MAAE/F;IAAU,CAAC,GAAG,IAAI;IAC1B,MAAMgG,KAAK,GAAG,MAAM,IAAI,CAACjG,UAAU,CAACkG,QAAQ,CAACD,KAAK,CAAC;MAAEE,QAAQ,EAAE;IAAQ,CAAC,CAAC;IACzE,MAAMC,WAAW,GAAGH,KAAK,CAACI,MAAM,CAACC,MAAM,CAACjF,QAAQ,CAAC,CAAC;IAClD,MAAMkF,MAAM,GAAG,MAAM,IAAI,CAACvG,UAAU,CAACwG,MAAM,CAACC,WAAW,CAAC9F,MAAM,CAACC,IAAI,CAACwF,WAAW,CAAC,EAAEnG,SAAS,EAAE,IAAI,CAACD,UAAU,CAAC0G,SAAS,CAAC;IACvH,MAAMC,oBAAoB,GAAGhG,MAAM,CAACC,IAAI,CAAC2F,MAAM,CAACK,SAAS,CAAC,CAACvF,QAAQ,CAAC,QAAQ,CAAC;IAC7E,OAAO;MAAE+E,WAAW;MAAEO;IAAqB,CAAC;EAChD;EACA,MAAMrC,cAAcA,CAACuC,IAAI,EAAEC,IAAI,EAAE;IAC7B,OAAO,MAAMpH,KAAK,CAACqH,SAAS,CAAC,IAAI,CAACrE,SAAS,GAAGmE,IAAI,EAAEhG,IAAI,CAACC,SAAS,CAAC;MAC/D,GAAGgG,IAAI;MACP,IAAI,MAAM,IAAI,CAACd,YAAY,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;EACP;AACJ;AACAtH,OAAO,CAACE,UAAU,GAAGA,UAAU;AAC/B;AACA,MAAMwF,IAAI,GAAII,EAAE,IAAKhF,UAAU,CAACgG,SAAS,CAAC5E,IAAI,CAAC4D,EAAE,CAAC;AAClD,MAAMwC,oBAAoB,GAAIxC,EAAE,IAAKA,EAAE,CAACnD,QAAQ,CAAC,CAAC,CAAC4F,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;AAC1E,MAAMhG,cAAc,GAAGA,CAACV,OAAO,EAAEN,SAAS,EAAEK,UAAU,KAAKC,OAAO,CAACqD,GAAG,CAAEsD,CAAC,IAAK;EAC1E,MAAMC,IAAI,GAAGD,CAAC,CAACE,IAAI;EACnB,MAAM;IAAEC,GAAG;IAAE1D,SAAS;IAAE2D,UAAU;IAAE7G,IAAI;IAAE8G,OAAO;IAAEC,SAAS;IAAEC;EAAK,CAAC,GAAGP,CAAC,CAACC,IAAI,CAAC;EAC9E,MAAMO,MAAM,GAAG;IACXP,IAAI,EAAEA,IAAI,CAAC,CAAC,CAAC,CAACQ,WAAW,CAAC,CAAC,GAAGR,IAAI,CAACS,MAAM,CAAC,CAAC,CAAC;IAC5CP,GAAG,EAAGA,GAAG,IAAIA,GAAG,CAAChG,QAAQ,CAAC,CAAC,IAAKwG,SAAS;IACzC7D,UAAU,EAAGL,SAAS,IAAIqD,oBAAoB,CAACrD,SAAS,CAAC,IAAKkE,SAAS;IACvEC,WAAW,EAAER,UAAU;IACvB7G,IAAI,EAAGA,IAAI,IAAIE,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAACY,QAAQ,CAAC,QAAQ,CAAC,IAAKwG,SAAS;IACjEJ,IAAI,EAAGA,IAAI,IAAI9G,MAAM,CAACC,IAAI,CAAC6G,IAAI,CAAC,CAACpG,QAAQ,CAAC,QAAQ,CAAC,IAAKwG,SAAS;IACjEE,MAAM,EAAGR,OAAO,IAAIA,OAAO,CAAClG,QAAQ,CAAC,CAAC,IAAKwG,SAAS;IACpDN,OAAO,EAAGA,OAAO,IAAIA,OAAO,CAAClG,QAAQ,CAAC,CAAC,IAAK,GAAG;IAC/C6C,UAAU,EAAE2D;EAChB,CAAC;EACD,IAAIL,SAAS,EAAE;IACX,IAAIlH,UAAU,KAAKL,SAAS,IAAIuH,SAAS,CAACtD,UAAU,CAACkD,IAAI,KAAK,YAAY,EAAE;MACxEM,MAAM,CAACxD,UAAU,GAAG;QAChBlD,WAAW,EAAEf,SAAS;QACtB+H,SAAS,EAAEtJ,OAAO,CAACQ,kBAAkB,CAACmC,QAAQ,CAAC,CAAC;QAChDiE,YAAY,EAAE5G,OAAO,CAACK;MAC1B,CAAC;IACL;IACA,IAAIyI,SAAS,CAACtD,UAAU,CAACkD,IAAI,KAAK,cAAc,EAAE;MAC9C,MAAM;QAAE9G,UAAU,EAAEU,WAAW;QAAEiH,WAAW,EAAE3C,YAAY;QAAE0C;MAAU,CAAC,GAAGR,SAAS,CAACtD,UAAU,CAAC/C,YAAY;MAC3GuG,MAAM,CAACxD,UAAU,GAAG;QAChBlD,WAAW;QACXgH,SAAS,EAAGA,SAAS,IAAIA,SAAS,CAAC3G,QAAQ,CAAC,CAAC,IAAKwG,SAAS;QAC3DvC;MACJ,CAAC;IACL;EACJ;EACA,OAAOoC,MAAM;AACjB,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}