{"ast":null,"code":"require(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/util/cipher.ts\nvar cipher_exports = {};\n__export(cipher_exports, {\n  CipherHelper: () => CipherHelper\n});\nmodule.exports = __toCommonJS(cipher_exports);\nvar CRYPTO = __toESM(require(\"crypto\"));\nvar import_node_forge = __toESM(require(\"node-forge\"));\nvar import_util = require(\"./util\");\nvar import_decimal = __toESM(require(\"decimal.js\"));\nvar import_types = require(\"../types\");\nvar Rsa = require(\"node-rsa\");\nvar CipherHelper = class {\n  /**\n   * Obtain bytes of random length\n   * @param length\n   * @return Buffer\n   */\n  static randomBytes(length = 16) {\n    return CRYPTO.randomBytes(length);\n  }\n  /**\n   * get hash\n   * @param data\n   */\n  static sha256Hash(data) {\n    return CRYPTO.createHash(\"sha256\").update(data).digest(\"base64\");\n  }\n  /**\n   * rsa sign\n   * @param privateKeyPem\n   * @param data\n   */\n  static rsaSign(privateKeyPem, data) {\n    const privateKey = import_node_forge.default.pki.privateKeyFromPem(privateKeyPem);\n    const md = import_node_forge.default.md.sha256.create();\n    if (typeof data === \"string\") {\n      md.update(data, \"utf8\");\n    } else {\n      const str = data.toString(\"latin1\");\n      md.update(str, \"latin1\");\n    }\n    const pss = import_node_forge.default.pss.create({\n      md: import_node_forge.default.md.sha256.create(),\n      mgf: import_node_forge.default.mgf.mgf1.create(import_node_forge.default.md.sha256.create()),\n      saltLength: 32\n    });\n    const signature = privateKey.sign(md, pss);\n    return Buffer.from(signature, \"latin1\");\n  }\n  static rsaEncrypt(pubKey, data) {\n    const forgePublicKey = import_node_forge.default.pki.publicKeyFromPem(pubKey);\n    const byteString = import_util.Util.ab2str(data);\n    const encrypted = forgePublicKey.encrypt(byteString, \"RSA-OAEP\", {\n      md: import_node_forge.default.md.sha256.create(),\n      mgf1: {\n        md: import_node_forge.default.md.sha256.create()\n      }\n    });\n    return Buffer.from(encrypted, \"latin1\");\n  }\n  /**\n   * get hmac hash\n   * @param key\n   * @param data\n   */\n  static hmacHash(key, data) {\n    const h = CRYPTO.createHmac(\"sha256\", key);\n    h.update(data);\n    return h.digest();\n  }\n  /**\n   * create RSA keys\n   * @param b\n   */\n  static createKeyPemString(b = 2048) {\n    const key = new Rsa({\n      b: 2048\n    });\n    const publicKeyPem = key.exportKey(\"pkcs8-public-der\");\n    const privateKeyPem = key.exportKey(\"pkcs8-private-der\");\n    return {\n      publicKeyPem,\n      privateKeyPem\n    };\n  }\n  static getPublicKeyPemFromPrivate(privateKeyDer) {\n    const key = new Rsa(privateKeyDer, \"pkcs8-der\");\n    const publicKeyPem = key.exportKey(\"pkcs8-public-pem\");\n    const privateKeyPem = key.exportKey(\"pkcs8-private-pem\");\n    return {\n      publicKeyPem,\n      privateKeyPem\n    };\n  }\n  /**\n   * aes encrypt\n   * @param key\n   * @param iv\n   * @param data\n   */\n  static aesEncrypt(key, iv, data) {\n    const cipher = CRYPTO.createCipheriv(\"aes-128-cbc\", key, iv);\n    let encrypted_data;\n    cipher.setAutoPadding(true);\n    encrypted_data = cipher.update(data);\n    encrypted_data = Buffer.concat([encrypted_data, cipher.final()]);\n    return encrypted_data;\n  }\n  /**\n   * aes decrypt\n   * @param key\n   * @param iv\n   * @param data\n   */\n  static aesDecrypt(key, iv, data) {\n    const cipher = CRYPTO.createDecipheriv(\"aes-128-cbc\", key, iv);\n    const encrypted_data_b64 = Buffer.from(data).toString(\"base64\");\n    let decrypted_data = cipher.update(encrypted_data_b64, \"base64\");\n    decrypted_data = Buffer.concat([decrypted_data, cipher.final()]);\n    return decrypted_data;\n  }\n  /**\n   * Generate hexadecimal mk\n   */\n  static generateMk() {\n    const mk = CipherHelper.randomBytes();\n    return mk.toString(\"hex\");\n  }\n  /**\n   *\n   * @param mk\n   * @param dekId\n   * @param dek\n   */\n  static encryptDekToBase64(mk, dekId, dek) {\n    const buffer = new ArrayBuffer(8);\n    const view = new DataView(buffer);\n    view.setUint32(0, dekId & 4294967295, true);\n    view.setUint32(4, Math.floor(dekId / 4294967296), true);\n    const dekid_dek = Buffer.concat([Buffer.from(buffer), dek], 24);\n    const iv = CipherHelper.randomBytes();\n    const encrypted_data = CipherHelper.aesEncrypt(mk, iv, dekid_dek);\n    const dekCipher = Buffer.concat([Buffer.from([3]), iv, encrypted_data]);\n    return dekCipher.toString(\"base64\");\n  }\n  static decryptDekToBase64(mek, dekCipherStr) {\n    const dekCipher = Buffer.from(dekCipherStr, \"base64\");\n    const dekid_dek = CipherHelper.aesDecrypt(mek, dekCipher.slice(1, 17), dekCipher.slice(17));\n    const dekid = new DataView(dekid_dek.slice(0, 8).buffer).getUint16(0, true);\n    const dek = dekid_dek.slice(8);\n    return [dekid, dek];\n  }\n  static digest_gAuth(mek, grp_id, dek_id) {\n    const buffer = new ArrayBuffer(8);\n    const view = new DataView(buffer);\n    view.setBigInt64(0, BigInt(dek_id), true);\n    const dek_id_array = Buffer.from(buffer);\n    const buf = Buffer.concat([grp_id, dek_id_array]);\n    const gAuth = CipherHelper.hmacHash(mek, buf);\n    return gAuth.toString(\"base64\");\n  }\n  static encodeDataByType(data, encType) {\n    let result;\n    const buffer = new ArrayBuffer(8);\n    const view = new DataView(buffer);\n    switch (encType) {\n      case import_types.DataType.int4:\n        view.setInt32(0, data, true);\n        result = new Uint8Array(buffer, 0, 4);\n        break;\n      case import_types.DataType.int8:\n        view.setBigInt64(0, BigInt(data), true);\n        result = new Uint8Array(buffer);\n        break;\n      case import_types.DataType.float4:\n        view.setFloat32(0, data, true);\n        result = new Uint8Array(buffer, 0, 4);\n        break;\n      case import_types.DataType.float8:\n        view.setFloat64(0, data, true);\n        result = new Uint8Array(buffer);\n        break;\n      case 6:\n        const val = new import_decimal.default(data);\n        result = new TextEncoder().encode(val.toString());\n        break;\n      case 7:\n        result = new TextEncoder().encode(data);\n        break;\n      case 8:\n        const uSec = BigInt(Math.floor(data * 1e3));\n        const offset = BigInt(Math.floor(new Date().getTimezoneOffset() * 60 * 1e6));\n        const adjustedUSec = uSec - BigInt(9466848e8) + offset;\n        view.setBigInt64(0, adjustedUSec, true);\n        result = new Uint8Array(buffer);\n        break;\n      default:\n        throw new Error(\"Unsupported encryption type\");\n    }\n    return Buffer.from(result);\n  }\n  static decodeDataByType(data, encType) {\n    let result;\n    if (encType === import_types.DataType.int4) {\n      const size = 4;\n      const buf = data.slice(0, size);\n      result = new Int32Array(buf.buffer)[0];\n    } else if (encType === import_types.DataType.int8) {\n      const size = 8;\n      const buf = data.slice(0, size);\n      result = new BigInt64Array(buf.buffer)[0];\n      result = result.toString();\n    } else if (encType === import_types.DataType.float4) {\n      const size = 4;\n      const buf = data.slice(0, size);\n      result = new Float32Array(buf.buffer)[0];\n    } else if (encType === import_types.DataType.float8) {\n      const size = 8;\n      const buf = data.slice(0, size);\n      result = new Float64Array(buf.buffer)[0];\n    } else if (encType === 6) {\n      result = new import_decimal.default(Buffer.from(data).toString());\n      result = result.toString();\n    } else if (encType === 7) {\n      result = new TextDecoder().decode(data);\n    } else if (encType === 8) {\n      const size = 8;\n      const buf = data.slice(0, size);\n      let u_sec = new BigInt64Array(buf.buffer)[0];\n      u_sec += BigInt(9466848e8);\n      u_sec -= BigInt(new Date().getTimezoneOffset() * 60 * 1e6);\n      const time_stamp = Number(u_sec) / 1e6;\n      result = time_stamp * 1e3;\n    } else {\n      throw new Error(\"Unsupported encryption type\");\n    }\n    return result;\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  CipherHelper\n});","map":{"version":3,"names":["__create","Object","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getProtoOf","getPrototypeOf","__hasOwnProp","prototype","hasOwnProperty","__export","target","all","name","get","enumerable","__copyProps","to","from","except","desc","key","call","__toESM","mod","isNodeMode","__esModule","value","__toCommonJS","cipher_exports","CipherHelper","module","exports","CRYPTO","require","import_node_forge","import_util","import_decimal","import_types","Rsa","randomBytes","length","sha256Hash","data","createHash","update","digest","rsaSign","privateKeyPem","privateKey","default","pki","privateKeyFromPem","md","sha256","str","toString","pss","mgf","mgf1","saltLength","signature","sign","Buffer","rsaEncrypt","pubKey","forgePublicKey","publicKeyFromPem","byteString","Util","ab2str","encrypted","encrypt","hmacHash","h","createHmac","createKeyPemString","b","publicKeyPem","exportKey","getPublicKeyPemFromPrivate","privateKeyDer","aesEncrypt","iv","cipher","createCipheriv","encrypted_data","setAutoPadding","concat","final","aesDecrypt","createDecipheriv","encrypted_data_b64","decrypted_data","generateMk","mk","encryptDekToBase64","dekId","dek","buffer","ArrayBuffer","view","DataView","setUint32","Math","floor","dekid_dek","dekCipher","decryptDekToBase64","mek","dekCipherStr","slice","dekid","getUint16","digest_gAuth","grp_id","dek_id","setBigInt64","BigInt","dek_id_array","buf","gAuth","encodeDataByType","encType","result","DataType","int4","setInt32","Uint8Array","int8","float4","setFloat32","float8","setFloat64","val","TextEncoder","encode","uSec","offset","Date","getTimezoneOffset","adjustedUSec","Error","decodeDataByType","size","Int32Array","BigInt64Array","Float32Array","Float64Array","TextDecoder","decode","u_sec","time_stamp","Number"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/mind-lake-sdk/dist/util/cipher.js"],"sourcesContent":["var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/util/cipher.ts\nvar cipher_exports = {};\n__export(cipher_exports, {\n  CipherHelper: () => CipherHelper\n});\nmodule.exports = __toCommonJS(cipher_exports);\nvar CRYPTO = __toESM(require(\"crypto\"));\nvar import_node_forge = __toESM(require(\"node-forge\"));\nvar import_util = require(\"./util\");\nvar import_decimal = __toESM(require(\"decimal.js\"));\nvar import_types = require(\"../types\");\nvar Rsa = require(\"node-rsa\");\nvar CipherHelper = class {\n  /**\n   * Obtain bytes of random length\n   * @param length\n   * @return Buffer\n   */\n  static randomBytes(length = 16) {\n    return CRYPTO.randomBytes(length);\n  }\n  /**\n   * get hash\n   * @param data\n   */\n  static sha256Hash(data) {\n    return CRYPTO.createHash(\"sha256\").update(data).digest(\"base64\");\n  }\n  /**\n   * rsa sign\n   * @param privateKeyPem\n   * @param data\n   */\n  static rsaSign(privateKeyPem, data) {\n    const privateKey = import_node_forge.default.pki.privateKeyFromPem(privateKeyPem);\n    const md = import_node_forge.default.md.sha256.create();\n    if (typeof data === \"string\") {\n      md.update(data, \"utf8\");\n    } else {\n      const str = data.toString(\"latin1\");\n      md.update(str, \"latin1\");\n    }\n    const pss = import_node_forge.default.pss.create({\n      md: import_node_forge.default.md.sha256.create(),\n      mgf: import_node_forge.default.mgf.mgf1.create(import_node_forge.default.md.sha256.create()),\n      saltLength: 32\n    });\n    const signature = privateKey.sign(md, pss);\n    return Buffer.from(signature, \"latin1\");\n  }\n  static rsaEncrypt(pubKey, data) {\n    const forgePublicKey = import_node_forge.default.pki.publicKeyFromPem(pubKey);\n    const byteString = import_util.Util.ab2str(data);\n    const encrypted = forgePublicKey.encrypt(byteString, \"RSA-OAEP\", {\n      md: import_node_forge.default.md.sha256.create(),\n      mgf1: {\n        md: import_node_forge.default.md.sha256.create()\n      }\n    });\n    return Buffer.from(encrypted, \"latin1\");\n  }\n  /**\n   * get hmac hash\n   * @param key\n   * @param data\n   */\n  static hmacHash(key, data) {\n    const h = CRYPTO.createHmac(\"sha256\", key);\n    h.update(data);\n    return h.digest();\n  }\n  /**\n   * create RSA keys\n   * @param b\n   */\n  static createKeyPemString(b = 2048) {\n    const key = new Rsa({ b: 2048 });\n    const publicKeyPem = key.exportKey(\"pkcs8-public-der\");\n    const privateKeyPem = key.exportKey(\"pkcs8-private-der\");\n    return { publicKeyPem, privateKeyPem };\n  }\n  static getPublicKeyPemFromPrivate(privateKeyDer) {\n    const key = new Rsa(privateKeyDer, \"pkcs8-der\");\n    const publicKeyPem = key.exportKey(\"pkcs8-public-pem\");\n    const privateKeyPem = key.exportKey(\"pkcs8-private-pem\");\n    return { publicKeyPem, privateKeyPem };\n  }\n  /**\n   * aes encrypt\n   * @param key\n   * @param iv\n   * @param data\n   */\n  static aesEncrypt(key, iv, data) {\n    const cipher = CRYPTO.createCipheriv(\"aes-128-cbc\", key, iv);\n    let encrypted_data;\n    cipher.setAutoPadding(true);\n    encrypted_data = cipher.update(data);\n    encrypted_data = Buffer.concat([encrypted_data, cipher.final()]);\n    return encrypted_data;\n  }\n  /**\n   * aes decrypt\n   * @param key\n   * @param iv\n   * @param data\n   */\n  static aesDecrypt(key, iv, data) {\n    const cipher = CRYPTO.createDecipheriv(\"aes-128-cbc\", key, iv);\n    const encrypted_data_b64 = Buffer.from(data).toString(\"base64\");\n    let decrypted_data = cipher.update(encrypted_data_b64, \"base64\");\n    decrypted_data = Buffer.concat([decrypted_data, cipher.final()]);\n    return decrypted_data;\n  }\n  /**\n   * Generate hexadecimal mk\n   */\n  static generateMk() {\n    const mk = CipherHelper.randomBytes();\n    return mk.toString(\"hex\");\n  }\n  /**\n   *\n   * @param mk\n   * @param dekId\n   * @param dek\n   */\n  static encryptDekToBase64(mk, dekId, dek) {\n    const buffer = new ArrayBuffer(8);\n    const view = new DataView(buffer);\n    view.setUint32(0, dekId & 4294967295, true);\n    view.setUint32(4, Math.floor(dekId / 4294967296), true);\n    const dekid_dek = Buffer.concat([Buffer.from(buffer), dek], 24);\n    const iv = CipherHelper.randomBytes();\n    const encrypted_data = CipherHelper.aesEncrypt(mk, iv, dekid_dek);\n    const dekCipher = Buffer.concat([Buffer.from([3]), iv, encrypted_data]);\n    return dekCipher.toString(\"base64\");\n  }\n  static decryptDekToBase64(mek, dekCipherStr) {\n    const dekCipher = Buffer.from(dekCipherStr, \"base64\");\n    const dekid_dek = CipherHelper.aesDecrypt(\n      mek,\n      dekCipher.slice(1, 17),\n      dekCipher.slice(17)\n    );\n    const dekid = new DataView(dekid_dek.slice(0, 8).buffer).getUint16(0, true);\n    const dek = dekid_dek.slice(8);\n    return [dekid, dek];\n  }\n  static digest_gAuth(mek, grp_id, dek_id) {\n    const buffer = new ArrayBuffer(8);\n    const view = new DataView(buffer);\n    view.setBigInt64(0, BigInt(dek_id), true);\n    const dek_id_array = Buffer.from(buffer);\n    const buf = Buffer.concat([grp_id, dek_id_array]);\n    const gAuth = CipherHelper.hmacHash(mek, buf);\n    return gAuth.toString(\"base64\");\n  }\n  static encodeDataByType(data, encType) {\n    let result;\n    const buffer = new ArrayBuffer(8);\n    const view = new DataView(buffer);\n    switch (encType) {\n      case import_types.DataType.int4:\n        view.setInt32(0, data, true);\n        result = new Uint8Array(buffer, 0, 4);\n        break;\n      case import_types.DataType.int8:\n        view.setBigInt64(0, BigInt(data), true);\n        result = new Uint8Array(buffer);\n        break;\n      case import_types.DataType.float4:\n        view.setFloat32(0, data, true);\n        result = new Uint8Array(buffer, 0, 4);\n        break;\n      case import_types.DataType.float8:\n        view.setFloat64(0, data, true);\n        result = new Uint8Array(buffer);\n        break;\n      case 6:\n        const val = new import_decimal.default(data);\n        result = new TextEncoder().encode(val.toString());\n        break;\n      case 7:\n        result = new TextEncoder().encode(data);\n        break;\n      case 8:\n        const uSec = BigInt(Math.floor(data * 1e3));\n        const offset = BigInt(\n          Math.floor(new Date().getTimezoneOffset() * 60 * 1e6)\n        );\n        const adjustedUSec = uSec - BigInt(9466848e8) + offset;\n        view.setBigInt64(0, adjustedUSec, true);\n        result = new Uint8Array(buffer);\n        break;\n      default:\n        throw new Error(\"Unsupported encryption type\");\n    }\n    return Buffer.from(result);\n  }\n  static decodeDataByType(data, encType) {\n    let result;\n    if (encType === import_types.DataType.int4) {\n      const size = 4;\n      const buf = data.slice(0, size);\n      result = new Int32Array(buf.buffer)[0];\n    } else if (encType === import_types.DataType.int8) {\n      const size = 8;\n      const buf = data.slice(0, size);\n      result = new BigInt64Array(buf.buffer)[0];\n      result = result.toString();\n    } else if (encType === import_types.DataType.float4) {\n      const size = 4;\n      const buf = data.slice(0, size);\n      result = new Float32Array(buf.buffer)[0];\n    } else if (encType === import_types.DataType.float8) {\n      const size = 8;\n      const buf = data.slice(0, size);\n      result = new Float64Array(buf.buffer)[0];\n    } else if (encType === 6) {\n      result = new import_decimal.default(Buffer.from(data).toString());\n      result = result.toString();\n    } else if (encType === 7) {\n      result = new TextDecoder().decode(data);\n    } else if (encType === 8) {\n      const size = 8;\n      const buf = data.slice(0, size);\n      let u_sec = new BigInt64Array(buf.buffer)[0];\n      u_sec += BigInt(9466848e8);\n      u_sec -= BigInt(new Date().getTimezoneOffset() * 60 * 1e6);\n      const time_stamp = Number(u_sec) / 1e6;\n      result = time_stamp * 1e3;\n    } else {\n      throw new Error(\"Unsupported encryption type\");\n    }\n    return result;\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  CipherHelper\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}