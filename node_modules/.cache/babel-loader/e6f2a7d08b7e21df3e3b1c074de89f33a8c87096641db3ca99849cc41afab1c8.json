{"ast":null,"code":"/**\r\n * create by amanda 2023.6\r\n * It mainly solves the data that adot searches back, obtains the required part, and serializes the data\r\n */\n\nimport { adotAppName } from \"@/utils/const\";\nimport moment from \"moment\";\nimport { getFileSize } from \"@/utils/util\";\n\n/**\r\n * Determines whether the current string is in JSON data format\r\n * @param value\r\n * @returns {boolean}\r\n */\nexport function checkJSON(value) {\n  if (typeof value === 'string') {\n    try {\n      const obj = JSON.parse(value);\n      return Object.keys(obj).length !== 0;\n    } catch (e) {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\r\n * Calculate the size of the JSON\r\n * @param str\r\n * @returns {*}\r\n */\nfunction getBytesLength(str) {\n  const lg = str.replace(/[^x00-xFF]/g, '**').length;\n  return getFileSize(lg);\n}\n/**\r\n * Check whether there is a corresponding APP-name in tags (different app-name has a corresponding data structure)\r\n * @param tags\r\n * @returns {string|*}\r\n */\nexport function getUploadAppName(tags) {\n  if (!tags || !Array.isArray(tags)) {\n    return '';\n  }\n  // weweave\n  const weweaveTags = tags.filter(item => item.value.toUpperCase() === adotAppName.weweave.toUpperCase());\n  if (weweaveTags && weweaveTags.length !== 0) {\n    return weweaveTags[0].value;\n  }\n  // SmartWeaveContract\n  const filterList = tags.filter(item => item.value.toUpperCase() === adotAppName.smartWeaveContract.toUpperCase());\n  if (filterList && filterList.length !== 0) {\n    return filterList[0].value;\n  }\n  // mirror\n  const mirrorTags = tags.filter(item => item.value.toUpperCase() === adotAppName.mirror.toUpperCase());\n  if (mirrorTags && mirrorTags.length !== 0) {\n    return mirrorTags[0].value;\n  }\n  // twitter\n  const twitterTags = tags.filter(item => item.value.toUpperCase() === adotAppName.twitter.toUpperCase());\n  if (twitterTags && twitterTags.length !== 0) {\n    return twitterTags[0].value;\n  }\n  return '';\n}\n\n/**\r\n * data search results from adot are not in the JSON of data, and the body will not have data, so you need to use the data of tags to obtain relevant content\r\n * @param dataObj\r\n * @returns {*}\r\n */\nexport function formatWeWeaveData(dataObj) {\n  const fileObj = {};\n  dataObj.tags.forEach(item => {\n    // fileName\n    if (item.name && (item.name.toUpperCase() === 'name'.toUpperCase() || item.name.toUpperCase() === 'fileName'.toUpperCase())) {\n      fileObj.fileName = item.value;\n    }\n    // Content-Type\n    if (item.name && (item.name.toUpperCase() === 'Content-Type'.toUpperCase() || item.name.toUpperCase() === 'type'.toUpperCase())) {\n      fileObj.fileType = item.value;\n    }\n    // fileSize\n    if (item.name && item.name.toUpperCase() === 'file-size'.toUpperCase()) {\n      fileObj.fileSize = getFileSize(Number(item.value));\n    }\n  });\n  return fileObj;\n}\n/**\r\n * Mirror the content of the returned data\r\n * @param dataObj\r\n * @returns {*}\r\n */\nexport function formatMirrorData(dataObj) {\n  const fileObj = {};\n  dataObj.tags.forEach(item => {\n    // Content-Type\n    if (item.name && (item.name.toUpperCase() === 'Content-Type'.toUpperCase() || item.name.toUpperCase() === 'type'.toUpperCase())) {\n      fileObj.fileType = item.value;\n    }\n  });\n  if (dataObj.data && checkJSON(dataObj.data)) {\n    fileObj.info = JSON.parse(dataObj.data);\n    fileObj.fileName = fileObj.info.content ? fileObj.info.content.title : '--';\n  }\n  fileObj.fileSize = getBytesLength(dataObj.data);\n  fileObj.time = moment(dataObj.createdTime).format('YYYY.MM.DD');\n  fileObj.timeStampStr = moment(dataObj.createdTime).format('YYYY.MM.D  HH:mm:SS  A');\n  return fileObj;\n}\n//Author-Name\nexport function formatTwitterData(dataObj) {\n  const fileObj = {};\n  dataObj.tags.forEach(item => {\n    // Content-Type\n    if (item.name && (item.name.toUpperCase() === 'Content-Type'.toUpperCase() || item.name.toUpperCase() === 'type'.toUpperCase())) {\n      fileObj.fileType = item.value;\n    }\n    // fileName\n    if (item.name && item.name.toUpperCase() === 'Author-Name'.toUpperCase()) {\n      fileObj.fileName = item.value;\n    }\n  });\n  if (dataObj.data && checkJSON(dataObj.data)) {\n    fileObj.info = JSON.parse(dataObj.data);\n    fileObj.timeStampStr = fileObj.info.created_at ? moment(fileObj.info.created_at).format('YYYY.MM.D  HH:mm:SS  A') : '--';\n    fileObj.time = fileObj.info.created_at ? moment(fileObj.info.created_at).format('YYYY.MM.DD') : '--';\n  }\n  fileObj.fileSize = getBytesLength(dataObj.data);\n  return fileObj;\n}\n\n/**\r\n * SmartWeaveContract: data structure tags include name and type,\r\n * the rest of the time is in the post after data serialization\r\n * @param dataObj\r\n * @returns {*}\r\n */\nexport function formatSmartWeaveContractData(dataObj) {\n  const fileObj = {};\n  dataObj.tags.forEach(item => {\n    // Content-Type\n    if (item.name && item.name.toUpperCase() === 'Content-Type'.toUpperCase()) {\n      fileObj.fileType = item.value;\n    }\n    // fileName\n    if (item.name && item.name.toUpperCase() === 'title'.toUpperCase()) {\n      fileObj.fileName = item.value;\n    }\n  });\n  if (dataObj.data && checkJSON(dataObj.data)) {\n    fileObj.info = JSON.parse(dataObj.data);\n    fileObj.timeStampStr = fileObj.info.post && fileObj.info.post.created_at ? moment(fileObj.info.post.created_at).format('YYYY.MM.D  HH:mm:SS  A') : '--';\n    fileObj.time = fileObj.info.post && fileObj.info.post.created_at ? moment(fileObj.info.post.created_at).format('YYYY.MM.DD') : '--';\n  }\n  fileObj.fileSize = getBytesLength(dataObj.data);\n  return fileObj;\n}\n\n/**\r\n * 其他数据格式需要不停判断验证\r\n * @param dataObj\r\n * @returns {*}\r\n */\nexport function formatOtherData(dataObj) {\n  const fileObj = {};\n  dataObj.tags.forEach(item => {\n    // Content-Type\n    if (item.name && (item.name.toUpperCase() === 'Content-Type'.toUpperCase() || item.name.toUpperCase() === 'type'.toUpperCase())) {\n      fileObj.fileType = item.value;\n    }\n    if (item.name && (item.name.toUpperCase() === 'fileName'.toUpperCase() || item.name.toUpperCase() === 'File-Name'.toUpperCase() || item.name.toUpperCase() === 'name'.toUpperCase())) {\n      fileObj.fileName = item.value;\n    }\n    if (item.name && item.name.toUpperCase() === 'File-Size'.toUpperCase()) {\n      fileObj.fileSize = getFileSize(Number(item.value));\n    }\n    if (item.name && item.name.toUpperCase() === 'timeStamp'.toUpperCase()) {\n      fileObj.time = moment(Number(item.value)).format('YYYY.MM.DD');\n      fileObj.timeStampStr = moment(Number(item.value)).format('YYYY.MM.D  HH:mm:SS  A');\n    }\n  });\n  if (dataObj.data && checkJSON(dataObj.data)) {\n    fileObj.info = JSON.parse(dataObj.data);\n    // 对content序列化（前提是content是JSON）\n    if (fileObj.info.content && checkJSON(fileObj.info.content)) {\n      fileObj.info.contentJSON = JSON.parse(fileObj.info.content);\n      fileObj.fileName = fileObj.info.contentJSON ? fileObj.info.contentJSON.title : '--';\n      fileObj.time = moment(fileObj.info.contentJSON.ts).format('YYYY.MM.DD');\n      fileObj.timeStampStr = moment(fileObj.info.contentJSON.ts).format('YYYY.MM.D  HH:mm:SS  A');\n    } else {\n      fileObj.fileName = fileObj.info.name ? fileObj.info.name : fileObj.info.title;\n      fileObj.time = '--';\n      fileObj.timeStampStr = '--';\n    }\n    fileObj.fileSize = getBytesLength(dataObj.data);\n  }\n  return fileObj;\n}","map":{"version":3,"names":["adotAppName","moment","getFileSize","checkJSON","value","obj","JSON","parse","Object","keys","length","e","getBytesLength","str","lg","replace","getUploadAppName","tags","Array","isArray","weweaveTags","filter","item","toUpperCase","weweave","filterList","smartWeaveContract","mirrorTags","mirror","twitterTags","twitter","formatWeWeaveData","dataObj","fileObj","forEach","name","fileName","fileType","fileSize","Number","formatMirrorData","data","info","content","title","time","createdTime","format","timeStampStr","formatTwitterData","created_at","formatSmartWeaveContractData","post","formatOtherData","contentJSON","ts"],"sources":["E:/Amanda-project/vue2-project/project-vue2/src/utils/fileSequence.js"],"sourcesContent":["/**\r\n * create by amanda 2023.6\r\n * It mainly solves the data that adot searches back, obtains the required part, and serializes the data\r\n */\r\n\r\nimport {adotAppName} from \"@/utils/const\"\r\nimport moment from \"moment\"\r\nimport {getFileSize} from \"@/utils/util\";\r\n\r\n/**\r\n * Determines whether the current string is in JSON data format\r\n * @param value\r\n * @returns {boolean}\r\n */\r\nexport function checkJSON(value) {\r\n    if (typeof value === 'string') {\r\n        try {\r\n            const obj = JSON.parse(value)\r\n            return Object.keys(obj).length !== 0\r\n        } catch (e) {\r\n            return false\r\n        }\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\n/**\r\n * Calculate the size of the JSON\r\n * @param str\r\n * @returns {*}\r\n */\r\nfunction getBytesLength(str) {\r\n    const lg = str.replace(/[^x00-xFF]/g,'**').length\r\n    return getFileSize(lg)\r\n\r\n}\r\n/**\r\n * Check whether there is a corresponding APP-name in tags (different app-name has a corresponding data structure)\r\n * @param tags\r\n * @returns {string|*}\r\n */\r\nexport function getUploadAppName(tags) {\r\n    if (!tags || !Array.isArray(tags)) {\r\n        return ''\r\n    }\r\n    // weweave\r\n    const weweaveTags = tags.filter(item => item.value.toUpperCase() === adotAppName.weweave.toUpperCase())\r\n    if (weweaveTags && weweaveTags.length !== 0) {\r\n        return weweaveTags[0].value\r\n    }\r\n    // SmartWeaveContract\r\n    const filterList = tags.filter(item => item.value.toUpperCase() === adotAppName.smartWeaveContract.toUpperCase())\r\n    if (filterList && filterList.length !== 0) {\r\n        return filterList[0].value\r\n    }\r\n    // mirror\r\n    const mirrorTags = tags.filter(item => item.value.toUpperCase() === adotAppName.mirror.toUpperCase())\r\n    if (mirrorTags && mirrorTags.length !== 0) {\r\n        return mirrorTags[0].value\r\n    }\r\n    // twitter\r\n    const twitterTags = tags.filter(item => item.value.toUpperCase() === adotAppName.twitter.toUpperCase())\r\n    if (twitterTags && twitterTags.length !== 0) {\r\n        return twitterTags[0].value\r\n    }\r\n    return ''\r\n}\r\n\r\n/**\r\n * data search results from adot are not in the JSON of data, and the body will not have data, so you need to use the data of tags to obtain relevant content\r\n * @param dataObj\r\n * @returns {*}\r\n */\r\nexport function formatWeWeaveData(dataObj) {\r\n    const fileObj = {}\r\n    dataObj.tags.forEach(item => {\r\n        // fileName\r\n        if (item.name && (item.name.toUpperCase() === 'name'.toUpperCase() || item.name.toUpperCase() === 'fileName'.toUpperCase())) {\r\n            fileObj.fileName = item.value\r\n        }\r\n        // Content-Type\r\n        if (item.name && (item.name.toUpperCase() === 'Content-Type'.toUpperCase() || item.name.toUpperCase() === 'type'.toUpperCase())) {\r\n            fileObj.fileType = item.value\r\n        }\r\n        // fileSize\r\n        if (item.name && (item.name.toUpperCase() === 'file-size'.toUpperCase())) {\r\n            fileObj.fileSize = getFileSize(Number(item.value))\r\n        }\r\n    })\r\n    return fileObj\r\n}\r\n/**\r\n * Mirror the content of the returned data\r\n * @param dataObj\r\n * @returns {*}\r\n */\r\nexport function formatMirrorData(dataObj) {\r\n    const fileObj = {}\r\n    dataObj.tags.forEach(item => {\r\n        // Content-Type\r\n        if (item.name && (item.name.toUpperCase() === 'Content-Type'.toUpperCase() || item.name.toUpperCase() === 'type'.toUpperCase())) {\r\n            fileObj.fileType = item.value\r\n        }\r\n    })\r\n    if (dataObj.data && checkJSON(dataObj.data)) {\r\n        fileObj.info = JSON.parse(dataObj.data)\r\n        fileObj.fileName = fileObj.info.content ? fileObj.info.content.title : '--'\r\n    }\r\n    fileObj.fileSize = getBytesLength(dataObj.data)\r\n    fileObj.time = moment(dataObj.createdTime).format('YYYY.MM.DD')\r\n    fileObj.timeStampStr = moment(dataObj.createdTime).format('YYYY.MM.D  HH:mm:SS  A')\r\n    return fileObj\r\n}\r\n//Author-Name\r\nexport function formatTwitterData(dataObj) {\r\n    const fileObj = {}\r\n    dataObj.tags.forEach(item => {\r\n        // Content-Type\r\n        if (item.name && (item.name.toUpperCase() === 'Content-Type'.toUpperCase() || item.name.toUpperCase() === 'type'.toUpperCase())) {\r\n            fileObj.fileType = item.value\r\n        }\r\n        // fileName\r\n        if (item.name && (item.name.toUpperCase() === 'Author-Name'.toUpperCase())) {\r\n            fileObj.fileName = item.value\r\n        }\r\n    })\r\n    if (dataObj.data && checkJSON(dataObj.data)) {\r\n        fileObj.info = JSON.parse(dataObj.data)\r\n        fileObj.timeStampStr = fileObj.info.created_at ? moment(fileObj.info.created_at).format('YYYY.MM.D  HH:mm:SS  A') : '--'\r\n        fileObj.time = fileObj.info.created_at ? moment(fileObj.info.created_at).format('YYYY.MM.DD') : '--'\r\n    }\r\n    fileObj.fileSize = getBytesLength(dataObj.data)\r\n    return fileObj\r\n}\r\n\r\n/**\r\n * SmartWeaveContract: data structure tags include name and type,\r\n * the rest of the time is in the post after data serialization\r\n * @param dataObj\r\n * @returns {*}\r\n */\r\nexport function formatSmartWeaveContractData(dataObj) {\r\n    const fileObj = {}\r\n    dataObj.tags.forEach(item => {\r\n        // Content-Type\r\n        if (item.name && (item.name.toUpperCase() === 'Content-Type'.toUpperCase())) {\r\n            fileObj.fileType = item.value\r\n        }\r\n        // fileName\r\n        if (item.name && (item.name.toUpperCase() === 'title'.toUpperCase())) {\r\n            fileObj.fileName = item.value\r\n        }\r\n    })\r\n    if (dataObj.data && checkJSON(dataObj.data)) {\r\n        fileObj.info = JSON.parse(dataObj.data)\r\n        fileObj.timeStampStr = fileObj.info.post && fileObj.info.post.created_at ? moment(fileObj.info.post.created_at).format('YYYY.MM.D  HH:mm:SS  A') : '--'\r\n        fileObj.time = fileObj.info.post && fileObj.info.post.created_at ? moment(fileObj.info.post.created_at).format('YYYY.MM.DD') : '--'\r\n    }\r\n    fileObj.fileSize = getBytesLength(dataObj.data)\r\n    return fileObj\r\n}\r\n\r\n/**\r\n * 其他数据格式需要不停判断验证\r\n * @param dataObj\r\n * @returns {*}\r\n */\r\nexport function formatOtherData(dataObj) {\r\n    const fileObj = {}\r\n    dataObj.tags.forEach(item => {\r\n        // Content-Type\r\n        if (item.name && (item.name.toUpperCase() === 'Content-Type'.toUpperCase() || item.name.toUpperCase() === 'type'.toUpperCase())) {\r\n            fileObj.fileType = item.value\r\n        }\r\n        if (item.name && (item.name.toUpperCase() === 'fileName'.toUpperCase() || item.name.toUpperCase() === 'File-Name'.toUpperCase() || item.name.toUpperCase() === 'name'.toUpperCase())) {\r\n            fileObj.fileName = item.value\r\n        }\r\n        if (item.name && (item.name.toUpperCase() === 'File-Size'.toUpperCase())) {\r\n            fileObj.fileSize = getFileSize(Number(item.value))\r\n        }\r\n        if (item.name && (item.name.toUpperCase() === 'timeStamp'.toUpperCase())) {\r\n            fileObj.time = moment(Number(item.value)).format('YYYY.MM.DD')\r\n            fileObj.timeStampStr = moment(Number(item.value)).format('YYYY.MM.D  HH:mm:SS  A')\r\n        }\r\n    })\r\n    if (dataObj.data && checkJSON(dataObj.data)) {\r\n        fileObj.info = JSON.parse(dataObj.data)\r\n        // 对content序列化（前提是content是JSON）\r\n        if (fileObj.info.content && checkJSON(fileObj.info.content)) {\r\n            fileObj.info.contentJSON = JSON.parse(fileObj.info.content)\r\n            fileObj.fileName = fileObj.info.contentJSON ? fileObj.info.contentJSON.title : '--'\r\n            fileObj.time = moment(fileObj.info.contentJSON.ts).format('YYYY.MM.DD')\r\n            fileObj.timeStampStr = moment(fileObj.info.contentJSON.ts).format('YYYY.MM.D  HH:mm:SS  A')\r\n        } else {\r\n            fileObj.fileName = fileObj.info.name ? fileObj.info.name : fileObj.info.title\r\n            fileObj.time = '--'\r\n            fileObj.timeStampStr = '--'\r\n        }\r\n        fileObj.fileSize = getBytesLength(dataObj.data)\r\n    }\r\n    return fileObj\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}