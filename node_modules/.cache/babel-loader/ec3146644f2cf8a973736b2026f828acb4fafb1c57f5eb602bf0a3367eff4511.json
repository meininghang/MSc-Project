{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sign = exports.getSignatureAndId = exports.bundleAndSignData = exports.unbundleData = void 0;\nconst ar_data_base_1 = require(\"./ar-data-base\");\nconst utils_1 = require(\"./utils\");\nconst arweave_1 = __importDefault(require(\"arweave\"));\nconst Bundle_1 = __importDefault(require(\"./Bundle\"));\n/**\n * Unbundles a transaction into an Array of DataItems.\n *\n * Takes either a json string or object. Will throw if given an invalid json\n * string but otherwise, it will return an empty array if\n *\n * a) the json object is the wrong format\n * b) the object contains no valid DataItems.\n *\n * It will verify all DataItems and discard ones that don't pass verification.\n *\n * @param txData\n */\nfunction unbundleData(txData) {\n  return new Bundle_1.default(txData);\n}\nexports.unbundleData = unbundleData;\n/**\n * Verifies all data items and returns a json object with an items array.\n * Throws if any of the data items fail verification.\n *\n * @param dataItems\n * @param signer\n */\nasync function bundleAndSignData(dataItems, signer) {\n  const headers = new Uint8Array(64 * dataItems.length);\n  const binaries = await Promise.all(dataItems.map(async (d, index) => {\n    // Sign DataItem\n    const id = d.isSigned() ? d.rawId : await sign(d, signer);\n    // Create header array\n    const header = new Uint8Array(64);\n    // Set offset\n    header.set(utils_1.longTo32ByteArray(d.getRaw().byteLength), 0);\n    // Set id\n    header.set(id, 32);\n    // Add header to array of headers\n    headers.set(header, 64 * index);\n    // Convert to array for flattening\n    return d.getRaw();\n  })).then(a => {\n    return Buffer.concat(a);\n  });\n  const buffer = Buffer.concat([utils_1.longTo32ByteArray(dataItems.length), headers, binaries]);\n  return new Bundle_1.default(buffer);\n}\nexports.bundleAndSignData = bundleAndSignData;\n/**\n * Signs a single\n *\n * @param item\n * @param signer\n * @returns signings - signature and id in byte-arrays\n */\nasync function getSignatureAndId(item, signer) {\n  const signatureData = await ar_data_base_1.getSignatureData(item);\n  const signatureBytes = await signer.sign(signatureData);\n  const idBytes = await arweave_1.default.crypto.hash(signatureBytes);\n  return {\n    signature: Buffer.from(signatureBytes),\n    id: Buffer.from(idBytes)\n  };\n}\nexports.getSignatureAndId = getSignatureAndId;\n/**\n * Signs and returns item id\n *\n * @param item\n * @param jwk\n */\nasync function sign(item, signer) {\n  const {\n    signature,\n    id\n  } = await getSignatureAndId(item, signer);\n  item.getRaw().set(signature, 2);\n  return id;\n}\nexports.sign = sign;","map":{"version":3,"names":["ar_data_base_1","require","utils_1","arweave_1","__importDefault","Bundle_1","unbundleData","txData","default","exports","bundleAndSignData","dataItems","signer","headers","Uint8Array","length","binaries","Promise","all","map","d","index","id","isSigned","rawId","sign","header","set","longTo32ByteArray","getRaw","byteLength","then","a","Buffer","concat","buffer","getSignatureAndId","item","signatureData","getSignatureData","signatureBytes","idBytes","crypto","hash","signature","from"],"sources":["ar-data-bundle.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;AAAA,MAAAA,cAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AAEA,MAAAE,SAAA,GAAAC,eAAA,CAAAH,OAAA;AACA,MAAAI,QAAA,GAAAD,eAAA,CAAAH,OAAA;AAGA;;;;;;;;;;;;;AAaA,SAAgBK,YAAYA,CAACC,MAAc;EACzC,OAAO,IAAIF,QAAA,CAAAG,OAAM,CAACD,MAAM,CAAC;AAC3B;AAFAE,OAAA,CAAAH,YAAA,GAAAA,YAAA;AAIA;;;;;;;AAOO,eAAeI,iBAAiBA,CACrCC,SAAqB,EACrBC,MAAc;EAEd,MAAMC,OAAO,GAAG,IAAIC,UAAU,CAAC,EAAE,GAAGH,SAAS,CAACI,MAAM,CAAC;EAErD,MAAMC,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAG,CAChCP,SAAS,CAACQ,GAAG,CAAC,OAAOC,CAAC,EAAEC,KAAK,KAAI;IAC/B;IACA,MAAMC,EAAE,GAAGF,CAAC,CAACG,QAAQ,EAAE,GAAGH,CAAC,CAACI,KAAK,GAAG,MAAMC,IAAI,CAACL,CAAC,EAAER,MAAM,CAAC;IACzD;IACA,MAAMc,MAAM,GAAG,IAAIZ,UAAU,CAAC,EAAE,CAAC;IACjC;IACAY,MAAM,CAACC,GAAG,CAACzB,OAAA,CAAA0B,iBAAiB,CAACR,CAAC,CAACS,MAAM,EAAE,CAACC,UAAU,CAAC,EAAE,CAAC,CAAC;IACvD;IACAJ,MAAM,CAACC,GAAG,CAACL,EAAE,EAAE,EAAE,CAAC;IAClB;IACAT,OAAO,CAACc,GAAG,CAACD,MAAM,EAAE,EAAE,GAAGL,KAAK,CAAC;IAC/B;IACA,OAAOD,CAAC,CAACS,MAAM,EAAE;EACnB,CAAC,CAAC,CACH,CAACE,IAAI,CAAEC,CAAC,IAAI;IACX,OAAOC,MAAM,CAACC,MAAM,CAACF,CAAC,CAAC;EACzB,CAAC,CAAC;EAEF,MAAMG,MAAM,GAAGF,MAAM,CAACC,MAAM,CAAC,CAC3BhC,OAAA,CAAA0B,iBAAiB,CAACjB,SAAS,CAACI,MAAM,CAAC,EACnCF,OAAO,EACPG,QAAQ,CACT,CAAC;EAEF,OAAO,IAAIX,QAAA,CAAAG,OAAM,CAAC2B,MAAM,CAAC;AAC3B;AAhCA1B,OAAA,CAAAC,iBAAA,GAAAA,iBAAA;AAkCA;;;;;;;AAOO,eAAe0B,iBAAiBA,CACrCC,IAAc,EACdzB,MAAc;EAEd,MAAM0B,aAAa,GAAG,MAAMtC,cAAA,CAAAuC,gBAAgB,CAACF,IAAI,CAAC;EAElD,MAAMG,cAAc,GAAG,MAAM5B,MAAM,CAACa,IAAI,CAACa,aAAa,CAAC;EACvD,MAAMG,OAAO,GAAG,MAAMtC,SAAA,CAAAK,OAAO,CAACkC,MAAM,CAACC,IAAI,CAACH,cAAc,CAAC;EAEzD,OAAO;IAAEI,SAAS,EAAEX,MAAM,CAACY,IAAI,CAACL,cAAc,CAAC;IAAElB,EAAE,EAAEW,MAAM,CAACY,IAAI,CAACJ,OAAO;EAAC,CAAE;AAC7E;AAVAhC,OAAA,CAAA2B,iBAAA,GAAAA,iBAAA;AAYA;;;;;;AAMO,eAAeX,IAAIA,CAACY,IAAc,EAAEzB,MAAc;EACvD,MAAM;IAAEgC,SAAS;IAAEtB;EAAE,CAAE,GAAG,MAAMc,iBAAiB,CAACC,IAAI,EAAEzB,MAAM,CAAC;EAC/DyB,IAAI,CAACR,MAAM,EAAE,CAACF,GAAG,CAACiB,SAAS,EAAE,CAAC,CAAC;EAC/B,OAAOtB,EAAE;AACX;AAJAb,OAAA,CAAAgB,IAAA,GAAAA,IAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}