{"ast":null,"code":"import { ERRORS } from './errors';\nimport { fromDecimalToUnit, fromUnitToDecimal, genTokenTag, getTokenBySymbol, getTokenByTag, matchTokenTag } from './util';\nconst getSwapTokensInfo = (params, everpayInfo, swapInfo) => {\n  const {\n    tokenIn,\n    tokenOut\n  } = params;\n  const tokenInObj = getTokenBySymbol(tokenIn, everpayInfo.tokenList);\n  const tokenOutObj = getTokenBySymbol(tokenOut, everpayInfo.tokenList);\n  let tokenInTag = null;\n  let tokenOutTag = null;\n  if (tokenInObj == null || tokenOutObj == null) {\n    throw new Error(ERRORS.TOKEN_NOT_FOUND);\n  }\n  swapInfo.tokenList.forEach(tag => {\n    if (matchTokenTag(genTokenTag(tokenInObj), tag)) {\n      tokenInTag = tag;\n    }\n    if (matchTokenTag(genTokenTag(tokenOutObj), tag)) {\n      tokenOutTag = tag;\n    }\n  });\n  if (tokenInTag == null || tokenOutTag == null) {\n    throw new Error(ERRORS.UNSUPPORTED_TOKEN_SWAP);\n  }\n  return {\n    tokenIn: tokenInObj,\n    tokenOut: tokenOutObj,\n    tokenInTag,\n    tokenOutTag\n  };\n};\n// symbol => tag, uint amount => decimal amount\nexport const swapParamsClientToServer = (params, everpayInfo, swapInfo) => {\n  const swapTokensInfo = getSwapTokensInfo(params, everpayInfo, swapInfo);\n  const {\n    tokenInAmount,\n    tokenOutAmount\n  } = params;\n  let tokenInDecimalAmount = '';\n  let tokenOutDecimalAmount = '';\n  const result = {\n    tokenIn: swapTokensInfo.tokenInTag,\n    tokenOut: swapTokensInfo.tokenOutTag\n  };\n  if (tokenInAmount != null) {\n    tokenInDecimalAmount = fromUnitToDecimal(tokenInAmount, swapTokensInfo.tokenIn.decimals);\n    result.tokenInAmount = tokenInDecimalAmount;\n  }\n  if (tokenOutAmount != null) {\n    tokenOutDecimalAmount = fromUnitToDecimal(tokenOutAmount, swapTokensInfo.tokenOut.decimals);\n    result.tokenOutAmount = tokenOutDecimalAmount;\n  }\n  return result;\n};\n// tag => symbol, decimal amount => uint amount\nexport const swapParamsServerToClient = (params, everpayInfo, swapInfo) => {\n  const {\n    tokenIn,\n    tokenOut,\n    tokenInAmount,\n    tokenOutAmount\n  } = params;\n  const tokenInObj = getTokenByTag(tokenIn, everpayInfo.tokenList);\n  const tokenOutObj = getTokenByTag(tokenOut, everpayInfo.tokenList);\n  const result = {\n    tokenIn: tokenInObj.symbol,\n    tokenOut: tokenOutObj.symbol\n  };\n  if (tokenInAmount != null) {\n    result.tokenInAmount = fromDecimalToUnit(tokenInAmount, tokenInObj.decimals);\n  }\n  if (tokenOutAmount != null) {\n    result.tokenOutAmount = fromDecimalToUnit(tokenOutAmount, tokenOutObj.decimals);\n  }\n  return result;\n};","map":{"version":3,"names":["ERRORS","fromDecimalToUnit","fromUnitToDecimal","genTokenTag","getTokenBySymbol","getTokenByTag","matchTokenTag","getSwapTokensInfo","params","everpayInfo","swapInfo","tokenIn","tokenOut","tokenInObj","tokenList","tokenOutObj","tokenInTag","tokenOutTag","Error","TOKEN_NOT_FOUND","forEach","tag","UNSUPPORTED_TOKEN_SWAP","swapParamsClientToServer","swapTokensInfo","tokenInAmount","tokenOutAmount","tokenInDecimalAmount","tokenOutDecimalAmount","result","decimals","swapParamsServerToClient","symbol"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/arseeding-js/node_modules/everpay/esm/utils/swap.js"],"sourcesContent":["import { ERRORS } from './errors';\nimport { fromDecimalToUnit, fromUnitToDecimal, genTokenTag, getTokenBySymbol, getTokenByTag, matchTokenTag } from './util';\nconst getSwapTokensInfo = (params, everpayInfo, swapInfo) => {\n    const { tokenIn, tokenOut } = params;\n    const tokenInObj = getTokenBySymbol(tokenIn, everpayInfo.tokenList);\n    const tokenOutObj = getTokenBySymbol(tokenOut, everpayInfo.tokenList);\n    let tokenInTag = null;\n    let tokenOutTag = null;\n    if (tokenInObj == null || tokenOutObj == null) {\n        throw new Error(ERRORS.TOKEN_NOT_FOUND);\n    }\n    swapInfo.tokenList.forEach(tag => {\n        if (matchTokenTag(genTokenTag(tokenInObj), tag)) {\n            tokenInTag = tag;\n        }\n        if (matchTokenTag(genTokenTag(tokenOutObj), tag)) {\n            tokenOutTag = tag;\n        }\n    });\n    if (tokenInTag == null || tokenOutTag == null) {\n        throw new Error(ERRORS.UNSUPPORTED_TOKEN_SWAP);\n    }\n    return { tokenIn: tokenInObj, tokenOut: tokenOutObj, tokenInTag, tokenOutTag };\n};\n// symbol => tag, uint amount => decimal amount\nexport const swapParamsClientToServer = (params, everpayInfo, swapInfo) => {\n    const swapTokensInfo = getSwapTokensInfo(params, everpayInfo, swapInfo);\n    const { tokenInAmount, tokenOutAmount } = params;\n    let tokenInDecimalAmount = '';\n    let tokenOutDecimalAmount = '';\n    const result = {\n        tokenIn: swapTokensInfo.tokenInTag,\n        tokenOut: swapTokensInfo.tokenOutTag\n    };\n    if (tokenInAmount != null) {\n        tokenInDecimalAmount = fromUnitToDecimal(tokenInAmount, swapTokensInfo.tokenIn.decimals);\n        result.tokenInAmount = tokenInDecimalAmount;\n    }\n    if (tokenOutAmount != null) {\n        tokenOutDecimalAmount = fromUnitToDecimal(tokenOutAmount, swapTokensInfo.tokenOut.decimals);\n        result.tokenOutAmount = tokenOutDecimalAmount;\n    }\n    return result;\n};\n// tag => symbol, decimal amount => uint amount\nexport const swapParamsServerToClient = (params, everpayInfo, swapInfo) => {\n    const { tokenIn, tokenOut, tokenInAmount, tokenOutAmount } = params;\n    const tokenInObj = getTokenByTag(tokenIn, everpayInfo.tokenList);\n    const tokenOutObj = getTokenByTag(tokenOut, everpayInfo.tokenList);\n    const result = {\n        tokenIn: tokenInObj.symbol,\n        tokenOut: tokenOutObj.symbol\n    };\n    if (tokenInAmount != null) {\n        result.tokenInAmount = fromDecimalToUnit(tokenInAmount, tokenInObj.decimals);\n    }\n    if (tokenOutAmount != null) {\n        result.tokenOutAmount = fromDecimalToUnit(tokenOutAmount, tokenOutObj.decimals);\n    }\n    return result;\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,UAAU;AACjC,SAASC,iBAAiB,EAAEC,iBAAiB,EAAEC,WAAW,EAAEC,gBAAgB,EAAEC,aAAa,EAAEC,aAAa,QAAQ,QAAQ;AAC1H,MAAMC,iBAAiB,GAAGA,CAACC,MAAM,EAAEC,WAAW,EAAEC,QAAQ,KAAK;EACzD,MAAM;IAAEC,OAAO;IAAEC;EAAS,CAAC,GAAGJ,MAAM;EACpC,MAAMK,UAAU,GAAGT,gBAAgB,CAACO,OAAO,EAAEF,WAAW,CAACK,SAAS,CAAC;EACnE,MAAMC,WAAW,GAAGX,gBAAgB,CAACQ,QAAQ,EAAEH,WAAW,CAACK,SAAS,CAAC;EACrE,IAAIE,UAAU,GAAG,IAAI;EACrB,IAAIC,WAAW,GAAG,IAAI;EACtB,IAAIJ,UAAU,IAAI,IAAI,IAAIE,WAAW,IAAI,IAAI,EAAE;IAC3C,MAAM,IAAIG,KAAK,CAAClB,MAAM,CAACmB,eAAe,CAAC;EAC3C;EACAT,QAAQ,CAACI,SAAS,CAACM,OAAO,CAACC,GAAG,IAAI;IAC9B,IAAIf,aAAa,CAACH,WAAW,CAACU,UAAU,CAAC,EAAEQ,GAAG,CAAC,EAAE;MAC7CL,UAAU,GAAGK,GAAG;IACpB;IACA,IAAIf,aAAa,CAACH,WAAW,CAACY,WAAW,CAAC,EAAEM,GAAG,CAAC,EAAE;MAC9CJ,WAAW,GAAGI,GAAG;IACrB;EACJ,CAAC,CAAC;EACF,IAAIL,UAAU,IAAI,IAAI,IAAIC,WAAW,IAAI,IAAI,EAAE;IAC3C,MAAM,IAAIC,KAAK,CAAClB,MAAM,CAACsB,sBAAsB,CAAC;EAClD;EACA,OAAO;IAAEX,OAAO,EAAEE,UAAU;IAAED,QAAQ,EAAEG,WAAW;IAAEC,UAAU;IAAEC;EAAY,CAAC;AAClF,CAAC;AACD;AACA,OAAO,MAAMM,wBAAwB,GAAGA,CAACf,MAAM,EAAEC,WAAW,EAAEC,QAAQ,KAAK;EACvE,MAAMc,cAAc,GAAGjB,iBAAiB,CAACC,MAAM,EAAEC,WAAW,EAAEC,QAAQ,CAAC;EACvE,MAAM;IAAEe,aAAa;IAAEC;EAAe,CAAC,GAAGlB,MAAM;EAChD,IAAImB,oBAAoB,GAAG,EAAE;EAC7B,IAAIC,qBAAqB,GAAG,EAAE;EAC9B,MAAMC,MAAM,GAAG;IACXlB,OAAO,EAAEa,cAAc,CAACR,UAAU;IAClCJ,QAAQ,EAAEY,cAAc,CAACP;EAC7B,CAAC;EACD,IAAIQ,aAAa,IAAI,IAAI,EAAE;IACvBE,oBAAoB,GAAGzB,iBAAiB,CAACuB,aAAa,EAAED,cAAc,CAACb,OAAO,CAACmB,QAAQ,CAAC;IACxFD,MAAM,CAACJ,aAAa,GAAGE,oBAAoB;EAC/C;EACA,IAAID,cAAc,IAAI,IAAI,EAAE;IACxBE,qBAAqB,GAAG1B,iBAAiB,CAACwB,cAAc,EAAEF,cAAc,CAACZ,QAAQ,CAACkB,QAAQ,CAAC;IAC3FD,MAAM,CAACH,cAAc,GAAGE,qBAAqB;EACjD;EACA,OAAOC,MAAM;AACjB,CAAC;AACD;AACA,OAAO,MAAME,wBAAwB,GAAGA,CAACvB,MAAM,EAAEC,WAAW,EAAEC,QAAQ,KAAK;EACvE,MAAM;IAAEC,OAAO;IAAEC,QAAQ;IAAEa,aAAa;IAAEC;EAAe,CAAC,GAAGlB,MAAM;EACnE,MAAMK,UAAU,GAAGR,aAAa,CAACM,OAAO,EAAEF,WAAW,CAACK,SAAS,CAAC;EAChE,MAAMC,WAAW,GAAGV,aAAa,CAACO,QAAQ,EAAEH,WAAW,CAACK,SAAS,CAAC;EAClE,MAAMe,MAAM,GAAG;IACXlB,OAAO,EAAEE,UAAU,CAACmB,MAAM;IAC1BpB,QAAQ,EAAEG,WAAW,CAACiB;EAC1B,CAAC;EACD,IAAIP,aAAa,IAAI,IAAI,EAAE;IACvBI,MAAM,CAACJ,aAAa,GAAGxB,iBAAiB,CAACwB,aAAa,EAAEZ,UAAU,CAACiB,QAAQ,CAAC;EAChF;EACA,IAAIJ,cAAc,IAAI,IAAI,EAAE;IACxBG,MAAM,CAACH,cAAc,GAAGzB,iBAAiB,CAACyB,cAAc,EAAEX,WAAW,CAACe,QAAQ,CAAC;EACnF;EACA,OAAOD,MAAM;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}