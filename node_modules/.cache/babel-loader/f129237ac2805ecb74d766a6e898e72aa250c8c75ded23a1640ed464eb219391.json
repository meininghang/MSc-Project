{"ast":null,"code":"var _ = require('../utils')._;\nfunction formatParse(format) {\n  format = format.split('-');\n  var keyType = 'private';\n  var keyOpt = {\n    type: 'default'\n  };\n  for (var i = 1; i < format.length; i++) {\n    if (format[i]) {\n      switch (format[i]) {\n        case 'public':\n          keyType = format[i];\n          break;\n        case 'private':\n          keyType = format[i];\n          break;\n        case 'pem':\n          keyOpt.type = format[i];\n          break;\n        case 'der':\n          keyOpt.type = format[i];\n          break;\n      }\n    }\n  }\n  return {\n    scheme: format[0],\n    keyType: keyType,\n    keyOpt: keyOpt\n  };\n}\nmodule.exports = {\n  pkcs1: require('./pkcs1'),\n  pkcs8: require('./pkcs8'),\n  components: require('./components'),\n  openssh: require('./openssh'),\n  isPrivateExport: function (format) {\n    return module.exports[format] && typeof module.exports[format].privateExport === 'function';\n  },\n  isPrivateImport: function (format) {\n    return module.exports[format] && typeof module.exports[format].privateImport === 'function';\n  },\n  isPublicExport: function (format) {\n    return module.exports[format] && typeof module.exports[format].publicExport === 'function';\n  },\n  isPublicImport: function (format) {\n    return module.exports[format] && typeof module.exports[format].publicImport === 'function';\n  },\n  detectAndImport: function (key, data, format) {\n    if (format === undefined) {\n      for (var scheme in module.exports) {\n        if (typeof module.exports[scheme].autoImport === 'function' && module.exports[scheme].autoImport(key, data)) {\n          return true;\n        }\n      }\n    } else if (format) {\n      var fmt = formatParse(format);\n      if (module.exports[fmt.scheme]) {\n        if (fmt.keyType === 'private') {\n          module.exports[fmt.scheme].privateImport(key, data, fmt.keyOpt);\n        } else {\n          module.exports[fmt.scheme].publicImport(key, data, fmt.keyOpt);\n        }\n      } else {\n        throw Error('Unsupported key format');\n      }\n    }\n    return false;\n  },\n  detectAndExport: function (key, format) {\n    if (format) {\n      var fmt = formatParse(format);\n      if (module.exports[fmt.scheme]) {\n        if (fmt.keyType === 'private') {\n          if (!key.isPrivate()) {\n            throw Error(\"This is not private key\");\n          }\n          return module.exports[fmt.scheme].privateExport(key, fmt.keyOpt);\n        } else {\n          if (!key.isPublic()) {\n            throw Error(\"This is not public key\");\n          }\n          return module.exports[fmt.scheme].publicExport(key, fmt.keyOpt);\n        }\n      } else {\n        throw Error('Unsupported key format');\n      }\n    }\n  }\n};","map":{"version":3,"names":["_","require","formatParse","format","split","keyType","keyOpt","type","i","length","scheme","module","exports","pkcs1","pkcs8","components","openssh","isPrivateExport","privateExport","isPrivateImport","privateImport","isPublicExport","publicExport","isPublicImport","publicImport","detectAndImport","key","data","undefined","autoImport","fmt","Error","detectAndExport","isPrivate","isPublic"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/node-rsa/src/formats/formats.js"],"sourcesContent":["var _ = require('../utils')._;\n\nfunction formatParse(format) {\n    format = format.split('-');\n    var keyType = 'private';\n    var keyOpt = {type: 'default'};\n\n    for (var i = 1; i < format.length; i++) {\n        if (format[i]) {\n            switch (format[i]) {\n                case 'public':\n                    keyType = format[i];\n                    break;\n                case 'private':\n                    keyType = format[i];\n                    break;\n                case 'pem':\n                    keyOpt.type = format[i];\n                    break;\n                case 'der':\n                    keyOpt.type = format[i];\n                    break;\n            }\n        }\n    }\n\n    return {scheme: format[0], keyType: keyType, keyOpt: keyOpt};\n}\n\nmodule.exports = {\n    pkcs1: require('./pkcs1'),\n    pkcs8: require('./pkcs8'),\n    components: require('./components'),\n    openssh: require('./openssh'),\n\n    isPrivateExport: function (format) {\n        return module.exports[format] && typeof module.exports[format].privateExport === 'function';\n    },\n\n    isPrivateImport: function (format) {\n        return module.exports[format] && typeof module.exports[format].privateImport === 'function';\n    },\n\n    isPublicExport: function (format) {\n        return module.exports[format] && typeof module.exports[format].publicExport === 'function';\n    },\n\n    isPublicImport: function (format) {\n        return module.exports[format] && typeof module.exports[format].publicImport === 'function';\n    },\n\n    detectAndImport: function (key, data, format) {\n        if (format === undefined) {\n            for (var scheme in module.exports) {\n                if (typeof module.exports[scheme].autoImport === 'function' && module.exports[scheme].autoImport(key, data)) {\n                    return true;\n                }\n            }\n        } else if (format) {\n            var fmt = formatParse(format);\n\n            if (module.exports[fmt.scheme]) {\n                if (fmt.keyType === 'private') {\n                    module.exports[fmt.scheme].privateImport(key, data, fmt.keyOpt);\n                } else {\n                    module.exports[fmt.scheme].publicImport(key, data, fmt.keyOpt);\n                }\n            } else {\n                throw Error('Unsupported key format');\n            }\n        }\n\n        return false;\n    },\n\n    detectAndExport: function (key, format) {\n        if (format) {\n            var fmt = formatParse(format);\n\n            if (module.exports[fmt.scheme]) {\n                if (fmt.keyType === 'private') {\n                    if (!key.isPrivate()) {\n                        throw Error(\"This is not private key\");\n                    }\n                    return module.exports[fmt.scheme].privateExport(key, fmt.keyOpt);\n                } else {\n                    if (!key.isPublic()) {\n                        throw Error(\"This is not public key\");\n                    }\n                    return module.exports[fmt.scheme].publicExport(key, fmt.keyOpt);\n                }\n            } else {\n                throw Error('Unsupported key format');\n            }\n        }\n    }\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}