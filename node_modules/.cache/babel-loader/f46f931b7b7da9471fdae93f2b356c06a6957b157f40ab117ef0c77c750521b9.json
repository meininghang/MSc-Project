{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UrlAccountCreator = exports.LocalAccountCreator = exports.AccountCreator = void 0;\nconst web_1 = require(\"./utils/web\");\n/**\n * Account creator provides an interface for implementations to actually create accounts\n */\nclass AccountCreator {}\nexports.AccountCreator = AccountCreator;\nclass LocalAccountCreator extends AccountCreator {\n  constructor(masterAccount, initialBalance) {\n    super();\n    this.masterAccount = masterAccount;\n    this.initialBalance = initialBalance;\n  }\n  /**\n   * Creates an account using a masterAccount, meaning the new account is created from an existing account\n   * @param newAccountId The name of the NEAR account to be created\n   * @param publicKey The public key from the masterAccount used to create this account\n   * @returns {Promise<void>}\n   */\n  async createAccount(newAccountId, publicKey) {\n    await this.masterAccount.createAccount(newAccountId, publicKey, this.initialBalance);\n  }\n}\nexports.LocalAccountCreator = LocalAccountCreator;\nclass UrlAccountCreator extends AccountCreator {\n  constructor(connection, helperUrl) {\n    super();\n    this.connection = connection;\n    this.helperUrl = helperUrl;\n  }\n  /**\n   * Creates an account using a helperUrl\n   * This is [hosted here](https://helper.nearprotocol.com) or set up locally with the [near-contract-helper](https://github.com/nearprotocol/near-contract-helper) repository\n   * @param newAccountId The name of the NEAR account to be created\n   * @param publicKey The public key from the masterAccount used to create this account\n   * @returns {Promise<void>}\n   */\n  async createAccount(newAccountId, publicKey) {\n    await web_1.fetchJson(`${this.helperUrl}/account`, JSON.stringify({\n      newAccountId,\n      newAccountPublicKey: publicKey.toString()\n    }));\n  }\n}\nexports.UrlAccountCreator = UrlAccountCreator;","map":{"version":3,"names":["Object","defineProperty","exports","value","UrlAccountCreator","LocalAccountCreator","AccountCreator","web_1","require","constructor","masterAccount","initialBalance","createAccount","newAccountId","publicKey","connection","helperUrl","fetchJson","JSON","stringify","newAccountPublicKey","toString"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/near-api-js/lib/account_creator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UrlAccountCreator = exports.LocalAccountCreator = exports.AccountCreator = void 0;\nconst web_1 = require(\"./utils/web\");\n/**\n * Account creator provides an interface for implementations to actually create accounts\n */\nclass AccountCreator {\n}\nexports.AccountCreator = AccountCreator;\nclass LocalAccountCreator extends AccountCreator {\n    constructor(masterAccount, initialBalance) {\n        super();\n        this.masterAccount = masterAccount;\n        this.initialBalance = initialBalance;\n    }\n    /**\n     * Creates an account using a masterAccount, meaning the new account is created from an existing account\n     * @param newAccountId The name of the NEAR account to be created\n     * @param publicKey The public key from the masterAccount used to create this account\n     * @returns {Promise<void>}\n     */\n    async createAccount(newAccountId, publicKey) {\n        await this.masterAccount.createAccount(newAccountId, publicKey, this.initialBalance);\n    }\n}\nexports.LocalAccountCreator = LocalAccountCreator;\nclass UrlAccountCreator extends AccountCreator {\n    constructor(connection, helperUrl) {\n        super();\n        this.connection = connection;\n        this.helperUrl = helperUrl;\n    }\n    /**\n     * Creates an account using a helperUrl\n     * This is [hosted here](https://helper.nearprotocol.com) or set up locally with the [near-contract-helper](https://github.com/nearprotocol/near-contract-helper) repository\n     * @param newAccountId The name of the NEAR account to be created\n     * @param publicKey The public key from the masterAccount used to create this account\n     * @returns {Promise<void>}\n     */\n    async createAccount(newAccountId, publicKey) {\n        await web_1.fetchJson(`${this.helperUrl}/account`, JSON.stringify({ newAccountId, newAccountPublicKey: publicKey.toString() }));\n    }\n}\nexports.UrlAccountCreator = UrlAccountCreator;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAGF,OAAO,CAACG,mBAAmB,GAAGH,OAAO,CAACI,cAAc,GAAG,KAAK,CAAC;AACzF,MAAMC,KAAK,GAAGC,OAAO,CAAC,aAAa,CAAC;AACpC;AACA;AACA;AACA,MAAMF,cAAc,CAAC;AAErBJ,OAAO,CAACI,cAAc,GAAGA,cAAc;AACvC,MAAMD,mBAAmB,SAASC,cAAc,CAAC;EAC7CG,WAAWA,CAACC,aAAa,EAAEC,cAAc,EAAE;IACvC,KAAK,CAAC,CAAC;IACP,IAAI,CAACD,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,cAAc,GAAGA,cAAc;EACxC;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMC,aAAaA,CAACC,YAAY,EAAEC,SAAS,EAAE;IACzC,MAAM,IAAI,CAACJ,aAAa,CAACE,aAAa,CAACC,YAAY,EAAEC,SAAS,EAAE,IAAI,CAACH,cAAc,CAAC;EACxF;AACJ;AACAT,OAAO,CAACG,mBAAmB,GAAGA,mBAAmB;AACjD,MAAMD,iBAAiB,SAASE,cAAc,CAAC;EAC3CG,WAAWA,CAACM,UAAU,EAAEC,SAAS,EAAE;IAC/B,KAAK,CAAC,CAAC;IACP,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAMJ,aAAaA,CAACC,YAAY,EAAEC,SAAS,EAAE;IACzC,MAAMP,KAAK,CAACU,SAAS,CAAE,GAAE,IAAI,CAACD,SAAU,UAAS,EAAEE,IAAI,CAACC,SAAS,CAAC;MAAEN,YAAY;MAAEO,mBAAmB,EAAEN,SAAS,CAACO,QAAQ,CAAC;IAAE,CAAC,CAAC,CAAC;EACnI;AACJ;AACAnB,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}