{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/MindLake.ts\nvar MindLake_exports = {};\n__export(MindLake_exports, {\n  MindLake: () => MindLake\n});\nmodule.exports = __toCommonJS(MindLake_exports);\nvar import_request = require(\"./request\");\nvar import_constant = require(\"./util/constant\");\nvar import_cipher = require(\"./util/cipher\");\nvar import_web3 = require(\"./util/web3\");\nvar import_util = require(\"./util/util\");\nvar import_Crypto = __toESM(require(\"./Crypto\"));\nvar import_DataLake = __toESM(require(\"./DataLake\"));\nvar import_bcl = require(\"./util/bcl\");\nvar import_types = require(\"./types\");\nvar import_Permission = __toESM(require(\"./Permission\"));\nvar import_result = __toESM(require(\"./util/result\"));\nvar import_package = __toESM(require(\"../package.json\"));\nvar _MindLake = class {\n  constructor(appKey, nodeUrl) {\n    /**\n     * mind db is init\n     */\n    this.isRegistered = false;\n    localStorage.setItem(import_constant.APP_KEY, appKey);\n    this.service = new import_request.Service(nodeUrl);\n    this.web3 = new import_web3.Web3Interact();\n  }\n  static async getInstance(appKey, nodeUrl) {\n    if (this.instance === void 0) {\n      this.instance = new _MindLake(appKey, nodeUrl);\n      await this.instance.web3.checkConnection();\n      await this.instance._getServerInfo();\n      this.instance.crypto = new import_Crypto.default(this.instance);\n      this.instance.dataLake = new import_DataLake.default(this.instance);\n      this.instance.permission = new import_Permission.default(this.instance);\n    }\n    return this.instance;\n  }\n  /**\n   *connect db\n   */\n  async connect() {\n    try {\n      const walletAddress = await this.web3.getWalletAccount();\n      const nonce = await this.service.execute({\n        bizType: 203,\n        walletAddress\n      });\n      const signature = await this.web3.personalSignature(nonce);\n      const res = await this.service.execute({\n        bizType: 201,\n        walletAddress,\n        signature\n      });\n      if (res && res.token) {\n        localStorage.setItem(import_constant.TOKEN_KEY, res.token);\n        await this._init();\n        _MindLake.isConnected = true;\n        return import_result.default.success(true);\n      }\n      return import_result.default.fail(false);\n    } catch (e) {\n      console.error(e);\n      localStorage.removeItem(import_constant.TOKEN_KEY);\n      return import_result.default.fail(e);\n    }\n  }\n  /**\n   * disconnect db\n   */\n  async disConnect() {\n    try {\n      await this.service.execute({\n        bizType: 202\n      });\n      return import_result.default.success(true);\n    } catch (e) {\n      console.error(e);\n      return import_result.default.fail(e);\n    }\n  }\n  /**\n   * getEnclaveInfo\n   */\n  async _getServerInfo() {\n    const info = await this.service.execute({\n      bizType: 120\n    }).catch(e => console.error(e));\n    if (info) {\n      _MindLake.isConnected = true;\n      this.publicKey = info.publicKey;\n      this.isRegistered = info.isRegistered && info.isMekProvision && info.isSelfBcl;\n      this.mekId = info.mekId;\n      if (this.isRegistered && this.mekId) {\n        await this._getAccount();\n      }\n    }\n  }\n  async _init() {\n    await this._getServerInfo();\n    const provisionRes = await this._mekProvision();\n    if (!provisionRes) {\n      throw new Error(\"Provision failed\");\n    }\n    if (!this.isRegistered) {\n      const {\n        privateKeyPem,\n        publicKeyPem\n      } = await this.web3.getPkPem();\n      const registerPukId = await this._registerCertificate(publicKeyPem, privateKeyPem);\n      if (!registerPukId) {\n        throw new Error(\"Register key pair failed\");\n      }\n      this.registerPukId = registerPukId;\n      const sn = await this._issueBclForSelf(privateKeyPem);\n      if (!sn) {\n        throw new Error(\"Grant for self failed\");\n      }\n      this.isRegistered = true;\n    }\n  }\n  /**\n   * mek provision\n   * @private\n   */\n  async _mekProvision() {\n    if (!this.publicKey) {\n      throw new Error(\"Provision failed: The public key is not empty\");\n    }\n    const pubKey = this.publicKey.replace(\"\\\\n\", \"\\n\");\n    const ephemeralKey = import_cipher.CipherHelper.randomBytes();\n    const sealedEphemeralKey = import_cipher.CipherHelper.rsaEncrypt(pubKey, ephemeralKey);\n    const sealedEphemeralKeyLenBytes = new Buffer([sealedEphemeralKey.length & 255, sealedEphemeralKey.length >> 8 & 255]);\n    const iv = import_cipher.CipherHelper.randomBytes();\n    const envelope_json = await this._genEnvelope();\n    const envelope_enc = import_cipher.CipherHelper.aesEncrypt(ephemeralKey, iv, envelope_json);\n    const big_envelope = Buffer.concat([sealedEphemeralKeyLenBytes, sealedEphemeralKey, iv, envelope_enc]);\n    const big_envelopeBase64 = Buffer.from(big_envelope).toString(\"base64\");\n    return await this.service.execute({\n      bizType: 102,\n      databasePublicKey: this.publicKey,\n      envelope: big_envelopeBase64\n    });\n  }\n  /**\n   * registerCertificate pukId\n   * @private\n   */\n  async _registerCertificate(publicKeyPem, privateKeyPem) {\n    const mekId = this.mekId;\n    const mek = await this.web3.getMekBytes();\n    const pukId = import_cipher.CipherHelper.sha256Hash(publicKeyPem);\n    const toBeSignedBytes = Buffer.concat([Buffer.from(import_util.Util.structPackq(mekId)), Buffer.from(pukId, \"latin1\")\n    //important\n    ]);\n\n    const rsaSign = Buffer.concat([Buffer.from(\"01\", \"hex\"), import_cipher.CipherHelper.rsaSign(privateKeyPem, toBeSignedBytes)]);\n    const private_sig = rsaSign.toString(\"base64\");\n    const mekSign = Buffer.concat([Buffer.from(\"00\", \"hex\"), import_cipher.CipherHelper.hmacHash(mek, toBeSignedBytes)]);\n    const mek_sign = mekSign.toString(\"base64\");\n    const res = await this.service.execute({\n      bizType: 104,\n      mekId,\n      pukId,\n      publicKey: publicKeyPem,\n      privateSig: private_sig,\n      mekSig: mek_sign\n    });\n    if (res) {\n      return pukId;\n    }\n  }\n  /**\n   * issueBclForSelf\n   * @param privateKeyPem\n   * @private\n   */\n  async _issueBclForSelf(privateKeyPem) {\n    const bcl = new import_bcl.Bcl(this.service);\n    await bcl.createBclBody(this.registerPukId, this.registerPukId, \"\");\n    const defaultGroup = await this.service.execute({\n      bizType: 108\n    });\n    if (!defaultGroup || !defaultGroup.groupId) {\n      throw new Error(\"Get default group error\");\n    }\n    const selfDekGroup = {\n      groupid: defaultGroup.groupId,\n      min: 1,\n      max: 1e3\n    };\n    bcl.addDekGroup(selfDekGroup, selfDekGroup);\n    return await bcl.issueBcl(privateKeyPem, 106);\n  }\n  async _genEnvelope() {\n    const mek = await this.web3.getMekBytes();\n    let envelope = {};\n    const base64Mek = Buffer.from(mek).toString(\"base64\");\n    envelope[\"mek\"] = base64Mek;\n    envelope[\"expire\"] = 0;\n    let envelope_json = JSON.stringify(envelope).replace(\" \", \"\");\n    return envelope_json;\n  }\n  async _getAccount() {\n    const registerPukId = await this.service.execute({\n      bizType: 103,\n      mekId: this.mekId\n    });\n    this.registerPukId = registerPukId;\n  }\n  static checkLogin() {\n    if (!_MindLake.isConnected) {\n      throw new Error(\"Please connect first\");\n    }\n  }\n  checkRegistered() {\n    if (!this.isRegistered) {\n      throw new Error(\"Register error, please reLogin to register\");\n    }\n  }\n};\nvar MindLake = _MindLake;\n/**\n * mindLake version\n */\nMindLake.version = import_package.default.version;\n/**\n * isConnected mindDB\n */\nMindLake.isConnected = false;\nMindLake.log = false;\nMindLake.DataType = import_types.DataType;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  MindLake\n});","map":{"version":3,"names":["__create","Object","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getProtoOf","getPrototypeOf","__hasOwnProp","prototype","hasOwnProperty","__export","target","all","name","get","enumerable","__copyProps","to","from","except","desc","key","call","__toESM","mod","isNodeMode","__esModule","value","__toCommonJS","MindLake_exports","MindLake","module","exports","import_request","require","import_constant","import_cipher","import_web3","import_util","import_Crypto","import_DataLake","import_bcl","import_types","import_Permission","import_result","import_package","_MindLake","constructor","appKey","nodeUrl","isRegistered","localStorage","setItem","APP_KEY","service","Service","web3","Web3Interact","getInstance","instance","checkConnection","_getServerInfo","crypto","default","dataLake","permission","connect","walletAddress","getWalletAccount","nonce","execute","bizType","signature","personalSignature","res","token","TOKEN_KEY","_init","isConnected","success","fail","e","console","error","removeItem","disConnect","info","catch","publicKey","isMekProvision","isSelfBcl","mekId","_getAccount","provisionRes","_mekProvision","Error","privateKeyPem","publicKeyPem","getPkPem","registerPukId","_registerCertificate","sn","_issueBclForSelf","pubKey","replace","ephemeralKey","CipherHelper","randomBytes","sealedEphemeralKey","rsaEncrypt","sealedEphemeralKeyLenBytes","Buffer","length","iv","envelope_json","_genEnvelope","envelope_enc","aesEncrypt","big_envelope","concat","big_envelopeBase64","toString","databasePublicKey","envelope","mek","getMekBytes","pukId","sha256Hash","toBeSignedBytes","Util","structPackq","rsaSign","private_sig","mekSign","hmacHash","mek_sign","privateSig","mekSig","bcl","Bcl","createBclBody","defaultGroup","groupId","selfDekGroup","groupid","min","max","addDekGroup","issueBcl","base64Mek","JSON","stringify","checkLogin","checkRegistered","version","log","DataType"],"sources":["E:/Amanda-project/vue2-project/project-vue2/node_modules/mind-lake-sdk/dist/MindLake.js"],"sourcesContent":["var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/MindLake.ts\nvar MindLake_exports = {};\n__export(MindLake_exports, {\n  MindLake: () => MindLake\n});\nmodule.exports = __toCommonJS(MindLake_exports);\nvar import_request = require(\"./request\");\nvar import_constant = require(\"./util/constant\");\nvar import_cipher = require(\"./util/cipher\");\nvar import_web3 = require(\"./util/web3\");\nvar import_util = require(\"./util/util\");\nvar import_Crypto = __toESM(require(\"./Crypto\"));\nvar import_DataLake = __toESM(require(\"./DataLake\"));\nvar import_bcl = require(\"./util/bcl\");\nvar import_types = require(\"./types\");\nvar import_Permission = __toESM(require(\"./Permission\"));\nvar import_result = __toESM(require(\"./util/result\"));\nvar import_package = __toESM(require(\"../package.json\"));\nvar _MindLake = class {\n  constructor(appKey, nodeUrl) {\n    /**\n     * mind db is init\n     */\n    this.isRegistered = false;\n    localStorage.setItem(import_constant.APP_KEY, appKey);\n    this.service = new import_request.Service(nodeUrl);\n    this.web3 = new import_web3.Web3Interact();\n  }\n  static async getInstance(appKey, nodeUrl) {\n    if (this.instance === void 0) {\n      this.instance = new _MindLake(appKey, nodeUrl);\n      await this.instance.web3.checkConnection();\n      await this.instance._getServerInfo();\n      this.instance.crypto = new import_Crypto.default(this.instance);\n      this.instance.dataLake = new import_DataLake.default(this.instance);\n      this.instance.permission = new import_Permission.default(this.instance);\n    }\n    return this.instance;\n  }\n  /**\n   *connect db\n   */\n  async connect() {\n    try {\n      const walletAddress = await this.web3.getWalletAccount();\n      const nonce = await this.service.execute({\n        bizType: 203,\n        walletAddress\n      });\n      const signature = await this.web3.personalSignature(nonce);\n      const res = await this.service.execute({\n        bizType: 201,\n        walletAddress,\n        signature\n      });\n      if (res && res.token) {\n        localStorage.setItem(import_constant.TOKEN_KEY, res.token);\n        await this._init();\n        _MindLake.isConnected = true;\n        return import_result.default.success(true);\n      }\n      return import_result.default.fail(false);\n    } catch (e) {\n      console.error(e);\n      localStorage.removeItem(import_constant.TOKEN_KEY);\n      return import_result.default.fail(e);\n    }\n  }\n  /**\n   * disconnect db\n   */\n  async disConnect() {\n    try {\n      await this.service.execute({ bizType: 202 });\n      return import_result.default.success(true);\n    } catch (e) {\n      console.error(e);\n      return import_result.default.fail(e);\n    }\n  }\n  /**\n   * getEnclaveInfo\n   */\n  async _getServerInfo() {\n    const info = await this.service.execute({\n      bizType: 120\n    }).catch((e) => console.error(e));\n    if (info) {\n      _MindLake.isConnected = true;\n      this.publicKey = info.publicKey;\n      this.isRegistered = info.isRegistered && info.isMekProvision && info.isSelfBcl;\n      this.mekId = info.mekId;\n      if (this.isRegistered && this.mekId) {\n        await this._getAccount();\n      }\n    }\n  }\n  async _init() {\n    await this._getServerInfo();\n    const provisionRes = await this._mekProvision();\n    if (!provisionRes) {\n      throw new Error(\"Provision failed\");\n    }\n    if (!this.isRegistered) {\n      const { privateKeyPem, publicKeyPem } = await this.web3.getPkPem();\n      const registerPukId = await this._registerCertificate(\n        publicKeyPem,\n        privateKeyPem\n      );\n      if (!registerPukId) {\n        throw new Error(\"Register key pair failed\");\n      }\n      this.registerPukId = registerPukId;\n      const sn = await this._issueBclForSelf(privateKeyPem);\n      if (!sn) {\n        throw new Error(\"Grant for self failed\");\n      }\n      this.isRegistered = true;\n    }\n  }\n  /**\n   * mek provision\n   * @private\n   */\n  async _mekProvision() {\n    if (!this.publicKey) {\n      throw new Error(\"Provision failed: The public key is not empty\");\n    }\n    const pubKey = this.publicKey.replace(\"\\\\n\", \"\\n\");\n    const ephemeralKey = import_cipher.CipherHelper.randomBytes();\n    const sealedEphemeralKey = import_cipher.CipherHelper.rsaEncrypt(\n      pubKey,\n      ephemeralKey\n    );\n    const sealedEphemeralKeyLenBytes = new Buffer([\n      sealedEphemeralKey.length & 255,\n      sealedEphemeralKey.length >> 8 & 255\n    ]);\n    const iv = import_cipher.CipherHelper.randomBytes();\n    const envelope_json = await this._genEnvelope();\n    const envelope_enc = import_cipher.CipherHelper.aesEncrypt(\n      ephemeralKey,\n      iv,\n      envelope_json\n    );\n    const big_envelope = Buffer.concat([\n      sealedEphemeralKeyLenBytes,\n      sealedEphemeralKey,\n      iv,\n      envelope_enc\n    ]);\n    const big_envelopeBase64 = Buffer.from(big_envelope).toString(\"base64\");\n    return await this.service.execute({\n      bizType: 102,\n      databasePublicKey: this.publicKey,\n      envelope: big_envelopeBase64\n    });\n  }\n  /**\n   * registerCertificate pukId\n   * @private\n   */\n  async _registerCertificate(publicKeyPem, privateKeyPem) {\n    const mekId = this.mekId;\n    const mek = await this.web3.getMekBytes();\n    const pukId = import_cipher.CipherHelper.sha256Hash(publicKeyPem);\n    const toBeSignedBytes = Buffer.concat([\n      Buffer.from(import_util.Util.structPackq(mekId)),\n      Buffer.from(pukId, \"latin1\")\n      //important\n    ]);\n    const rsaSign = Buffer.concat([\n      Buffer.from(\"01\", \"hex\"),\n      import_cipher.CipherHelper.rsaSign(privateKeyPem, toBeSignedBytes)\n    ]);\n    const private_sig = rsaSign.toString(\"base64\");\n    const mekSign = Buffer.concat([\n      Buffer.from(\"00\", \"hex\"),\n      import_cipher.CipherHelper.hmacHash(mek, toBeSignedBytes)\n    ]);\n    const mek_sign = mekSign.toString(\"base64\");\n    const res = await this.service.execute({\n      bizType: 104,\n      mekId,\n      pukId,\n      publicKey: publicKeyPem,\n      privateSig: private_sig,\n      mekSig: mek_sign\n    });\n    if (res) {\n      return pukId;\n    }\n  }\n  /**\n   * issueBclForSelf\n   * @param privateKeyPem\n   * @private\n   */\n  async _issueBclForSelf(privateKeyPem) {\n    const bcl = new import_bcl.Bcl(this.service);\n    await bcl.createBclBody(this.registerPukId, this.registerPukId, \"\");\n    const defaultGroup = await this.service.execute({ bizType: 108 });\n    if (!defaultGroup || !defaultGroup.groupId) {\n      throw new Error(\"Get default group error\");\n    }\n    const selfDekGroup = {\n      groupid: defaultGroup.groupId,\n      min: 1,\n      max: 1e3\n    };\n    bcl.addDekGroup(selfDekGroup, selfDekGroup);\n    return await bcl.issueBcl(privateKeyPem, 106);\n  }\n  async _genEnvelope() {\n    const mek = await this.web3.getMekBytes();\n    let envelope = {};\n    const base64Mek = Buffer.from(mek).toString(\"base64\");\n    envelope[\"mek\"] = base64Mek;\n    envelope[\"expire\"] = 0;\n    let envelope_json = JSON.stringify(envelope).replace(\" \", \"\");\n    return envelope_json;\n  }\n  async _getAccount() {\n    const registerPukId = await this.service.execute({\n      bizType: 103,\n      mekId: this.mekId\n    });\n    this.registerPukId = registerPukId;\n  }\n  static checkLogin() {\n    if (!_MindLake.isConnected) {\n      throw new Error(\"Please connect first\");\n    }\n  }\n  checkRegistered() {\n    if (!this.isRegistered) {\n      throw new Error(\"Register error, please reLogin to register\");\n    }\n  }\n};\nvar MindLake = _MindLake;\n/**\n * mindLake version\n */\nMindLake.version = import_package.default.version;\n/**\n * isConnected mindDB\n */\nMindLake.isConnected = false;\nMindLake.log = false;\nMindLake.DataType = import_types.DataType;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  MindLake\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}