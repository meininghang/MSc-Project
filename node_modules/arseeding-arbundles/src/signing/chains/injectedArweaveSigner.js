"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../../constants");
const arweave_1 = __importDefault(require("arweave"));
const base64url_1 = __importDefault(require("base64url"));
const isString = (obj) => {
    return Object.prototype.toString.call(obj) === "[object String]" ? true : false;
};
const checkArPermissions = async (windowArweaveWallet, permissions) => {
    let existingPermissions = [];
    const checkPermissions = isString(permissions) ? [permissions] : permissions;
    try {
        existingPermissions = await windowArweaveWallet.getPermissions();
    }
    catch {
        throw new Error("PLEASE_INSTALL_ARCONNECT");
    }
    if (checkPermissions.length === 0) {
        return;
    }
    if (checkPermissions.some((permission) => {
        return !existingPermissions.includes(permission);
    })) {
        await windowArweaveWallet.connect(checkPermissions);
    }
};
class InjectedArweaveSigner {
    constructor(windowArweaveWallet) {
        this.ownerLength = constants_1.SIG_CONFIG[constants_1.SignatureConfig.ARWEAVE].pubLength;
        this.signatureLength = constants_1.SIG_CONFIG[constants_1.SignatureConfig.ARWEAVE].sigLength;
        this.signatureType = constants_1.SignatureConfig.ARWEAVE;
        this.signer = windowArweaveWallet;
    }
    async setPublicKey() {
        try {
            await checkArPermissions(this.signer, ["ACCESS_PUBLIC_KEY"]);
        }
        catch {
            throw new Error("ACCESS_PUBLIC_KEY_PERMISSION_NEEDED");
        }
        const arOwner = await this.signer.getActivePublicKey();
        this.publicKey = base64url_1.default.toBuffer(arOwner);
    }
    async sign(message) {
        if (!this.publicKey) {
            await this.setPublicKey();
        }
        try {
            await checkArPermissions(this.signer, "SIGNATURE");
        }
        catch {
            throw new Error("SIGNATURE_PERMISSION_NEEDED");
        }
        const algorithm = {
            name: "RSA-PSS",
            saltLength: 0
        };
        try {
            const signature = await this.signer.signature(message, algorithm);
            const buf = new Uint8Array(Object.values(signature));
            return buf;
        }
        catch {
            throw new Error("SIGNATURE_FAILED");
        }
    }
    static async verify(pk, message, signature) {
        return await arweave_1.default.crypto.verify(pk, message, signature);
    }
}
exports.default = InjectedArweaveSigner;
//# sourceMappingURL=injectedArweaveSigner.js.map