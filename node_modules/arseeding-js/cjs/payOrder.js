"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newEverpayByRSA = exports.newEverpayByEcc = exports.payOrders = exports.payOrder = void 0;
const everpay_1 = __importDefault(require("everpay"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const ethers_1 = require("ethers");
async function payOrder(everpay, order) {
    const ords = [];
    ords.push(order);
    return await payOrders(everpay, ords);
}
exports.payOrder = payOrder;
async function payOrders(everpay, orders) {
    if (orders.length === 0) {
        return 'No Order Need to Pay';
    }
    const to = orders[0].bundler;
    const currency = orders[0].currency;
    const decimals = orders[0].decimals;
    const ids = [];
    let fee = new bignumber_js_1.default(0);
    for (const ord of orders) {
        ids.push(ord.itemId);
        fee = fee.plus(ord.fee);
    }
    const result = await everpay.transfer({
        amount: fee.dividedBy(new bignumber_js_1.default(10).pow(decimals.toString())).toString(),
        symbol: currency,
        to: to,
        data: {
            appName: 'arseeding',
            action: 'payment',
            itemIds: ids
        }
    });
    return result.everHash;
}
exports.payOrders = payOrders;
function newEverpayByEcc(eccPrivateKey) {
    const provider = new ethers_1.ethers.providers.InfuraProvider('mainnet');
    const signer = new ethers_1.ethers.Wallet(eccPrivateKey, provider);
    const pay = new everpay_1.default({
        account: signer.address,
        chainType: 'ethereum',
        ethConnectedSigner: signer
    });
    return pay;
}
exports.newEverpayByEcc = newEverpayByEcc;
function newEverpayByRSA(arJWK, arAddress) {
    const everpay = new everpay_1.default({
        account: arAddress,
        chainType: 'arweave',
        arJWK: arJWK
    });
    return everpay;
}
exports.newEverpayByRSA = newEverpayByRSA;
