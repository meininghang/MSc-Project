"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.submitByApikey = exports.getDataByGW = exports.getOrders = exports.getBundleFee = exports.getItemMeta = exports.genNodeAPI = exports.genArweaveAPI = exports.genAPI = void 0;
const ethers_1 = require("ethers");
const everpay_1 = __importDefault(require("everpay"));
const arseeding_arbundles_1 = require("arseeding-arbundles");
const ethereumSigner_1 = __importDefault(require("arseeding-arbundles/src/signing/chains/ethereumSigner"));
const axios_1 = __importDefault(require("axios"));
const payOrder_1 = require("./payOrder");
const signing_1 = require("arseeding-arbundles/src/signing");
const genAPI = async (windowEthereum) => {
    await windowEthereum.enable();
    const provider = new ethers_1.providers.Web3Provider(windowEthereum);
    await provider._ready();
    const signer = new signing_1.InjectedEthereumSigner(provider);
    await signer.setPublicKey();
    return {
        signer,
        async sendAndPay(arseedingUrl, data, tokenSymbol, opts, needSeq, debug) {
            var _a;
            const dataItem = (0, arseeding_arbundles_1.createData)(data, signer, opts);
            await dataItem.sign(signer);
            const api = axios_1.default.create({ baseURL: arseedingUrl });
            let header = {
                'Content-Type': 'application/octet-stream'
            };
            if (needSeq) {
                header['Sort'] = 'true';
            }
            const res = await api.post(`/bundle/tx/${tokenSymbol}`, dataItem.getRaw(), {
                headers: header,
                maxBodyLength: Infinity
            });
            const order = res.data;
            const { fee } = order;
            if (+fee > 0) {
                const accounts = await provider.listAccounts();
                const account = (_a = accounts[0]) !== null && _a !== void 0 ? _a : '';
                const everpay = new everpay_1.default({
                    debug: debug,
                    account: account,
                    ethConnectedSigner: provider.getSigner(),
                    chainType: 'ethereum'
                });
                const everHash = await (0, payOrder_1.payOrder)(everpay, order);
                return {
                    everHash,
                    order
                };
            }
            else {
                return {
                    order
                };
            }
        }
    };
};
exports.genAPI = genAPI;
const isString = (obj) => {
    return Object.prototype.toString.call(obj) === '[object String]';
};
const checkArPermissions = async (windowArweaveWallet, permissions) => {
    let existingPermissions = [];
    const checkPermissions = isString(permissions) ? [permissions] : permissions;
    try {
        existingPermissions = await windowArweaveWallet.getPermissions();
    }
    catch {
        throw new Error('PLEASE_INSTALL_ARCONNECT');
    }
    if (checkPermissions.length === 0) {
        return;
    }
    const checkFunc = (permission) => {
        return !existingPermissions.includes(permission);
    };
    if (checkPermissions.some(checkFunc)) {
        await windowArweaveWallet.connect(checkPermissions);
    }
};
const genArweaveAPI = async (windowArweaveWallet) => {
    await checkArPermissions(windowArweaveWallet, [
        'ACCESS_ADDRESS',
        'ACCESS_ALL_ADDRESSES',
        'ACCESS_PUBLIC_KEY',
        'SIGN_TRANSACTION',
        'SIGNATURE'
    ]);
    const signer = new signing_1.InjectedArweaveSigner(windowArweaveWallet);
    await signer.setPublicKey();
    return {
        signer,
        async sendAndPay(arseedingUrl, data, tokenSymbol, opts, needSeq, debug) {
            const dataItem = (0, arseeding_arbundles_1.createData)(data, signer, opts);
            await dataItem.sign(signer);
            const api = axios_1.default.create({ baseURL: arseedingUrl });
            let header = {
                'Content-Type': 'application/octet-stream'
            };
            if (needSeq) {
                header['Sort'] = 'true';
            }
            const res = await api.post(`/bundle/tx/${tokenSymbol}`, dataItem.getRaw(), {
                headers: header,
                maxBodyLength: Infinity
            });
            const order = res.data;
            const { fee } = order;
            if (+fee > 0) {
                const account = await windowArweaveWallet.getActiveAddress();
                const everpay = new everpay_1.default({
                    debug: debug,
                    account: account,
                    arJWK: 'use_wallet',
                    chainType: 'arweave'
                });
                const everHash = await (0, payOrder_1.payOrder)(everpay, order);
                return {
                    everHash,
                    order
                };
            }
            else {
                return {
                    order
                };
            }
        }
    };
};
exports.genArweaveAPI = genArweaveAPI;
const genNodeAPI = (pk) => {
    const signer = new ethereumSigner_1.default(pk);
    const ethConnectedSigner = new ethers_1.Wallet(pk);
    return {
        signer,
        async sendAndPay(arseedingUrl, data, tokenSymbol, opts, debug) {
            const dataItem = (0, arseeding_arbundles_1.createData)(data, signer, opts);
            await dataItem.sign(signer);
            const api = axios_1.default.create({ baseURL: arseedingUrl });
            const res = await api.post(`/bundle/tx/${tokenSymbol}`, dataItem.getRaw(), {
                headers: { 'Content-Type': 'application/octet-stream' },
                maxBodyLength: Infinity
            });
            const order = res.data;
            const { fee } = order;
            if (+fee > 0) {
                const account = ethConnectedSigner.address;
                const everpay = new everpay_1.default({
                    debug: debug,
                    account: account,
                    ethConnectedSigner: ethConnectedSigner,
                    chainType: 'ethereum'
                });
                const everHash = await (0, payOrder_1.payOrder)(everpay, order);
                return {
                    everHash,
                    order
                };
            }
            else {
                return {
                    order
                };
            }
        }
    };
};
exports.genNodeAPI = genNodeAPI;
const getItemMeta = async (arseedingUrl, itemId) => {
    const api = axios_1.default.create({ baseURL: arseedingUrl });
    const res = await api.get(`bundle/tx/${itemId}`);
    return res.data;
};
exports.getItemMeta = getItemMeta;
const getBundleFee = async (arseedingUrl, size, currency) => {
    const api = axios_1.default.create({ baseURL: arseedingUrl });
    const res = await api.get(`bundle/fee/${size}/${currency}`);
    return res.data;
};
exports.getBundleFee = getBundleFee;
const getOrders = async (arseedingUrl, signerAddr) => {
    const api = axios_1.default.create({ baseURL: arseedingUrl });
    const res = await api.get(`bundle/orders/${signerAddr}`);
    return res.data;
};
exports.getOrders = getOrders;
const getDataByGW = async (arseedingUrl, itemId) => {
    const api = axios_1.default.create({ baseURL: arseedingUrl });
    const res = await api.get(`/${itemId}`);
    return res.data;
};
exports.getDataByGW = getDataByGW;
const submitByApikey = async (arseedingUrl, apiKey, currency, data, contentType, tags) => {
    tags['Content-Type'] = contentType;
    const api = axios_1.default.create({ baseURL: arseedingUrl });
    const res = await api.post(`/bundle/data/${currency}`, data, {
        headers: { 'X-API-KEY': apiKey },
        maxBodyLength: Infinity,
        params: tags
    });
    return res.data;
};
exports.submitByApikey = submitByApikey;
