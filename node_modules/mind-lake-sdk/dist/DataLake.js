var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/DataLake.ts
var DataLake_exports = {};
__export(DataLake_exports, {
  default: () => DataLake
});
module.exports = __toCommonJS(DataLake_exports);
var import_result = __toESM(require("./util/result"));
var DataLake = class {
  constructor(sdk) {
    this.service = sdk.service;
  }
  async query(executeSql) {
    try {
      const res = await this.service.execute({ bizType: 114, executeSql });
      return import_result.default.success(res);
    } catch (e) {
      console.error(e);
      return import_result.default.fail(e);
    }
  }
  async createCocoon(cocoonName) {
    try {
      await this.service.execute({ bizType: 121, cocoonName });
      return import_result.default.success(true);
    } catch (e) {
      console.error(e);
      return import_result.default.fail(e);
    }
  }
  async dropCocoon(cocoonName) {
    try {
      await this.service.execute({ bizType: 129, cocoonName });
      return import_result.default.success(true);
    } catch (e) {
      console.error(e);
      return import_result.default.fail(e);
    }
  }
  async createTable(tableName, columns, pkColumns) {
    try {
      await this.service.execute({
        bizType: 123,
        tableName,
        columns,
        pkColumns
      });
      return import_result.default.success(true);
    } catch (e) {
      console.error(e);
      return import_result.default.fail(e);
    }
  }
  async dropTable(tableName) {
    try {
      await this.service.execute({ bizType: 128, tableName });
      return import_result.default.success(true);
    } catch (e) {
      console.error(e);
      return import_result.default.fail(e);
    }
  }
  async listCocoon() {
    try {
      const data = await this.service.execute({ bizType: 122 });
      return import_result.default.success(data);
    } catch (e) {
      console.error(e);
      return import_result.default.fail(e);
    }
  }
  async listTablesByCocoon(cocoonName) {
    try {
      const data = await this.service.execute({
        bizType: 125,
        cocoonName
      });
      return import_result.default.success(data);
    } catch (e) {
      console.error(e);
      return import_result.default.fail(e);
    }
  }
  async linkTableToCocoon(tableName, cocoonName) {
    try {
      const data = await this.service.execute({
        bizType: 124,
        tableName,
        cocoonName
      });
      return import_result.default.success(data);
    } catch (e) {
      console.error(e);
      return import_result.default.fail(e);
    }
  }
  async listTableByWalletAddress() {
    try {
      const data = await this.service.execute({
        bizType: 301
      });
      return import_result.default.success(data);
    } catch (e) {
      console.error(e);
      return import_result.default.fail(e);
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
