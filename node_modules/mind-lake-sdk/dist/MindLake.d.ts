import { Service } from './request';
import { Web3Interact } from './util/web3';
import Crypto from './Crypto';
import DataLake from './DataLake';
import { ResultType, DataType } from './types';
import Permission from './Permission';
/**
 *
 */
export declare class MindLake {
    service: Service;
    /**
     * mindLake version
     */
    static readonly version: any;
    /**
     * isConnected mindDB
     */
    static isConnected: boolean;
    /**
     * mind db is init
     */
    isRegistered: boolean;
    /**
     * server publicKey
     * */
    publicKey: string;
    /**
     *registerPukId
     */
    registerPukId: string;
    /**
     * mek id
     */
    mekId: string;
    /**
     * crypto instance
     */
    crypto: Crypto;
    web3: Web3Interact;
    dataLake: DataLake;
    permission: Permission;
    private static instance;
    static log: boolean;
    static readonly DataType: typeof DataType;
    static getInstance(appKey: string, nodeUrl?: string): Promise<MindLake>;
    private constructor();
    /**
     *connect db
     */
    connect(): Promise<ResultType>;
    /**
     * disconnect db
     */
    disConnect(): Promise<ResultType>;
    /**
     * getEnclaveInfo
     */
    private _getServerInfo;
    private _init;
    /**
     * mek provision
     * @private
     */
    private _mekProvision;
    /**
     * registerCertificate pukId
     * @private
     */
    private _registerCertificate;
    /**
     * issueBclForSelf
     * @param privateKeyPem
     * @private
     */
    private _issueBclForSelf;
    private _genEnvelope;
    private _getAccount;
    static checkLogin(): void;
    checkRegistered(): void;
}
