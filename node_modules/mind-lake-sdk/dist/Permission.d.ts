import { MindLake } from './MindLake';
import { Bcl } from './util/bcl';
import { ResultType } from './types';
export default class Permission {
    private readonly service;
    private readonly web3;
    private readonly sdk;
    constructor(sdk: MindLake);
    /**
     *
     * @param targetWalletAddress
     */
    grant(targetWalletAddress: string, columns: Array<string>): Promise<ResultType>;
    /**
     *
     * @param policyId
     */
    confirm(policyId: string): Promise<ResultType>;
    /**
     * revoke grant
     * @param targetWalletAddress
     * @param columns, if the columns is empty ,will revoke all
     */
    revoke(targetWalletAddress: string, columns?: Array<{
        table: string;
        column: string;
    }>): Promise<ResultType>;
    listGrantee(): Promise<ResultType>;
    listOwner(): Promise<ResultType>;
    listOwnerColumn(targetWalletAddress: string): Promise<ResultType>;
    listGrantedColumn(targetWalletAddress: string): Promise<ResultType>;
    _addColumnIntoBcl(bcl: Bcl, table: string, column: string, minId?: number, maxId?: number): Promise<void>;
}
