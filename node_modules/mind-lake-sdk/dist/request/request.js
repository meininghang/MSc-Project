var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/request/request.ts
var request_exports = {};
__export(request_exports, {
  default: () => request_default
});
module.exports = __toCommonJS(request_exports);
var import_axios = __toESM(require("axios"));
var import_constant = require("../util/constant");
var import_MindLake = require("../MindLake");
var NOT_LOGIN_CODE = [401, 402, 403, 40003];
var config = {
  // baseURL: URL,
  timeout: 2e4 /* TIMEOUT */
};
var RequestHttp = class {
  constructor(config2) {
    this.service = import_axios.default.create(config2);
    this.service.interceptors.request.use(
      // @ts-ignore
      (config3) => {
        const token = localStorage.getItem(import_constant.TOKEN_KEY) || "";
        const wa = localStorage.getItem(import_constant.WALLET_key);
        const app = localStorage.getItem(import_constant.APP_KEY);
        const _config = {
          ...config3,
          headers: {
            token,
            ver: `v${import_MindLake.MindLake.version}`,
            wa,
            app
          }
        };
        if (import_MindLake.MindLake.log) {
          console.log("request data >>>", config3.data);
        }
        return _config;
      },
      (error) => {
        Promise.reject(error);
      }
    );
    this.service.interceptors.response.use(
      (response) => {
        const { data, config: config3 } = response;
        if (import_MindLake.MindLake.log) {
          console.log("response >>> ", JSON.stringify(data));
        }
        if (NOT_LOGIN_CODE.includes(data.code)) {
          localStorage.removeItem(import_constant.TOKEN_KEY);
          import_MindLake.MindLake.isConnected = false;
          return Promise.reject({ code: data.code, message: data.message });
        }
        if (data.code && data.code !== 0 /* SUCCESS */) {
          return Promise.reject({ code: data.code, message: data.message });
        }
        return data.data;
      },
      (error) => {
        console.error(error);
      }
    );
  }
  get(url, params) {
    return this.service.get(url, { params });
  }
  post(url, data) {
    return this.service.post(url, data);
  }
};
var request_default = new RequestHttp(config);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
