/// <reference types="node" />
/**
 * Helper related to encryption
 */
export declare class CipherHelper {
    /**
     * Obtain bytes of random length
     * @param length
     * @return Buffer
     */
    static randomBytes(length?: number): Buffer;
    /**
     * get hash
     * @param data
     */
    static sha256Hash(data: string): string;
    /**
     * rsa sign
     * @param privateKeyPem
     * @param data
     */
    static rsaSign(privateKeyPem: string, data: string | Buffer): Buffer;
    static rsaEncrypt(pubKey: string, data: Buffer): Buffer;
    /**
     * get hmac hash
     * @param key
     * @param data
     */
    static hmacHash(key: Buffer, data: string | Uint8Array): Buffer;
    /**
     * create RSA keys
     * @param b
     */
    static createKeyPemString(b?: number): {
        publicKeyPem: string;
        privateKeyPem: string;
    };
    static getPublicKeyPemFromPrivate(privateKeyDer: Buffer): {
        publicKeyPem: any;
        privateKeyPem: any;
    };
    /**
     * aes encrypt
     * @param key
     * @param iv
     * @param data
     */
    static aesEncrypt(key: Buffer, iv: Uint8Array, data: string | Buffer): Buffer;
    /**
     * aes decrypt
     * @param key
     * @param iv
     * @param data
     */
    static aesDecrypt(key: Buffer, iv: Buffer, data: Buffer): Buffer;
    /**
     * Generate hexadecimal mk
     */
    static generateMk(): string;
    /**
     *
     * @param mk
     * @param dekId
     * @param dek
     */
    static encryptDekToBase64(mk: Buffer, dekId: number, dek: Buffer): string;
    static decryptDekToBase64(mek: Buffer, dekCipherStr: string): [number, Buffer];
    static digest_gAuth(mek: Buffer, grp_id: Buffer, dek_id: number): string;
    static encodeDataByType(data: any, encType: number): Buffer;
    static decodeDataByType(data: any, encType: number): any;
}
