var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/util/util.ts
var util_exports = {};
__export(util_exports, {
  Util: () => Util
});
module.exports = __toCommonJS(util_exports);
var Util = class {
  static ab2str(buf) {
    return String.fromCharCode.apply(null, buf);
  }
  static structPackq(data) {
    let result;
    const buffer = new ArrayBuffer(8);
    const view = new DataView(buffer);
    view.setBigInt64(0, BigInt(data), true);
    result = new Uint8Array(buffer);
    return result;
  }
  static stringToByte(str) {
    const bytes = new Array();
    let len, c;
    len = str.length;
    for (let i = 0; i < len; i++) {
      c = str.charCodeAt(i);
      if (c >= 65536 && c <= 1114111) {
        bytes.push(c >> 18 & 7 | 240);
        bytes.push(c >> 12 & 63 | 128);
        bytes.push(c >> 6 & 63 | 128);
        bytes.push(c & 63 | 128);
      } else if (c >= 2048 && c <= 4095) {
        bytes.push(c >> 12 & 7 | 240);
        bytes.push(c >> 6 & 63 | 128);
        bytes.push(c & 63 | 128);
      } else if (c >= 2048 && c <= 2047) {
        bytes.push(c >> 6 & 63 | 128);
        bytes.push(c & 63 | 128);
      } else {
        bytes.push(c & 255);
      }
    }
    return bytes;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Util
});
