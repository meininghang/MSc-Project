/// <reference types="node" />
import { Web3Provider } from '@ethersproject/providers';
export interface RequestArguments {
    readonly method: string;
    readonly params?: readonly unknown[] | object;
}
export interface Web3WithWalletProvider extends Web3Provider {
    request(args: RequestArguments): Promise<unknown>;
    selectedAddress: string;
}
declare global {
    interface Window {
        web3: any;
        ethereum: any;
    }
}
/**
 * web3 helper
 */
export declare class Web3Interact {
    private readonly provider;
    /**
     * wallet address
     */
    private account;
    /**
     * web3 instance
     */
    private web3;
    /**
     * contract instance
     */
    private contract;
    /**
     * contract address
     */
    static CONTRACT_ADDRESS: string;
    /**
     * wallet publicKe
     */
    private publicKey;
    /**
     * encrypt mk buffer
     */
    private mkCipherBuffer;
    /**
     * decrypt mk buffer
     */
    private mkBuffer;
    /**
     * encrypt privateKey buffer
     */
    private privateKeyCipherBuffer;
    constructor();
    private _onListen;
    /**
     * connected wallet account change event
     * @param accounts
     * @private
     */
    private _onAccountsChanged;
    /**
     * chain change event
     * @param chainId
     * @private
     */
    private _onChainChanged;
    private _walletChange;
    /**
     * wallet disconnect
     * @private
     */
    private _onDisconnect;
    /**
     * get walletAddress
     */
    getWalletAccount(): Promise<string>;
    checkConnection(): Promise<void>;
    /**
     * wallet signature
     * @param signData
     */
    personalSignature(signData: string): Promise<string>;
    /**
     * get wallet publicKey
     * @private
     */
    private _getEncryptionPublicKey;
    /**
     * get mk
     */
    getMekBytes(): Promise<Buffer>;
    /**
     * get pk
     */
    getPkPem(): Promise<{
        privateKeyPem: string;
        publicKeyPem: string;
    }>;
    /**
     *load keys form chain
     */
    private _loadKeysCipherFromChain;
    /**
     * generateKeys form local to chain
     * @private
     */
    private _generateKeysCipherToChain;
    /**
     * encrypt mk
     * @param mk
     * @private
     */
    private _encryptMk;
    /**
     * decrypt mk
     * @param data
     * @private
     */
    private _decryptMk;
}
