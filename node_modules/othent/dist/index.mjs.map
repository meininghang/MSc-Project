{"version":3,"file":"index.mjs","sources":["../src/lib/index.ts"],"sourcesContent":["import axios from 'axios';\nimport { createAuth0Client } from '@auth0/auth0-spa-js';\nimport jwt_decode from 'jwt-decode';\nimport jwkToPem from 'jwk-to-pem';\nimport { KJUR } from 'jsrsasign';\nimport CryptoJS from 'crypto-js';\n// sha256\nasync function sha256(message) {\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", typeof message != \"string\" ? message : new TextEncoder().encode(message));\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray\n        .map((b) => b.toString(16).padStart(2, \"0\"))\n        .join(\"\"); // convert bytes to hex string\n    return hashHex;\n}\n// Othent\nexport async function Othent(params) {\n    const API_ID = params.API_ID;\n    const callbackURL = window.location.href;\n    return axios({\n        method: 'POST',\n        url: 'https://server.othent.io/use-othent',\n        data: { API_ID, callbackURL }\n    })\n        .then((API_valid) => {\n        if (API_valid.data.success === false) {\n            throw new Error('Please specify an API ID (you can get one from Othent.io)');\n        }\n        // auth0\n        const getAuth0Client = () => createAuth0Client({\n            domain: \"auth.othent.io\",\n            clientId: \"dyegx4dZj5yOv0v0RkoUsc48CIqaNS6C\",\n            authorizationParams: {\n                redirect_uri: window.location.origin\n            }\n        });\n        function getTokenSilently(auth0, authParams) {\n            return auth0.getTokenSilently({\n                detailedResponse: true,\n                authorizationParams: authParams,\n                cacheMode: 'off'\n            });\n        }\n        // get API keys\n        async function getAPIID() {\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({ othentFunction: \"API_ID\" }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const JWT = accessToken.id_token;\n            const decoded_JWT = jwt_decode(JWT);\n            if (decoded_JWT.contract_id) {\n                return { API_ID: decoded_JWT.API_ID };\n            }\n            else {\n                throw new Error(`{ success: false, message: \"Please create a Othent account\" }`);\n            }\n        }\n        // process data\n        async function processData(data) {\n            let dataBuffer;\n            if (data instanceof File) {\n                dataBuffer = await readFileData(data);\n            }\n            else if (typeof data === 'string') {\n                dataBuffer = Buffer.from(data, 'utf8');\n            }\n            else if (Buffer.isBuffer(data)) {\n                dataBuffer = data;\n            }\n            else if (data instanceof ArrayBuffer || data instanceof SharedArrayBuffer) {\n                dataBuffer = Buffer.from(data);\n            }\n            else if (data instanceof Uint8Array) {\n                dataBuffer = Buffer.from(data.buffer);\n            }\n            else {\n                throw new Error('Invalid data, we accept: string | Buffer | ArrayBuffer | SharedArrayBuffer | Uint8Array | File');\n            }\n            return dataBuffer;\n        }\n        // query a wallet addresses transactions\n        async function queryWalletAddressTxns(params) {\n            return await axios({\n                method: 'POST',\n                url: 'https://server.othent.io/query-wallet-address-txns',\n                data: { walletAddress: params.walletAddress }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                throw error;\n            });\n        }\n        // ping server\n        async function ping() {\n            return await axios({\n                method: 'GET',\n                url: 'https://server.othent.io/',\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                throw error;\n            });\n        }\n        async function userDetails() {\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({ othentFunction: \"idToken\" }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const JWT = accessToken.id_token;\n            const decoded_JWT = jwt_decode(JWT);\n            if (decoded_JWT.contract_id) {\n                delete decoded_JWT.nonce;\n                delete decoded_JWT.sid;\n                delete decoded_JWT.aud;\n                delete decoded_JWT.iss;\n                delete decoded_JWT.iat;\n                delete decoded_JWT.exp;\n                delete decoded_JWT.updated_at;\n                return decoded_JWT;\n            }\n            else {\n                throw new Error(`{ success: false, message: \"Please create a Othent account\" }`);\n            }\n        }\n        // log in\n        async function logIn(params = {}) {\n            var _a;\n            (_a = params.testNet) !== null && _a !== void 0 ? _a : (params.testNet = false);\n            const auth0 = await getAuth0Client();\n            const isAuthenticated = await auth0.isAuthenticated();\n            const baseOptions = {\n                authorizationParams: {\n                    transaction_input: JSON.stringify({\n                        othentFunction: \"idToken\",\n                        testNet: params.testNet\n                    }),\n                    redirect_uri: window.location.origin\n                }\n            };\n            function isDecodedJWT(obj) {\n                return obj && typeof obj.contract_id === 'string';\n            }\n            const loginAndGetDecodedJWT = async (options) => {\n                await auth0.loginWithPopup(options);\n                const authParams = { transaction_input: JSON.stringify({ othentFunction: \"idToken\" }) };\n                const accessToken = await getTokenSilently(auth0, authParams);\n                const jwtObj = jwt_decode(accessToken.id_token);\n                if (isDecodedJWT(jwtObj)) {\n                    return { encoded: accessToken.id_token, decoded: jwtObj };\n                }\n                else {\n                    throw new Error('Invalid JWT structure received.');\n                }\n            };\n            const processDecodedJWT = async (encoded_JWT, decoded_JWT, isTestNet) => {\n                if (isTestNet ? decoded_JWT.test_net_contract_id : decoded_JWT.contract_id) {\n                    const fieldsToDelete = ['nonce', 'sid', 'aud', 'iss', 'iat', 'exp', 'updated_at'];\n                    fieldsToDelete.forEach(field => delete decoded_JWT[field]);\n                    return decoded_JWT;\n                }\n                return await createUserOnServer(encoded_JWT, isTestNet ? 'testNet' : ''); // send encoded JWT\n            };\n            const createUserOnServer = async (encoded_JWT, network = '') => {\n                const response = await axios({\n                    method: 'POST',\n                    url: 'https://server.othent.io/create-user',\n                    data: { JWT: encoded_JWT, API_ID, network }\n                });\n                return response.data;\n            };\n            if (isAuthenticated) {\n                const { encoded, decoded } = await loginAndGetDecodedJWT(baseOptions);\n                return processDecodedJWT(encoded, decoded, params.testNet);\n            }\n            else {\n                try {\n                    const { encoded, decoded } = await loginAndGetDecodedJWT(baseOptions);\n                    return processDecodedJWT(encoded, decoded, params.testNet);\n                }\n                catch (error) {\n                    throw new Error('Your browser is blocking us! Please turn off your shields or allow cross site cookies! :)');\n                }\n            }\n        }\n        // log out\n        async function logOut() {\n            const auth0 = await getAuth0Client();\n            await auth0.logout({\n                logoutParams: {\n                    returnTo: window.location.origin\n                }\n            });\n            return { response: 'User logged out' };\n        }\n        // read contract\n        async function readContract() {\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({ othentFunction: \"idToken\" }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const JWT = accessToken.id_token;\n            return await axios({\n                method: 'POST',\n                url: 'https://server.othent.io/read-contract',\n                data: { JWT }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                console.log(error.response.data);\n                throw error;\n            });\n        }\n        // sign transaction warp\n        async function signTransactionWarp(params) {\n            var _a, _b;\n            (_a = params.tags) !== null && _a !== void 0 ? _a : (params.tags = []);\n            (_b = params.testNet) !== null && _b !== void 0 ? _b : (params.testNet = false);\n            const warpData = {\n                function: params.othentFunction,\n                data: {\n                    toContractId: params.data.toContractId,\n                    toContractFunction: params.data.toContractFunction,\n                    txnData: params.data.txnData\n                }\n            };\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({\n                    othentFunction: params.othentFunction,\n                    warpData: warpData,\n                    testNet: params.testNet\n                }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const JWT = accessToken.id_token;\n            const decoded_JWT = jwt_decode(JWT);\n            if (!decoded_JWT.contract_id) {\n                throw new Error(`{success: false, message:\"Please create a Othent account\"}`);\n            }\n            if (params.testNet === true && !decoded_JWT.test_net_contract_id) {\n                throw new Error(`{success: false, message:\"Please create a Othent test net account\"}`);\n            }\n            return { JWT: accessToken.id_token, tags: params.tags, testNet: params.testNet };\n        }\n        // send transaction - Warp\n        async function sendTransactionWarp(params) {\n            const JWT = params.JWT;\n            const tags = params.tags;\n            let networkType;\n            if (params.testNet === true) {\n                networkType = 'testNet';\n            }\n            else {\n                networkType = 'mainNet';\n            }\n            return await axios({\n                method: 'POST',\n                url: 'https://server.othent.io/send-transaction',\n                data: { JWT, tags, API_ID, network: networkType }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                console.log(error.response.data);\n                throw error;\n            });\n        }\n        // sign functions (AR+Bndlr) readFileData\n        async function readFileData(file) {\n            return new Promise((resolve, reject) => {\n                const reader = new FileReader();\n                reader.onload = () => {\n                    const fileData = reader.result;\n                    const buffer = Buffer.from(fileData);\n                    resolve(buffer);\n                };\n                reader.onerror = reject;\n                reader.readAsArrayBuffer(file);\n            });\n        }\n        // sign transaction arweave\n        async function signTransactionArweave(params) {\n            var _a;\n            (_a = params.tags) !== null && _a !== void 0 ? _a : (params.tags = []);\n            const dataBuffer = await processData(params.data);\n            if (!dataBuffer) {\n                throw new Error('Invalid data, we accept: string | Buffer | ArrayBuffer | SharedArrayBuffer | Uint8Array | File');\n            }\n            const file_hash = await sha256(dataBuffer);\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({\n                    othentFunction: params.othentFunction,\n                    file_hash: file_hash\n                }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const JWT = accessToken.id_token;\n            const decoded_JWT = jwt_decode(JWT);\n            if (!decoded_JWT.contract_id) {\n                throw new Error(`{ success: false, message: \"Please create a Othent account\" }`);\n            }\n            return { data: dataBuffer, JWT: accessToken.id_token, tags: params.tags };\n        }\n        // send transaction - Arweave\n        async function sendTransactionArweave(params) {\n            const data = params.data;\n            const blob = new Blob([data]);\n            const formData = new FormData();\n            formData.append('file', blob);\n            formData.append('dataHashJWT', params.JWT);\n            formData.append('API_ID', API_ID);\n            formData.append('tags', JSON.stringify(params.tags));\n            return await fetch('https://server.othent.io/upload-data-arweave', {\n                method: 'POST',\n                body: formData\n            })\n                .then(response => {\n                return response.json();\n            })\n                .then(data => {\n                return data;\n            })\n                .catch(error => {\n                console.log(error);\n                throw error;\n            });\n        }\n        // sign transaction - bundlr\n        async function signTransactionBundlr(params) {\n            var _a;\n            (_a = params.tags) !== null && _a !== void 0 ? _a : (params.tags = []);\n            const dataBuffer = await processData(params.data);\n            if (!dataBuffer) {\n                throw new Error('Invalid data, we accept: string | Buffer | ArrayBuffer | SharedArrayBuffer | Uint8Array | File');\n            }\n            const file_hash = await sha256(dataBuffer);\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({\n                    othentFunction: params.othentFunction,\n                    file_hash: file_hash\n                }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const JWT = accessToken.id_token;\n            const decoded_JWT = jwt_decode(JWT);\n            if (!decoded_JWT.contract_id) {\n                throw new Error(`{ success: false, message: \"Please create a Othent account\" }`);\n            }\n            return { data: dataBuffer, JWT: accessToken.id_token, tags: params.tags };\n        }\n        // send transaction - bundlr\n        async function sendTransactionBundlr(params) {\n            const data = params.data;\n            const blob = new Blob([data]);\n            const formData = new FormData();\n            formData.append(\"file\", blob);\n            formData.append(\"dataHashJWT\", params.JWT);\n            formData.append(\"API_ID\", API_ID);\n            formData.append(\"tags\", JSON.stringify(params.tags));\n            return await fetch(\"https://server.othent.io/upload-data-bundlr\", {\n                method: \"POST\",\n                body: formData,\n            })\n                .then((response) => {\n                return response.json();\n            })\n                .then((data) => {\n                return data;\n            })\n                .catch((error) => {\n                console.log(error);\n                throw error;\n            });\n        }\n        // backup keyfile\n        async function initializeJWK(params) {\n            const privateKey = params.privateKey;\n            const key = JSON.stringify(privateKey);\n            const key1 = JSON.parse(key);\n            const JWK_public_key = null;\n            const JWK_public_key_PEM = jwkToPem(key1);\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({\n                    othentFunction: 'initializeJWK',\n                    warpData: { function: 'initializeJWK', data: { JWK_public_key_PEM, JWK_public_key } }\n                }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const PEM_key_JWT = accessToken.id_token;\n            return axios({\n                method: 'POST',\n                url: 'https://server.othent.io/initialize-JWK',\n                data: { PEM_key_JWT, API_ID }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                console.log(error.response.data);\n                throw error;\n            });\n        }\n        // JWK backup transaction\n        async function JWKBackupTxn(params) {\n            const payload = {\n                iat: Math.floor(Date.now() / 1000),\n                sub: params.sub,\n                contract_id: params.contract_id,\n                tags: params.tags,\n                contract_input: {\n                    data: params.data,\n                    othentFunction: params.othentFunction\n                }\n            };\n            const privateKey = params.privateKey;\n            const privatePem = jwkToPem(privateKey, { private: true });\n            const header = { alg: 'RS256', typ: 'JWT', exp: Math.floor(Date.now() / 1000) + (60 * 60) };\n            const JWK_signed_JWT = KJUR.jws.JWS.sign('RS256', JSON.stringify(header), JSON.stringify(payload), privatePem);\n            return await axios({\n                method: 'POST',\n                url: 'https://server.othent.io/JWK-backup-transaction',\n                data: { JWK_signed_JWT, API_ID }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                console.log(error.response.data);\n                throw error;\n            });\n        }\n        // Read custom contract\n        async function readCustomContract(params) {\n            var _a;\n            (_a = params.testNet) !== null && _a !== void 0 ? _a : (params.testNet = false);\n            let networkType;\n            if (params.testNet === true) {\n                networkType = 'testNet';\n            }\n            else {\n                networkType = 'mainNet';\n            }\n            return await axios({\n                method: 'POST',\n                url: 'https://server.othent.io/read-custom-contract',\n                data: { contract_id: params.contract_id, network: networkType }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                console.log(error.response.data);\n                throw error;\n            });\n        }\n        // View custom contract\n        async function viewCustomContract(params) {\n            var _a, _b;\n            (_a = params.tags) !== null && _a !== void 0 ? _a : (params.tags = []);\n            (_b = params.testNet) !== null && _b !== void 0 ? _b : (params.testNet = false);\n            let networkType;\n            if (params.testNet === true) {\n                networkType = 'testNet';\n            }\n            else {\n                networkType = 'mainNet';\n            }\n            return await axios({\n                method: 'POST',\n                url: 'https://server.othent.io/view-custom-contract-state',\n                data: { contract_id: params.contract_id, func: params.function, data: params.tags, network: networkType, }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                console.log(error.response.data);\n                throw error;\n            });\n        }\n        async function verifyArweaveData(params) {\n            let getTagHash = await fetch(`https://arweave.net/tx/${params.transactionId}`, {\n                headers: {\n                    responseType: 'arraybuffer'\n                }\n            });\n            let decodedVerifyJWT;\n            const getTagHashJson = await getTagHash.json();\n            getTagHashJson.tags.map((tag) => {\n                if (atob(tag.name) === 'File-Hash-JWT') {\n                    decodedVerifyJWT = jwt_decode(atob(tag.value));\n                }\n            });\n            const tagHash = decodedVerifyJWT.file_hash;\n            let axiosResponse = await axios.get(`https://arweave.net/${params.transactionId}`, {\n                responseType: 'arraybuffer'\n            });\n            let getOnChainData = axiosResponse.data;\n            const onChainHash = await sha256(getOnChainData);\n            if (tagHash === onChainHash) {\n                return {\n                    validData: true,\n                    contract_id: decodedVerifyJWT.contract_id,\n                    onChainHash: onChainHash,\n                    tagHash: tagHash,\n                    iat: decodedVerifyJWT.iat,\n                    userId: decodedVerifyJWT.sub\n                };\n            }\n            else {\n                return {\n                    validData: false,\n                    onChainHash: onChainHash,\n                    tagHash: tagHash\n                };\n            }\n        }\n        // Verify bundlr data\n        async function verifyBundlrData(params) {\n            let getTagHash = await fetch(`https://gateway.bundlr.network/tx/${params.transactionId}`, {\n                headers: {\n                    responseType: 'arraybuffer'\n                }\n            });\n            let decodedVerifyJWT;\n            const getTagHashJson = await getTagHash.json();\n            getTagHashJson.tags.map((tag) => {\n                if (tag.name === 'File-Hash-JWT') {\n                    decodedVerifyJWT = jwt_decode(tag.value);\n                }\n            });\n            const tagHash = decodedVerifyJWT.file_hash;\n            let axiosResponse = await axios.get(`https://arweave.net/${params.transactionId}`, {\n                responseType: 'arraybuffer'\n            });\n            let getOnChainData = axiosResponse.data;\n            const onChainHash = await sha256(getOnChainData);\n            if (tagHash === onChainHash) {\n                return {\n                    validData: true,\n                    contract_id: decodedVerifyJWT.contract_id,\n                    onChainHash: onChainHash,\n                    tagHash: tagHash,\n                    iat: decodedVerifyJWT.iat,\n                    userId: decodedVerifyJWT.sub\n                };\n            }\n            else {\n                return {\n                    validData: false,\n                    onChainHash: onChainHash,\n                    tagHash: tagHash\n                };\n            }\n        }\n        // encrypt data\n        async function encryptData(params) {\n            const data = params.data;\n            const key = params.key;\n            const encryptedData = CryptoJS.AES.encrypt(data, key).toString();\n            return { encryptedData: encryptedData };\n        }\n        // decrypt data\n        async function decryptData(params) {\n            const data = params.data;\n            const key = params.key;\n            const bytes = CryptoJS.AES.decrypt(data, key);\n            const decryptedData = CryptoJS.enc.Utf8.stringify(bytes);\n            return { decryptedData: decryptedData };\n        }\n        // Deploy a Warp contract\n        async function deployWarpContract(params) {\n            var _a, _b;\n            (_a = params.tags) !== null && _a !== void 0 ? _a : (params.tags = []);\n            (_b = params.testNet) !== null && _b !== void 0 ? _b : (params.testNet = false);\n            let networkType;\n            if (params.testNet === true) {\n                networkType = 'testNet';\n            }\n            else {\n                networkType = 'mainNet';\n            }\n            const file_hash = await sha256(params.contractSrc);\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({\n                    othentFunction: 'uploadData',\n                    file_hash: file_hash\n                }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const JWT = accessToken.id_token;\n            return await axios({\n                method: 'POST',\n                url: 'https://server.othent.io/deploy-warp-contract',\n                data: {\n                    contractSrc: params.contractSrc,\n                    contractState: params.state,\n                    JWT: JWT,\n                    tags: params.tags,\n                    network: networkType\n                }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                console.log(error.response.data);\n                throw error;\n            });\n        }\n        // Deploy a Warp contract from transaction\n        async function deployWarpContractFromTx(params) {\n            var _a, _b;\n            (_a = params.tags) !== null && _a !== void 0 ? _a : (params.tags = []);\n            (_b = params.testNet) !== null && _b !== void 0 ? _b : (params.testNet = false);\n            let networkType;\n            if (params.testNet === true) {\n                networkType = 'testNet';\n            }\n            else {\n                networkType = 'mainNet';\n            }\n            const auth0 = await getAuth0Client();\n            const authParams = { transaction_input: JSON.stringify({\n                    othentFunction: 'deployWarpContractFromTx',\n                    srcTxId: params.srcTxId,\n                }) };\n            const accessToken = await getTokenSilently(auth0, authParams);\n            const JWT = accessToken.id_token;\n            return await axios({\n                method: 'POST',\n                url: 'https://server.othent.io/deploy-warp-contract-from-tx',\n                data: {\n                    srcTxId: params.srcTxId,\n                    contractState: params.state,\n                    JWT: JWT,\n                    tags: params.tags,\n                    network: networkType\n                }\n            })\n                .then(response => {\n                return response.data;\n            })\n                .catch(error => {\n                console.log(error.response.data);\n                throw error;\n            });\n        }\n        return {\n            getAPIID,\n            queryWalletAddressTxns,\n            ping,\n            logIn,\n            logOut,\n            userDetails,\n            readContract,\n            viewCustomContract,\n            signTransactionWarp,\n            sendTransactionWarp,\n            signTransactionArweave,\n            sendTransactionArweave,\n            signTransactionBundlr,\n            sendTransactionBundlr,\n            initializeJWK,\n            JWKBackupTxn,\n            readCustomContract,\n            verifyArweaveData,\n            verifyBundlrData,\n            encryptData,\n            decryptData,\n            deployWarpContract,\n            deployWarpContractFromTx\n        };\n    })\n        .catch((error) => {\n        console.error('An error occurred:', error);\n        throw error;\n    });\n}\nexport default { Othent };\n//# sourceMappingURL=index.js.map"],"names":["async","sha256","message","hashBuffer","crypto","subtle","digest","TextEncoder","encode","Array","from","Uint8Array","map","b","toString","padStart","join","Othent","params","API_ID","callbackURL","window","location","href","axios","method","url","data","then","API_valid","success","Error","getAuth0Client","createAuth0Client","domain","clientId","authorizationParams","redirect_uri","origin","getTokenSilently","auth0","authParams","detailedResponse","cacheMode","processData","dataBuffer","File","file","Promise","resolve","reject","reader","FileReader","onload","fileData","result","buffer","Buffer","onerror","readAsArrayBuffer","readFileData","isBuffer","ArrayBuffer","SharedArrayBuffer","getAPIID","transaction_input","JSON","stringify","othentFunction","JWT","id_token","decoded_JWT","jwt_decode","contract_id","queryWalletAddressTxns","walletAddress","response","catch","error","ping","logIn","_a","testNet","isAuthenticated","baseOptions","loginAndGetDecodedJWT","options","loginWithPopup","accessToken","jwtObj","obj","encoded","decoded","processDecodedJWT","encoded_JWT","isTestNet","test_net_contract_id","forEach","field","createUserOnServer","network","logOut","logout","logoutParams","returnTo","userDetails","nonce","sid","aud","iss","iat","exp","updated_at","readContract","console","log","viewCustomContract","_b","networkType","tags","func","function","signTransactionWarp","warpData","toContractId","toContractFunction","txnData","sendTransactionWarp","signTransactionArweave","file_hash","sendTransactionArweave","blob","Blob","formData","FormData","append","fetch","body","json","signTransactionBundlr","sendTransactionBundlr","initializeJWK","privateKey","key","key1","parse","JWK_public_key_PEM","jwkToPem","JWK_public_key","PEM_key_JWT","JWKBackupTxn","payload","Math","floor","Date","now","sub","contract_input","privatePem","private","header","alg","typ","JWK_signed_JWT","KJUR","jws","JWS","sign","readCustomContract","verifyArweaveData","decodedVerifyJWT","getTagHash","transactionId","headers","responseType","tag","atob","name","value","tagHash","getOnChainData","get","onChainHash","validData","userId","verifyBundlrData","encryptData","encryptedData","CryptoJS","AES","encrypt","decryptData","bytes","decrypt","decryptedData","enc","Utf8","deployWarpContract","contractSrc","contractState","state","deployWarpContractFromTx","srcTxId"],"mappings":"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"}